[{
        "db_id": "twitter_1",
        "query": "SELECT email FROM user_profiles WHERE name  =  'Mary'",
        "query_toks": ["SELECT", "email", "FROM", "user_profiles", "WHERE", "name", "=", "'Mary", "'"],
        "query_toks_no_value": ["select", "email", "from", "user_profiles", "where", "name", "=", "value"],
        "question": "Find the emails of the user named \"Mary\".",
        "question_toks": ["Find", "the", "emails", "of", "the", "user", "named", "``", "Mary", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"Mary\"", null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT partitionid FROM user_profiles WHERE name  =  'Iron Man'",
        "query_toks": ["SELECT", "partitionid", "FROM", "user_profiles", "WHERE", "name", "=", "'Iron", "Man", "'"],
        "query_toks_no_value": ["select", "partitionid", "from", "user_profiles", "where", "name", "=", "value"],
        "question": "What is the partition id of the user named \"Iron Man\".",
        "question_toks": ["What", "is", "the", "partition", "id", "of", "the", "user", "named", "``", "Iron", "Man", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"Iron Man\"", null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT count(*) FROM user_profiles",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "user_profiles"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "user_profiles"],
        "question": "How many users are there?",
        "question_toks": ["How", "many", "users", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT count(*) FROM follows",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "follows"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "follows"],
        "question": "How many followers does each user have?",
        "question_toks": ["How", "many", "followers", "does", "each", "user", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT count(*) FROM follows GROUP BY f1",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "follows", "GROUP", "BY", "f1"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "follows", "group", "by", "value"],
        "question": "Find the number of followers for each user.",
        "question_toks": ["Find", "the", "number", "of", "followers", "for", "each", "user", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT count(*) FROM tweets",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "tweets"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "tweets"],
        "question": "Find the number of tweets in record.",
        "question_toks": ["Find", "the", "number", "of", "tweets", "in", "record", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT count(DISTINCT UID) FROM tweets",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "UID", ")", "FROM", "tweets"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "uid", ")", "from", "tweets"],
        "question": "Find the number of users who posted some tweets.",
        "question_toks": ["Find", "the", "number", "of", "users", "who", "posted", "some", "tweets", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 4, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE name LIKE '%Swift%'",
        "query_toks": ["SELECT", "name", ",", "email", "FROM", "user_profiles", "WHERE", "name", "LIKE", "'", "%", "Swift", "%", "'"],
        "query_toks_no_value": ["select", "name", ",", "email", "from", "user_profiles", "where", "name", "like", "value"],
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "question_toks": ["Find", "the", "name", "and", "email", "of", "the", "user", "whose", "name", "contains", "the", "word", "\u2018Swift\u2019", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 8, false], null], "\"%Swift%\"", null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "query_toks": ["SELECT", "name", "FROM", "user_profiles", "WHERE", "email", "LIKE", "'", "%", "superstar", "%", "'", "OR", "email", "LIKE", "'", "%", "edu", "%", "'"],
        "query_toks_no_value": ["select", "name", "from", "user_profiles", "where", "email", "like", "value", "or", "email", "like", "value"],
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "question_toks": ["Find", "the", "names", "of", "users", "whose", "emails", "contain", "\u2018superstar\u2019", "or", "\u2018edu\u2019", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 9, false], null], "\"%superstar%\"", null], "or", [false, 9, [0, [0, 9, false], null], "\"%edu%\"", null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "query_toks": ["SELECT", "text", "FROM", "tweets", "WHERE", "text", "LIKE", "'", "%", "intern", "%", "'"],
        "query_toks_no_value": ["select", "text", "from", "tweets", "where", "text", "like", "value"],
        "question": "Return the text of tweets about the topic 'intern'.",
        "question_toks": ["Return", "the", "text", "of", "tweets", "about", "the", "topic", "'intern", "'", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 5, false], null], "\"%intern%\"", null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles WHERE followers  >  1000",
        "query_toks": ["SELECT", "name", ",", "email", "FROM", "user_profiles", "WHERE", "followers", ">", "1000"],
        "query_toks_no_value": ["select", "name", ",", "email", "from", "user_profiles", "where", "followers", ">", "value"],
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "question_toks": ["Find", "the", "name", "and", "email", "of", "the", "users", "who", "have", "more", "than", "1000", "followers", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 1000.0, null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')",
        "query_toks": ["SELECT", "T1.name", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f1", "GROUP", "BY", "T2.f1", "HAVING", "count", "(", "*", ")", ">", "(", "SELECT", "count", "(", "*", ")", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f1", "WHERE", "T1.name", "=", "'Tyler", "Swift", "'", ")"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f1", "group", "by", "t2", ".", "f1", "having", "count", "(", "*", ")", ">", "(", "select", "count", "(", "*", ")", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f1", "where", "t1", ".", "name", "=", "value", ")"],
        "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
        "question_toks": ["Find", "the", "names", "of", "the", "users", "whose", "number", "of", "followers", "is", "greater", "than", "that", "of", "the", "user", "named", "``", "Tyler", "Swift", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 3, [0, [3, 0, false], null], {
                        "except": null,
                        "from": {
                            "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]],
                            "table_units": [["table_unit", 2], ["table_unit", 0]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[3, [0, [0, 0, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 8, false], null], "\"Tyler Swift\"", null]]
                    }, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "query_toks": ["SELECT", "T1.name", ",", "T1.email", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f1", "GROUP", "BY", "T2.f1", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "email", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f1", "group", "by", "t2", ".", "f1", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Find the name and email for the users who have more than one follower.",
        "question_toks": ["Find", "the", "name", "and", "email", "for", "the", "users", "who", "have", "more", "than", "one", "follower", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "query_toks": ["SELECT", "T1.name", "FROM", "user_profiles", "AS", "T1", "JOIN", "tweets", "AS", "T2", "ON", "T1.uid", "=", "T2.uid", "GROUP", "BY", "T2.uid", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "user_profiles", "as", "t1", "join", "tweets", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "uid", "group", "by", "t2", ".", "uid", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Find the names of users who have more than one tweet.",
        "question_toks": ["Find", "the", "names", "of", "users", "who", "have", "more", "than", "one", "tweet", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 4, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [[0, 4, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" INTERSECT SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Susan\"",
        "query_toks": ["SELECT", "T2.f1", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f2", "WHERE", "T1.name", "=", "``", "Mary", "''", "INTERSECT", "SELECT", "T2.f1", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f2", "WHERE", "T1.name", "=", "``", "Susan", "''"],
        "query_toks_no_value": ["select", "t2", ".", "f1", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f2", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t2", ".", "f1", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f2", "where", "t1", ".", "name", "=", "value"],
        "question": "Find the id of users who are followed by Mary and Susan.",
        "question_toks": ["Find", "the", "id", "of", "users", "who", "are", "followed", "by", "Mary", "and", "Susan", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]],
                    "table_units": [["table_unit", 2], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 1, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 8, false], null], "\"Susan\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"Mary\"", null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT T2.f1 FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f2 WHERE T1.name  =  \"Mary\" OR T1.name  =  \"Susan\"",
        "query_toks": ["SELECT", "T2.f1", "FROM", "user_profiles", "AS", "T1", "JOIN", "follows", "AS", "T2", "ON", "T1.uid", "=", "T2.f2", "WHERE", "T1.name", "=", "``", "Mary", "''", "OR", "T1.name", "=", "``", "Susan", "''"],
        "query_toks_no_value": ["select", "t2", ".", "f1", "from", "user_profiles", "as", "t1", "join", "follows", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "f2", "where", "t1", ".", "name", "=", "value", "or", "t1", ".", "name", "=", "value"],
        "question": "Find the id of users who are followed by Mary or Susan.",
        "question_toks": ["Find", "the", "id", "of", "users", "who", "are", "followed", "by", "Mary", "or", "Susan", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"Mary\"", null], "or", [false, 2, [0, [0, 8, false], null], "\"Susan\"", null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 1",
        "query_toks": ["SELECT", "name", "FROM", "user_profiles", "ORDER", "BY", "followers", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", "from", "user_profiles", "order", "by", "followers", "desc", "limit", "value"],
        "question": "Find the name of the user who has the largest number of followers.",
        "question_toks": ["Find", "the", "name", "of", "the", "user", "who", "has", "the", "largest", "number", "of", "followers", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "query_toks": ["SELECT", "name", ",", "email", "FROM", "user_profiles", "ORDER", "BY", "followers", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", ",", "email", "from", "user_profiles", "order", "by", "followers", "limit", "value"],
        "question": "Find the name and email of the user followed by the least number of people.",
        "question_toks": ["Find", "the", "name", "and", "email", "of", "the", "user", "followed", "by", "the", "least", "number", "of", "people", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT name ,  followers FROM user_profiles ORDER BY followers DESC",
        "query_toks": ["SELECT", "name", ",", "followers", "FROM", "user_profiles", "ORDER", "BY", "followers", "DESC"],
        "query_toks_no_value": ["select", "name", ",", "followers", "from", "user_profiles", "order", "by", "followers", "desc"],
        "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
        "question_toks": ["List", "the", "name", "and", "number", "of", "followers", "for", "each", "user", ",", "and", "sort", "the", "results", "by", "the", "number", "of", "followers", "in", "descending", "order", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT name FROM user_profiles ORDER BY followers DESC LIMIT 5",
        "query_toks": ["SELECT", "name", "FROM", "user_profiles", "ORDER", "BY", "followers", "DESC", "LIMIT", "5"],
        "query_toks_no_value": ["select", "name", "from", "user_profiles", "order", "by", "followers", "desc", "limit", "value"],
        "question": "List the names of 5 users followed by the largest number of other users.",
        "question_toks": ["List", "the", "names", "of", "5", "users", "followed", "by", "the", "largest", "number", "of", "other", "users", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 5,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT text FROM tweets ORDER BY createdate",
        "query_toks": ["SELECT", "text", "FROM", "tweets", "ORDER", "BY", "createdate"],
        "query_toks_no_value": ["select", "text", "from", "tweets", "order", "by", "createdate"],
        "question": "List the text of all tweets in the order of date.",
        "question_toks": ["List", "the", "text", "of", "all", "tweets", "in", "the", "order", "of", "date", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 6, false], null]]],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid",
        "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "user_profiles", "AS", "T1", "JOIN", "tweets", "AS", "T2", "ON", "T1.uid", "=", "T2.uid", "GROUP", "BY", "T2.uid"],
        "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "user_profiles", "as", "t1", "join", "tweets", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "uid", "group", "by", "t2", ".", "uid"],
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "question_toks": ["Find", "the", "name", "of", "each", "user", "and", "number", "of", "tweets", "tweeted", "by", "each", "of", "them", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 4, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [[0, 4, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "query_toks": ["SELECT", "T1.name", ",", "T1.partitionid", "FROM", "user_profiles", "AS", "T1", "JOIN", "tweets", "AS", "T2", "ON", "T1.uid", "=", "T2.uid", "GROUP", "BY", "T2.uid", "HAVING", "count", "(", "*", ")", "<", "2"],
        "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "partitionid", "from", "user_profiles", "as", "t1", "join", "tweets", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "uid", "group", "by", "t2", ".", "uid", "having", "count", "(", "*", ")", "<", "value"],
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "question_toks": ["Find", "the", "name", "and", "partition", "id", "for", "users", "who", "tweeted", "less", "than", "twice", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 4, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [[0, 4, false]],
            "having": [[false, 4, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "user_profiles", "AS", "T1", "JOIN", "tweets", "AS", "T2", "ON", "T1.uid", "=", "T2.uid", "GROUP", "BY", "T2.uid", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "user_profiles", "as", "t1", "join", "tweets", "as", "t2", "on", "t1", ".", "uid", "=", "t2", ".", "uid", "group", "by", "t2", ".", "uid", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "question_toks": ["Find", "the", "name", "of", "the", "user", "who", "tweeted", "more", "than", "once", ",", "and", "number", "of", "tweets", "tweeted", "by", "them", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 4, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [[0, 4, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT avg(followers) FROM user_profiles WHERE UID NOT IN (SELECT UID FROM tweets)",
        "query_toks": ["SELECT", "avg", "(", "followers", ")", "FROM", "user_profiles", "WHERE", "UID", "NOT", "IN", "(", "SELECT", "UID", "FROM", "tweets", ")"],
        "query_toks_no_value": ["select", "avg", "(", "followers", ")", "from", "user_profiles", "where", "uid", "not", "in", "(", "select", "uid", "from", "tweets", ")"],
        "question": "Find the average number of followers for the users who do not have any tweet.",
        "question_toks": ["Find", "the", "average", "number", "of", "followers", "for", "the", "users", "who", "do", "not", "have", "any", "tweet", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 7, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 4, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "query_toks": ["SELECT", "avg", "(", "followers", ")", "FROM", "user_profiles", "WHERE", "UID", "IN", "(", "SELECT", "UID", "FROM", "tweets", ")"],
        "query_toks_no_value": ["select", "avg", "(", "followers", ")", "from", "user_profiles", "where", "uid", "in", "(", "select", "uid", "from", "tweets", ")"],
        "question": "Find the average number of followers for the users who had some tweets.",
        "question_toks": ["Find", "the", "average", "number", "of", "followers", "for", "the", "users", "who", "had", "some", "tweets", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 8, [0, [0, 7, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 4, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "twitter_1",
        "query": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
        "query_toks": ["SELECT", "max", "(", "followers", ")", ",", "sum", "(", "followers", ")", "FROM", "user_profiles"],
        "query_toks_no_value": ["select", "max", "(", "followers", ")", ",", "sum", "(", "followers", ")", "from", "user_profiles"],
        "question": "Find the maximum and total number of followers of all users.",
        "question_toks": ["Find", "the", "maximum", "and", "total", "number", "of", "followers", "of", "all", "users", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 11, false], null]], [4, [0, [0, 11, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT count(*) FROM member WHERE Membership_card  =  'Black'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "member", "WHERE", "Membership_card", "=", "'Black", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "member", "where", "membership_card", "=", "value"],
        "question": "How many members have the black membership card?",
        "question_toks": ["How", "many", "members", "have", "the", "black", "membership", "card", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"Black\"", null]]
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT count(*) ,  address FROM member GROUP BY address",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "address", "FROM", "member", "GROUP", "BY", "address"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "address", "from", "member", "group", "by", "address"],
        "question": "Find the number of members living in each address.",
        "question_toks": ["Find", "the", "number", "of", "members", "living", "in", "each", "address", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT name FROM member WHERE address  =  'Harford' OR address  =  'Waterbury'",
        "query_toks": ["SELECT", "name", "FROM", "member", "WHERE", "address", "=", "'Harford", "'", "OR", "address", "=", "'Waterbury", "'"],
        "query_toks_no_value": ["select", "name", "from", "member", "where", "address", "=", "value", "or", "address", "=", "value"],
        "question": "Give me the names of members whose address is in Harford or Waterbury.",
        "question_toks": ["Give", "me", "the", "names", "of", "members", "whose", "address", "is", "in", "Harford", "or", "Waterbury", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Harford\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"Waterbury\"", null]]
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT name ,  member_id FROM member WHERE Membership_card  =  'Black' OR age  <  30",
        "query_toks": ["SELECT", "name", ",", "member_id", "FROM", "member", "WHERE", "Membership_card", "=", "'Black", "'", "OR", "age", "<", "30"],
        "query_toks_no_value": ["select", "name", ",", "member_id", "from", "member", "where", "membership_card", "=", "value", "or", "age", "<", "value"],
        "question": "Find the ids and names of members who are under age 30 or with black membership card.",
        "question_toks": ["Find", "the", "ids", "and", "names", "of", "members", "who", "are", "under", "age", "30", "or", "with", "black", "membership", "card", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"Black\"", null], "or", [false, 4, [0, [0, 9, false], null], 30.0, null]]
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "query_toks": ["SELECT", "Time_of_purchase", ",", "age", ",", "address", "FROM", "member", "ORDER", "BY", "Time_of_purchase"],
        "query_toks_no_value": ["select", "time_of_purchase", ",", "age", ",", "address", "from", "member", "order", "by", "time_of_purchase"],
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "question_toks": ["Find", "the", "purchase", "time", ",", "age", "and", "address", "of", "each", "member", ",", "and", "show", "the", "results", "in", "the", "order", "of", "purchase", "time", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 10, false], null]]],
            "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "query_toks": ["SELECT", "Membership_card", "FROM", "member", "GROUP", "BY", "Membership_card", "HAVING", "count", "(", "*", ")", ">", "5"],
        "query_toks_no_value": ["select", "membership_card", "from", "member", "group", "by", "membership_card", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Which membership card has more than 5 members?",
        "question_toks": ["Which", "membership", "card", "has", "more", "than", "5", "members", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 8, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 5.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member WHERE age  <  30 INTERSECT SELECT address FROM member WHERE age  >  40",
        "query_toks": ["SELECT", "address", "FROM", "member", "WHERE", "age", "<", "30", "INTERSECT", "SELECT", "address", "FROM", "member", "WHERE", "age", ">", "40"],
        "query_toks_no_value": ["select", "address", "from", "member", "where", "age", "<", "value", "intersect", "select", "address", "from", "member", "where", "age", ">", "value"],
        "question": "Which address has both members younger than 30 and members older than 40?",
        "question_toks": ["Which", "address", "has", "both", "members", "younger", "than", "30", "and", "members", "older", "than", "40", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 12, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 9, false], null], 40.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 9, false], null], 30.0, null]]
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
        "query_toks": ["SELECT", "membership_card", "FROM", "member", "WHERE", "address", "=", "'Hartford", "'", "INTERSECT", "SELECT", "membership_card", "FROM", "member", "WHERE", "address", "=", "'Waterbury", "'"],
        "query_toks_no_value": ["select", "membership_card", "from", "member", "where", "address", "=", "value", "intersect", "select", "membership_card", "from", "member", "where", "address", "=", "value"],
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "question_toks": ["What", "is", "the", "membership", "card", "held", "by", "both", "members", "living", "in", "Hartford", "and", "ones", "living", "in", "Waterbury", "address", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 8, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 12, false], null], "\"Waterbury\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Hartford\"", null]]
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT count(*) FROM member WHERE address != 'Hartford'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "member", "WHERE", "address", "!", "=", "'Hartford", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "member", "where", "address", "!", "=", "value"],
        "question": "How many members are not living in Hartford?",
        "question_toks": ["How", "many", "members", "are", "not", "living", "in", "Hartford", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 7, [0, [0, 12, false], null], "\"Hartford\"", null]]
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM member EXCEPT SELECT address FROM member WHERE Membership_card  =  'Black'",
        "query_toks": ["SELECT", "address", "FROM", "member", "EXCEPT", "SELECT", "address", "FROM", "member", "WHERE", "Membership_card", "=", "'Black", "'"],
        "query_toks_no_value": ["select", "address", "from", "member", "except", "select", "address", "from", "member", "where", "membership_card", "=", "value"],
        "question": "Which address do not have any member with the black membership card?",
        "question_toks": ["Which", "address", "do", "not", "have", "any", "member", "with", "the", "black", "membership", "card", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 12, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 8, false], null], "\"Black\"", null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT address FROM shop ORDER BY open_year",
        "query_toks": ["SELECT", "address", "FROM", "shop", "ORDER", "BY", "open_year"],
        "query_toks_no_value": ["select", "address", "from", "shop", "order", "by", "open_year"],
        "question": "Show the shop addresses ordered by their opening year.",
        "question_toks": ["Show", "the", "shop", "addresses", "ordered", "by", "their", "opening", "year", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 5, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT avg(num_of_staff) ,  avg(score) FROM shop",
        "query_toks": ["SELECT", "avg", "(", "num_of_staff", ")", ",", "avg", "(", "score", ")", "FROM", "shop"],
        "query_toks_no_value": ["select", "avg", "(", "num_of_staff", ")", ",", "avg", "(", "score", ")", "from", "shop"],
        "question": "What are the average score and average staff number of all shops?",
        "question_toks": ["What", "are", "the", "average", "score", "and", "average", "staff", "number", "of", "all", "shops", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 3, false], null]], [5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT shop_id ,  address FROM shop WHERE score  <  (SELECT avg(score) FROM shop)",
        "query_toks": ["SELECT", "shop_id", ",", "address", "FROM", "shop", "WHERE", "score", "<", "(", "SELECT", "avg", "(", "score", ")", "FROM", "shop", ")"],
        "query_toks_no_value": ["select", "shop_id", ",", "address", "from", "shop", "where", "score", "<", "(", "select", "avg", "(", "score", ")", "from", "shop", ")"],
        "question": "Find the id and address of the shops whose score is below the average score.",
        "question_toks": ["Find", "the", "id", "and", "address", "of", "the", "shops", "whose", "score", "is", "below", "the", "average", "score", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 4, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 0]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 4, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT address ,  num_of_staff FROM shop WHERE shop_id NOT IN (SELECT shop_id FROM happy_hour)",
        "query_toks": ["SELECT", "address", ",", "num_of_staff", "FROM", "shop", "WHERE", "shop_id", "NOT", "IN", "(", "SELECT", "shop_id", "FROM", "happy_hour", ")"],
        "query_toks_no_value": ["select", "address", ",", "num_of_staff", "from", "shop", "where", "shop_id", "not", "in", "(", "select", "shop_id", "from", "happy_hour", ")"],
        "question": "Find the address and staff number of the shops that do not have any happy hour.",
        "question_toks": ["Find", "the", "address", "and", "staff", "number", "of", "the", "shops", "that", "do", "not", "have", "any", "happy", "hour", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 1, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 14, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT t1.address ,  t1.shop_id FROM shop AS t1 JOIN happy_hour AS t2 ON t1.shop_id  =  t2.shop_id WHERE MONTH  =  'May'",
        "query_toks": ["SELECT", "t1.address", ",", "t1.shop_id", "FROM", "shop", "AS", "t1", "JOIN", "happy_hour", "AS", "t2", "ON", "t1.shop_id", "=", "t2.shop_id", "WHERE", "MONTH", "=", "'May", "'"],
        "query_toks_no_value": ["select", "t1", ".", "address", ",", "t1", ".", "shop_id", "from", "shop", "as", "t1", "join", "happy_hour", "as", "t2", "on", "t1", ".", "shop_id", "=", "t2", ".", "shop_id", "where", "month", "=", "value"],
        "question": "What are the id and address of the shops which have a happy hour in May?",
        "question_toks": ["What", "are", "the", "id", "and", "address", "of", "the", "shops", "which", "have", "a", "happy", "hour", "in", "May", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 15, false], null], "\"May\"", null]]
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT shop_id ,  count(*) FROM happy_hour GROUP BY shop_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "shop_id", ",", "count", "(", "*", ")", "FROM", "happy_hour", "GROUP", "BY", "shop_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "shop_id", ",", "count", "(", "*", ")", "from", "happy_hour", "group", "by", "shop_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "which shop has happy hour most frequently? List its id and number of happy hours.",
        "question_toks": ["which", "shop", "has", "happy", "hour", "most", "frequently", "?", "List", "its", "id", "and", "number", "of", "happy", "hours", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 14, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "MONTH", "FROM", "happy_hour", "GROUP", "BY", "MONTH", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "month", "from", "happy_hour", "group", "by", "month", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which month has the most happy hours?",
        "question_toks": ["Which", "month", "has", "the", "most", "happy", "hours", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 15, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "coffee_shop",
        "query": "SELECT MONTH FROM happy_hour GROUP BY MONTH HAVING count(*)  >  2",
        "query_toks": ["SELECT", "MONTH", "FROM", "happy_hour", "GROUP", "BY", "MONTH", "HAVING", "count", "(", "*", ")", ">", "2"],
        "query_toks_no_value": ["select", "month", "from", "happy_hour", "group", "by", "month", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Which months have more than 2 happy hours?",
        "question_toks": ["Which", "months", "have", "more", "than", "2", "happy", "hours", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 15, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT count(*) FROM game WHERE season  >  2007",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "game", "WHERE", "season", ">", "2007"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "game", "where", "season", ">", "value"],
        "question": "How many games are held after season 2007?",
        "question_toks": ["How", "many", "games", "are", "held", "after", "season", "2007", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 9, false], null], 2007.0, null]]
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT Date FROM game ORDER BY home_team DESC",
        "query_toks": ["SELECT", "Date", "FROM", "game", "ORDER", "BY", "home_team", "DESC"],
        "query_toks_no_value": ["select", "date", "from", "game", "order", "by", "home_team", "desc"],
        "question": "List the dates of games by the home team name in descending order.",
        "question_toks": ["List", "the", "dates", "of", "games", "by", "the", "home", "team", "name", "in", "descending", "order", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT season ,  home_team ,  away_team FROM game",
        "query_toks": ["SELECT", "season", ",", "home_team", ",", "away_team", "FROM", "game"],
        "query_toks_no_value": ["select", "season", ",", "home_team", ",", "away_team", "from", "game"],
        "question": "List the season, home team, away team of all the games.",
        "question_toks": ["List", "the", "season", ",", "home", "team", ",", "away", "team", "of", "all", "the", "games", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 11, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT max(home_games) ,  min(home_games) ,  avg(home_games) FROM stadium",
        "query_toks": ["SELECT", "max", "(", "home_games", ")", ",", "min", "(", "home_games", ")", ",", "avg", "(", "home_games", ")", "FROM", "stadium"],
        "query_toks_no_value": ["select", "max", "(", "home_games", ")", ",", "min", "(", "home_games", ")", ",", "avg", "(", "home_games", ")", "from", "stadium"],
        "question": "What are the maximum, minimum and average home games each stadium held?",
        "question_toks": ["What", "are", "the", "maximum", ",", "minimum", "and", "average", "home", "games", "each", "stadium", "held", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 3, false], null]], [2, [0, [0, 3, false], null]], [5, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT average_attendance FROM stadium WHERE capacity_percentage  >  100",
        "query_toks": ["SELECT", "average_attendance", "FROM", "stadium", "WHERE", "capacity_percentage", ">", "100"],
        "query_toks_no_value": ["select", "average_attendance", "from", "stadium", "where", "capacity_percentage", ">", "value"],
        "question": "What is the average attendance of stadiums with capacity percentage higher than 100%?",
        "question_toks": ["What", "is", "the", "average", "attendance", "of", "stadiums", "with", "capacity", "percentage", "higher", "than", "100", "%", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 6, false], null], 100.0, null]]
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "query_toks": ["SELECT", "player", ",", "number_of_matches", ",", "SOURCE", "FROM", "injury_accident", "WHERE", "injury", "!", "=", "'Knee", "problem", "'"],
        "query_toks_no_value": ["select", "player", ",", "number_of_matches", ",", "source", "from", "injury_accident", "where", "injury", "!", "=", "value"],
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "question_toks": ["What", "are", "the", "player", "name", ",", "number", "of", "matches", ",", "and", "information", "source", "for", "players", "who", "do", "not", "suffer", "from", "injury", "of", "'Knee", "problem", "'", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 19, false], null]], [0, [0, [0, 20, false], null]]]],
            "union": null,
            "where": [[false, 7, [0, [0, 18, false], null], "\"Knee problem\"", null]]
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
        "query_toks": ["SELECT", "T1.season", "FROM", "game", "AS", "T1", "JOIN", "injury_accident", "AS", "T2", "ON", "T1.id", "=", "T2.game_id", "WHERE", "T2.player", "=", "'Walter", "Samuel", "'"],
        "query_toks_no_value": ["select", "t1", ".", "season", "from", "game", "as", "t1", "join", "injury_accident", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "game_id", "where", "t2", ".", "player", "=", "value"],
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "question_toks": ["What", "is", "the", "season", "of", "the", "game", "which", "causes", "the", "player", "'Walter", "Samuel", "'", "to", "get", "injured", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 15, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Walter Samuel\"", null]]
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T1.id", ",", "T1.score", ",", "T1.date", "FROM", "game", "AS", "T1", "JOIN", "injury_accident", "AS", "T2", "ON", "T2.game_id", "=", "T1.id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "score", ",", "t1", ".", "date", "from", "game", "as", "t1", "join", "injury_accident", "as", "t2", "on", "t2", ".", "game_id", "=", "t1", ".", "id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "question_toks": ["What", "are", "the", "ids", ",", "scores", ",", "and", "dates", "of", "the", "games", "which", "caused", "at", "least", "two", "injury", "accidents", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 8, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 13, false], null]], [0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "stadium", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.id", "=", "T2.stadium_id", "JOIN", "injury_accident", "AS", "T3", "ON", "T2.id", "=", "T3.game_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "stadium", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "join", "injury_accident", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "game_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "question_toks": ["What", "are", "the", "id", "and", "name", "of", "the", "stadium", "where", "the", "most", "injury", "accidents", "happened", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "stadium", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.id", "=", "T2.stadium_id", "JOIN", "injury_accident", "AS", "T3", "ON", "T2.id", "=", "T3.game_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "stadium", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "join", "injury_accident", "as", "t3", "on", "t2", ".", "id", "=", "t3", ".", "game_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "question_toks": ["Find", "the", "id", "and", "name", "of", "the", "stadium", "where", "the", "largest", "number", "of", "injury", "accidents", "occurred", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",
        "query_toks": ["SELECT", "T1.season", ",", "T2.name", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id", "WHERE", "T3.injury", "=", "'Foot", "injury", "'", "OR", "T3.injury", "=", "'Knee", "problem", "'"],
        "query_toks_no_value": ["select", "t1", ".", "season", ",", "t2", ".", "name", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id", "where", "t3", ".", "injury", "=", "value", "or", "t3", ".", "injury", "=", "value"],
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "question_toks": ["In", "which", "season", "and", "which", "stadium", "did", "any", "player", "have", "an", "injury", "of", "'Foot", "injury", "'", "or", "'Knee", "problem", "'", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Foot injury\"", null], "or", [false, 2, [0, [0, 18, false], null], "\"Knee problem\"", null]]
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT count(DISTINCT SOURCE) FROM injury_accident",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "SOURCE", ")", "FROM", "injury_accident"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "source", ")", "from", "injury_accident"],
        "question": "How many different kinds of information sources are there for injury accidents?",
        "question_toks": ["How", "many", "different", "kinds", "of", "information", "sources", "are", "there", "for", "injury", "accidents", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 20, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "game", "WHERE", "id", "NOT", "IN", "(", "SELECT", "game_id", "FROM", "injury_accident", ")"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "game", "where", "id", "not", "in", "(", "select", "game_id", "from", "injury_accident", ")"],
        "question": "How many games are free of injury accidents?",
        "question_toks": ["How", "many", "games", "are", "free", "of", "injury", "accidents", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 8, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 15, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "T1.injury", ")", "FROM", "injury_accident", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.game_id", "=", "T2.id", "WHERE", "T2.season", ">", "2010"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "t1", ".", "injury", ")", "from", "injury_accident", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "game_id", "=", "t2", ".", "id", "where", "t2", ".", "season", ">", "value"],
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "question_toks": ["How", "many", "distinct", "kinds", "of", "injuries", "happened", "after", "season", "2010", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 18, true], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 9, false], null], 2010.0, null]]
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
        "query_toks": ["SELECT", "T2.name", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id", "WHERE", "T3.player", "=", "'Walter", "Samuel", "'", "INTERSECT", "SELECT", "T2.name", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id", "WHERE", "T3.player", "=", "'Thiago", "Motta", "'"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id", "where", "t3", ".", "player", "=", "value", "intersect", "select", "t2", ".", "name", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id", "where", "t3", ".", "player", "=", "value"],
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "question_toks": ["List", "the", "name", "of", "the", "stadium", "where", "both", "the", "player", "'Walter", "Samuel", "'", "and", "the", "player", "'Thiago", "Motta", "'", "got", "injured", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 17, false], null], "\"Thiago Motta\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Walter Samuel\"", null]]
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT name ,  average_attendance ,  total_attendance FROM stadium EXCEPT SELECT T2.name ,  T2.average_attendance ,  T2.total_attendance FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id",
        "query_toks": ["SELECT", "name", ",", "average_attendance", ",", "total_attendance", "FROM", "stadium", "EXCEPT", "SELECT", "T2.name", ",", "T2.average_attendance", ",", "T2.total_attendance", "FROM", "game", "AS", "T1", "JOIN", "stadium", "AS", "T2", "ON", "T1.stadium_id", "=", "T2.id", "JOIN", "injury_accident", "AS", "T3", "ON", "T1.id", "=", "T3.game_id"],
        "query_toks_no_value": ["select", "name", ",", "average_attendance", ",", "total_attendance", "from", "stadium", "except", "select", "t2", ".", "name", ",", "t2", ".", "average_attendance", ",", "t2", ".", "total_attendance", "from", "game", "as", "t1", "join", "stadium", "as", "t2", "on", "t1", ".", "stadium_id", "=", "t2", ".", "id", "join", "injury_accident", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "game_id"],
        "question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.",
        "question_toks": ["Show", "the", "name", ",", "average", "attendance", ",", "total", "attendance", "for", "stadiums", "where", "no", "accidents", "happened", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 7, false], null], [0, 1, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT name FROM stadium WHERE name LIKE \"%Bank%\"",
        "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "name", "LIKE", "``", "%", "Bank", "%", "''"],
        "query_toks_no_value": ["select", "name", "from", "stadium", "where", "name", "like", "value"],
        "question": "Which stadium name contains the substring \"Bank\"?",
        "question_toks": ["Which", "stadium", "name", "contains", "the", "substring", "``", "Bank", "''", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 2, false], null], "\"%Bank%\"", null]]
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT T1.id ,  count(*) FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id GROUP BY T1.id",
        "query_toks": ["SELECT", "T1.id", ",", "count", "(", "*", ")", "FROM", "stadium", "AS", "T1", "JOIN", "game", "AS", "T2", "ON", "T1.id", "=", "T2.stadium_id", "GROUP", "BY", "T1.id"],
        "query_toks_no_value": ["select", "t1", ".", "id", ",", "count", "(", "*", ")", "from", "stadium", "as", "t1", "join", "game", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "group", "by", "t1", ".", "id"],
        "question": "How many games has each stadium held?",
        "question_toks": ["How", "many", "games", "has", "each", "stadium", "held", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 7, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "game_injury",
        "query": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "query_toks": ["SELECT", "T1.date", ",", "T2.player", "FROM", "game", "AS", "T1", "JOIN", "injury_accident", "AS", "T2", "ON", "T1.id", "=", "T2.game_id", "ORDER", "BY", "T1.season", "DESC"],
        "query_toks_no_value": ["select", "t1", ".", "date", ",", "t2", ".", "player", "from", "game", "as", "t1", "join", "injury_accident", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "game_id", "order", "by", "t1", ".", "season", "desc"],
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "question_toks": ["For", "each", "injury", "accident", ",", "find", "the", "date", "of", "the", "game", "and", "the", "name", "of", "the", "injured", "player", "in", "the", "game", ",", "and", "sort", "the", "results", "in", "descending", "order", "of", "game", "season", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 15, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 17, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT count(*) FROM debate",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "debate"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "debate"],
        "question": "How many debates are there?",
        "question_toks": ["How", "many", "debates", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "query_toks": ["SELECT", "Venue", "FROM", "debate", "ORDER", "BY", "Num_of_Audience", "ASC"],
        "query_toks_no_value": ["select", "venue", "from", "debate", "order", "by", "num_of_audience", "asc"],
        "question": "List the venues of debates in ascending order of the number of audience.",
        "question_toks": ["List", "the", "venues", "of", "debates", "in", "ascending", "order", "of", "the", "number", "of", "audience", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT Date ,  Venue FROM debate",
        "query_toks": ["SELECT", "Date", ",", "Venue", "FROM", "debate"],
        "query_toks_no_value": ["select", "date", ",", "venue", "from", "debate"],
        "question": "What are the date and venue of each debate?",
        "question_toks": ["What", "are", "the", "date", "and", "venue", "of", "each", "debate", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT Date FROM debate WHERE Num_of_Audience  >  150",
        "query_toks": ["SELECT", "Date", "FROM", "debate", "WHERE", "Num_of_Audience", ">", "150"],
        "query_toks_no_value": ["select", "date", "from", "debate", "where", "num_of_audience", ">", "value"],
        "question": "List the dates of debates with number of audience bigger than 150",
        "question_toks": ["List", "the", "dates", "of", "debates", "with", "number", "of", "audience", "bigger", "than", "150"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 9, false], null], 150.0, null]]
        }
    }, {
        "db_id": "debate",
        "query": "SELECT Name FROM  people WHERE Age  =  35 OR Age  =  36",
        "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "Age", "=", "35", "OR", "Age", "=", "36"],
        "query_toks_no_value": ["select", "name", "from", "people", "where", "age", "=", "value", "or", "age", "=", "value"],
        "question": "Show the names of people aged either 35 or 36.",
        "question_toks": ["Show", "the", "names", "of", "people", "aged", "either", "35", "or", "36", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], 35.0, null], "or", [false, 2, [0, [0, 5, false], null], 36.0, null]]
        }
    }, {
        "db_id": "debate",
        "query": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "query_toks": ["SELECT", "Party", "FROM", "people", "ORDER", "BY", "Age", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "party", "from", "people", "order", "by", "age", "asc", "limit", "value"],
        "question": "What is the party of the youngest people?",
        "question_toks": ["What", "is", "the", "party", "of", "the", "youngest", "people", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 5, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT Party ,  COUNT(*) FROM people GROUP BY Party",
        "query_toks": ["SELECT", "Party", ",", "COUNT", "(", "*", ")", "FROM", "people", "GROUP", "BY", "Party"],
        "query_toks_no_value": ["select", "party", ",", "count", "(", "*", ")", "from", "people", "group", "by", "party"],
        "question": "Show different parties of people along with the number of people in each party.",
        "question_toks": ["Show", "different", "parties", "of", "people", "along", "with", "the", "number", "of", "people", "in", "each", "party", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 4, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT Party FROM people GROUP BY Party ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "Party", "FROM", "people", "GROUP", "BY", "Party", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "party", "from", "people", "group", "by", "party", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Show the party that has the most people.",
        "question_toks": ["Show", "the", "party", "that", "has", "the", "most", "people", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 4, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT DISTINCT Venue FROM debate",
        "query_toks": ["SELECT", "DISTINCT", "Venue", "FROM", "debate"],
        "query_toks_no_value": ["select", "distinct", "venue", "from", "debate"],
        "question": "Show the distinct venues of debates",
        "question_toks": ["Show", "the", "distinct", "venues", "of", "debates"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID",
        "query_toks": ["SELECT", "T3.Name", ",", "T2.Date", ",", "T2.Venue", "FROM", "debate_people", "AS", "T1", "JOIN", "debate", "AS", "T2", "ON", "T1.Debate_ID", "=", "T2.Debate_ID", "JOIN", "people", "AS", "T3", "ON", "T1.Affirmative", "=", "T3.People_ID"],
        "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "date", ",", "t2", ".", "venue", "from", "debate_people", "as", "t1", "join", "debate", "as", "t2", "on", "t1", ".", "debate_id", "=", "t2", ".", "debate_id", "join", "people", "as", "t3", "on", "t1", ".", "affirmative", "=", "t3", ".", "people_id"],
        "question": "Show the names of people, and dates and venues of debates they are on the affirmative side.",
        "question_toks": ["Show", "the", "names", "of", "people", ",", "and", "dates", "and", "venues", "of", "debates", "they", "are", "on", "the", "affirmative", "side", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT T3.Name ,  T2.Date ,  T2.Venue FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Negative  =  T3.People_ID ORDER BY T3.Name ASC",
        "query_toks": ["SELECT", "T3.Name", ",", "T2.Date", ",", "T2.Venue", "FROM", "debate_people", "AS", "T1", "JOIN", "debate", "AS", "T2", "ON", "T1.Debate_ID", "=", "T2.Debate_ID", "JOIN", "people", "AS", "T3", "ON", "T1.Negative", "=", "T3.People_ID", "ORDER", "BY", "T3.Name", "ASC"],
        "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "date", ",", "t2", ".", "venue", "from", "debate_people", "as", "t1", "join", "debate", "as", "t2", "on", "t1", ".", "debate_id", "=", "t2", ".", "debate_id", "join", "people", "as", "t3", "on", "t1", ".", "negative", "=", "t3", ".", "people_id", "order", "by", "t3", ".", "name", "asc"],
        "question": "Show the names of people, and dates and venues of debates they are on the negative side, ordered in ascending alphabetical order of name.",
        "question_toks": ["Show", "the", "names", "of", "people", ",", "and", "dates", "and", "venues", "of", "debates", "they", "are", "on", "the", "negative", "side", ",", "ordered", "in", "ascending", "alphabetical", "order", "of", "name", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 3, false], null]]],
            "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "query_toks": ["SELECT", "T3.Name", "FROM", "debate_people", "AS", "T1", "JOIN", "debate", "AS", "T2", "ON", "T1.Debate_ID", "=", "T2.Debate_ID", "JOIN", "people", "AS", "T3", "ON", "T1.Affirmative", "=", "T3.People_ID", "WHERE", "T2.Num_of_Audience", ">", "200"],
        "query_toks_no_value": ["select", "t3", ".", "name", "from", "debate_people", "as", "t1", "join", "debate", "as", "t2", "on", "t1", ".", "debate_id", "=", "t2", ".", "debate_id", "join", "people", "as", "t3", "on", "t1", ".", "affirmative", "=", "t3", ".", "people_id", "where", "t2", ".", "num_of_audience", ">", "value"],
        "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "question_toks": ["Show", "the", "names", "of", "people", "that", "are", "on", "affirmative", "side", "of", "debates", "with", "number", "of", "audience", "bigger", "than", "200", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 9, false], null], 200.0, null]]
        }
    }, {
        "db_id": "debate",
        "query": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "query_toks": ["SELECT", "T2.Name", ",", "COUNT", "(", "*", ")", "FROM", "debate_people", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Affirmative", "=", "T2.People_ID", "GROUP", "BY", "T2.Name"],
        "query_toks_no_value": ["select", "t2", ".", "name", ",", "count", "(", "*", ")", "from", "debate_people", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "affirmative", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "name"],
        "question": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "question_toks": ["Show", "the", "names", "of", "people", "and", "the", "number", "of", "times", "they", "have", "been", "on", "the", "affirmative", "side", "of", "debates", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 3, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "query_toks": ["SELECT", "T2.Name", "FROM", "debate_people", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.Negative", "=", "T2.People_ID", "GROUP", "BY", "T2.Name", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "debate_people", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "negative", "=", "t2", ".", "people_id", "group", "by", "t2", ".", "name", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "question_toks": ["Show", "the", "names", "of", "people", "who", "have", "been", "on", "the", "negative", "side", "of", "debates", "at", "least", "twice", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 12, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 3, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "debate",
        "query": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_id", "NOT", "IN", "(", "SELECT", "Affirmative", "FROM", "debate_people", ")"],
        "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "affirmative", "from", "debate_people", ")"],
        "question": "List the names of people that have not been on the affirmative side of debates.",
        "question_toks": ["List", "the", "names", "of", "people", "that", "have", "not", "been", "on", "the", "affirmative", "side", "of", "debates", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 1, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 11, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema EXCEPT SELECT LOCATION FROM cinema WHERE capacity  >  800",
        "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "EXCEPT", "SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "800"],
        "query_toks_no_value": ["select", "location", "from", "cinema", "except", "select", "location", "from", "cinema", "where", "capacity", ">", "value"],
        "question": "Show all the locations where no cinema has capacity over 800.",
        "question_toks": ["Show", "all", "the", "locations", "where", "no", "cinema", "has", "capacity", "over", "800", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 12, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 11, false], null], 800.0, null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year  =  2010 INTERSECT SELECT LOCATION FROM cinema WHERE openning_year  =  2011",
        "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", "=", "2010", "INTERSECT", "SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", "=", "2011"],
        "query_toks_no_value": ["select", "location", "from", "cinema", "where", "openning_year", "=", "value", "intersect", "select", "location", "from", "cinema", "where", "openning_year", "=", "value"],
        "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "question_toks": ["Show", "all", "the", "locations", "where", "some", "cinemas", "were", "opened", "in", "both", "year", "2010", "and", "year", "2011", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 12, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 10, false], null], 2011.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 10, false], null], 2010.0, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT count(*) FROM cinema",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "cinema"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cinema"],
        "question": "How many cinema do we have?",
        "question_toks": ["How", "many", "cinema", "do", "we", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT count(*) FROM cinema",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "cinema"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "cinema"],
        "question": "Count the number of cinemas.",
        "question_toks": ["Count", "the", "number", "of", "cinemas", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT name ,  openning_year ,  capacity FROM cinema",
        "query_toks": ["SELECT", "name", ",", "openning_year", ",", "capacity", "FROM", "cinema"],
        "query_toks_no_value": ["select", "name", ",", "openning_year", ",", "capacity", "from", "cinema"],
        "question": "Show name, opening year, and capacity for each cinema.",
        "question_toks": ["Show", "name", ",", "opening", "year", ",", "and", "capacity", "for", "each", "cinema", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT name ,  LOCATION FROM cinema WHERE capacity  >  (SELECT avg(capacity) FROM cinema)",
        "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "(", "SELECT", "avg", "(", "capacity", ")", "FROM", "cinema", ")"],
        "query_toks_no_value": ["select", "name", ",", "location", "from", "cinema", "where", "capacity", ">", "(", "select", "avg", "(", "capacity", ")", "from", "cinema", ")"],
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "question_toks": ["Show", "the", "cinema", "name", "and", "location", "for", "cinemas", "with", "capacity", "above", "average", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 11, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT DISTINCT LOCATION FROM cinema",
        "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "cinema"],
        "query_toks_no_value": ["select", "distinct", "location", "from", "cinema"],
        "question": "What are all the locations with a cinema?",
        "question_toks": ["What", "are", "all", "the", "locations", "with", "a", "cinema", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT DISTINCT LOCATION FROM cinema",
        "query_toks": ["SELECT", "DISTINCT", "LOCATION", "FROM", "cinema"],
        "query_toks_no_value": ["select", "distinct", "location", "from", "cinema"],
        "question": "Find the distinct locations that has a cinema.",
        "question_toks": ["Find", "the", "distinct", "locations", "that", "has", "a", "cinema", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT name ,  openning_year FROM cinema ORDER BY openning_year DESC",
        "query_toks": ["SELECT", "name", ",", "openning_year", "FROM", "cinema", "ORDER", "BY", "openning_year", "DESC"],
        "query_toks_no_value": ["select", "name", ",", "openning_year", "from", "cinema", "order", "by", "openning_year", "desc"],
        "question": "Show all the cinema names and opening years in descending order of opening year.",
        "question_toks": ["Show", "all", "the", "cinema", "names", "and", "opening", "years", "in", "descending", "order", "of", "opening", "year", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 10, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT name ,  LOCATION FROM cinema ORDER BY capacity DESC LIMIT 1",
        "query_toks": ["SELECT", "name", ",", "LOCATION", "FROM", "cinema", "ORDER", "BY", "capacity", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", ",", "location", "from", "cinema", "order", "by", "capacity", "desc", "limit", "value"],
        "question": "What are the name and location of the cinema with the largest capacity?",
        "question_toks": ["What", "are", "the", "name", "and", "location", "of", "the", "cinema", "with", "the", "largest", "capacity", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT avg(capacity) ,  min(capacity) ,  max(capacity) FROM cinema WHERE openning_year  >=  2011",
        "query_toks": ["SELECT", "avg", "(", "capacity", ")", ",", "min", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "FROM", "cinema", "WHERE", "openning_year", ">", "=", "2011"],
        "query_toks_no_value": ["select", "avg", "(", "capacity", ")", ",", "min", "(", "capacity", ")", ",", "max", "(", "capacity", ")", "from", "cinema", "where", "openning_year", ">", "=", "value"],
        "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
        "question_toks": ["Show", "the", "average", ",", "minimum", ",", "and", "maximum", "capacity", "for", "all", "the", "cinemas", "opened", "in", "year", "2011", "or", "later", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 11, false], null]], [2, [0, [0, 11, false], null]], [1, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 10, false], null], 2011.0, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT LOCATION ,  count(*) FROM cinema GROUP BY LOCATION",
        "query_toks": ["SELECT", "LOCATION", ",", "count", "(", "*", ")", "FROM", "cinema", "GROUP", "BY", "LOCATION"],
        "query_toks_no_value": ["select", "location", ",", "count", "(", "*", ")", "from", "cinema", "group", "by", "location"],
        "question": "Show each location and the number of cinemas there.",
        "question_toks": ["Show", "each", "location", "and", "the", "number", "of", "cinemas", "there", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE openning_year  >=  2010 GROUP BY LOCATION ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "openning_year", ">", "=", "2010", "GROUP", "BY", "LOCATION", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "location", "from", "cinema", "where", "openning_year", ">", "=", "value", "group", "by", "location", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the location with the most cinemas opened in year 2010 or later?",
        "question_toks": ["What", "is", "the", "location", "with", "the", "most", "cinemas", "opened", "in", "year", "2010", "or", "later", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 10, false], null], 2010.0, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "question_toks": ["Show", "all", "the", "locations", "with", "at", "least", "two", "cinemas", "with", "capacity", "above", "300", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 12, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 300.0, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Which locations have 2 or more cinemas with capacity over 300?",
        "question_toks": ["Which", "locations", "have", "2", "or", "more", "cinemas", "with", "capacity", "over", "300", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 12, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 300.0, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT title ,  directed_by FROM film",
        "query_toks": ["SELECT", "title", ",", "directed_by", "FROM", "film"],
        "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "film"],
        "question": "Show the title and director for all films.",
        "question_toks": ["Show", "the", "title", "and", "director", "for", "all", "films", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT title ,  directed_by FROM film",
        "query_toks": ["SELECT", "title", ",", "directed_by", "FROM", "film"],
        "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "film"],
        "question": "What are the title and director of each film?",
        "question_toks": ["What", "are", "the", "title", "and", "director", "of", "each", "film", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT DISTINCT directed_by FROM film",
        "query_toks": ["SELECT", "DISTINCT", "directed_by", "FROM", "film"],
        "query_toks_no_value": ["select", "distinct", "directed_by", "from", "film"],
        "question": "Show all directors.",
        "question_toks": ["Show", "all", "directors", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT DISTINCT directed_by FROM film",
        "query_toks": ["SELECT", "DISTINCT", "directed_by", "FROM", "film"],
        "query_toks_no_value": ["select", "distinct", "directed_by", "from", "film"],
        "question": "Who are all the directors?",
        "question_toks": ["Who", "are", "all", "the", "directors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT directed_by ,  count(*) FROM film GROUP BY directed_by",
        "query_toks": ["SELECT", "directed_by", ",", "count", "(", "*", ")", "FROM", "film", "GROUP", "BY", "directed_by"],
        "query_toks_no_value": ["select", "directed_by", ",", "count", "(", "*", ")", "from", "film", "group", "by", "directed_by"],
        "question": "List all directors along with the number of films directed by each director.",
        "question_toks": ["List", "all", "directors", "along", "with", "the", "number", "of", "films", "directed", "by", "each", "director", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT T2.name ,  sum(T1.show_times_per_day) FROM schedule AS T1 JOIN cinema AS T2 ON T1.cinema_id  =  T2.cinema_id GROUP BY T1.cinema_id",
        "query_toks": ["SELECT", "T2.name", ",", "sum", "(", "T1.show_times_per_day", ")", "FROM", "schedule", "AS", "T1", "JOIN", "cinema", "AS", "T2", "ON", "T1.cinema_id", "=", "T2.cinema_id", "GROUP", "BY", "T1.cinema_id"],
        "query_toks_no_value": ["select", "t2", ".", "name", ",", "sum", "(", "t1", ".", "show_times_per_day", ")", "from", "schedule", "as", "t1", "join", "cinema", "as", "t2", "on", "t1", ".", "cinema_id", "=", "t2", ".", "cinema_id", "group", "by", "t1", ".", "cinema_id"],
        "question": "What is total number of show times per dat for each cinema?",
        "question_toks": ["What", "is", "total", "number", "of", "show", "times", "per", "dat", "for", "each", "cinema", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 13, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [4, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
        "query_toks": ["SELECT", "T2.title", ",", "max", "(", "T1.price", ")", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id"],
        "query_toks_no_value": ["select", "t2", ".", "title", ",", "max", "(", "t1", ".", "price", ")", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id"],
        "question": "What are the title and maximum price of each film?",
        "question_toks": ["What", "are", "the", "title", "and", "maximum", "price", "of", "each", "film", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 14, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [1, [0, [0, 17, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT T2.title ,  max(T1.price) FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id",
        "query_toks": ["SELECT", "T2.title", ",", "max", "(", "T1.price", ")", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id"],
        "query_toks_no_value": ["select", "t2", ".", "title", ",", "max", "(", "t1", ".", "price", ")", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id"],
        "question": "Give me the title and highest price for each film.",
        "question_toks": ["Give", "me", "the", "title", "and", "highest", "price", "for", "each", "film", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 14, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [1, [0, [0, 17, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT T3.name ,  T2.title ,  T1.date ,  T1.price FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id JOIN cinema AS T3 ON T1.cinema_id  =  T3.cinema_id",
        "query_toks": ["SELECT", "T3.name", ",", "T2.title", ",", "T1.date", ",", "T1.price", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "JOIN", "cinema", "AS", "T3", "ON", "T1.cinema_id", "=", "T3.cinema_id"],
        "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "title", ",", "t1", ".", "date", ",", "t1", ".", "price", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "join", "cinema", "as", "t3", "on", "t1", ".", "cinema_id", "=", "t3", ".", "cinema_id"],
        "question": "Show cinema name, film title, date, and price for each record in schedule.",
        "question_toks": ["Show", "cinema", "name", ",", "film", "title", ",", "date", ",", "and", "price", "for", "each", "record", "in", "schedule", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 14, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 4, false], null]], [0, [0, [0, 15, false], null]], [0, [0, [0, 17, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT title ,  directed_by FROM film WHERE film_id NOT IN (SELECT film_id FROM schedule)",
        "query_toks": ["SELECT", "title", ",", "directed_by", "FROM", "film", "WHERE", "film_id", "NOT", "IN", "(", "SELECT", "film_id", "FROM", "schedule", ")"],
        "query_toks_no_value": ["select", "title", ",", "directed_by", "from", "film", "where", "film_id", "not", "in", "(", "select", "film_id", "from", "schedule", ")"],
        "question": "What are the title and director of the films without any schedule?",
        "question_toks": ["What", "are", "the", "title", "and", "director", "of", "the", "films", "without", "any", "schedule", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 1, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 14, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT T2.directed_by FROM schedule AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.directed_by ORDER BY sum(T1.show_times_per_day) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.directed_by", "FROM", "schedule", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T2.directed_by", "ORDER", "BY", "sum", "(", "T1.show_times_per_day", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "directed_by", "from", "schedule", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t2", ".", "directed_by", "order", "by", "sum", "(", "t1", ".", "show_times_per_day", ")", "desc", "limit", "value"],
        "question": "Show director with the largest number of show times in total.",
        "question_toks": ["Show", "director", "with", "the", "largest", "number", "of", "show", "times", "in", "total", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 14, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 16, false], null]]],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "question_toks": ["Find", "the", "locations", "that", "have", "more", "than", "one", "movie", "theater", "with", "capacity", "above", "300", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 12, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 300.0, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT LOCATION FROM cinema WHERE capacity  >  300 GROUP BY LOCATION HAVING count(*)  >  1",
        "query_toks": ["SELECT", "LOCATION", "FROM", "cinema", "WHERE", "capacity", ">", "300", "GROUP", "BY", "LOCATION", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "location", "from", "cinema", "where", "capacity", ">", "value", "group", "by", "location", "having", "count", "(", "*", ")", ">", "value"],
        "question": "In which locations are there more than one movie theater with capacity above 300?",
        "question_toks": ["In", "which", "locations", "are", "there", "more", "than", "one", "movie", "theater", "with", "capacity", "above", "300", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 12, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 300.0, null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film", "WHERE", "title", "LIKE", "``", "%", "Dummy", "%", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film", "where", "title", "like", "value"],
        "question": "How many films have the word 'Dummy' in their titles?",
        "question_toks": ["How", "many", "films", "have", "the", "word", "'Dummy", "'", "in", "their", "titles", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 4, false], null], "\"%Dummy%\"", null]]
        }
    }, {
        "db_id": "cinema",
        "query": "SELECT count(*) FROM film WHERE title LIKE \"%Dummy%\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "film", "WHERE", "title", "LIKE", "``", "%", "Dummy", "%", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "film", "where", "title", "like", "value"],
        "question": "Count the number of films whose title contains the word 'Dummy'.",
        "question_toks": ["Count", "the", "number", "of", "films", "whose", "title", "contains", "the", "word", "'Dummy", "'", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 4, false], null], "\"%Dummy%\"", null]]
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT count(*) FROM phone",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "phone"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "phone"],
        "question": "How many phones are there?",
        "question_toks": ["How", "many", "phones", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT Name FROM phone ORDER BY Price ASC",
        "query_toks": ["SELECT", "Name", "FROM", "phone", "ORDER", "BY", "Price", "ASC"],
        "query_toks_no_value": ["select", "name", "from", "phone", "order", "by", "price", "asc"],
        "question": "List the names of phones in ascending order of price.",
        "question_toks": ["List", "the", "names", "of", "phones", "in", "ascending", "order", "of", "price", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 5, false], null]]],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT Memory_in_G ,  Carrier FROM phone",
        "query_toks": ["SELECT", "Memory_in_G", ",", "Carrier", "FROM", "phone"],
        "query_toks_no_value": ["select", "memory_in_g", ",", "carrier", "from", "phone"],
        "question": "What are the memories and carriers of phones?",
        "question_toks": ["What", "are", "the", "memories", "and", "carriers", "of", "phones", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
        "query_toks": ["SELECT", "DISTINCT", "Carrier", "FROM", "phone", "WHERE", "Memory_in_G", ">", "32"],
        "query_toks_no_value": ["select", "distinct", "carrier", "from", "phone", "where", "memory_in_g", ">", "value"],
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "question_toks": ["List", "the", "distinct", "carriers", "of", "phones", "with", "memories", "bigger", "than", "32", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 3, false], null], 32.0, null]]
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT Name FROM phone WHERE Carrier  =  \"Sprint\" OR Carrier  =  \"TMobile\"",
        "query_toks": ["SELECT", "Name", "FROM", "phone", "WHERE", "Carrier", "=", "``", "Sprint", "''", "OR", "Carrier", "=", "``", "TMobile", "''"],
        "query_toks_no_value": ["select", "name", "from", "phone", "where", "carrier", "=", "value", "or", "carrier", "=", "value"],
        "question": "Show the names of phones with carrier either \"Sprint\" or \"TMobile\".",
        "question_toks": ["Show", "the", "names", "of", "phones", "with", "carrier", "either", "``", "Sprint", "''", "or", "``", "TMobile", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Sprint\"", null], "or", [false, 2, [0, [0, 4, false], null], "\"TMobile\"", null]]
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT Carrier FROM phone ORDER BY Price DESC LIMIT 1",
        "query_toks": ["SELECT", "Carrier", "FROM", "phone", "ORDER", "BY", "Price", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "carrier", "from", "phone", "order", "by", "price", "desc", "limit", "value"],
        "question": "What is the carrier of the most expensive phone?",
        "question_toks": ["What", "is", "the", "carrier", "of", "the", "most", "expensive", "phone", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 5, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT Carrier ,  COUNT(*) FROM phone GROUP BY Carrier",
        "query_toks": ["SELECT", "Carrier", ",", "COUNT", "(", "*", ")", "FROM", "phone", "GROUP", "BY", "Carrier"],
        "query_toks_no_value": ["select", "carrier", ",", "count", "(", "*", ")", "from", "phone", "group", "by", "carrier"],
        "question": "Show different carriers of phones together with the number of phones with each carrier.",
        "question_toks": ["Show", "different", "carriers", "of", "phones", "together", "with", "the", "number", "of", "phones", "with", "each", "carrier", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 4, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT Carrier FROM phone GROUP BY Carrier ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "Carrier", "FROM", "phone", "GROUP", "BY", "Carrier", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "carrier", "from", "phone", "group", "by", "carrier", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Show the most frequently used carrier of the phones.",
        "question_toks": ["Show", "the", "most", "frequently", "used", "carrier", "of", "the", "phones", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 4, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
        "query_toks": ["SELECT", "Carrier", "FROM", "phone", "WHERE", "Memory_in_G", "<", "32", "INTERSECT", "SELECT", "Carrier", "FROM", "phone", "WHERE", "Memory_in_G", ">", "64"],
        "query_toks_no_value": ["select", "carrier", "from", "phone", "where", "memory_in_g", "<", "value", "intersect", "select", "carrier", "from", "phone", "where", "memory_in_g", ">", "value"],
        "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "question_toks": ["Show", "the", "carriers", "that", "have", "both", "phones", "with", "memory", "smaller", "than", "32", "and", "phones", "with", "memory", "bigger", "than", "64", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 4, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 3, false], null], 64.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 3, false], null], 32.0, null]]
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID",
        "query_toks": ["SELECT", "T3.Name", ",", "T2.District", "FROM", "phone_market", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "JOIN", "phone", "AS", "T3", "ON", "T1.Phone_ID", "=", "T3.Phone_ID"],
        "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "district", "from", "phone_market", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "join", "phone", "as", "t3", "on", "t1", ".", "phone_id", "=", "t3", ".", "phone_id"],
        "question": "Show the names of phones and the districts of markets they are on.",
        "question_toks": ["Show", "the", "names", "of", "phones", "and", "the", "districts", "of", "markets", "they", "are", "on", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT T3.Name ,  T2.District FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID ORDER BY T2.Ranking",
        "query_toks": ["SELECT", "T3.Name", ",", "T2.District", "FROM", "phone_market", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "JOIN", "phone", "AS", "T3", "ON", "T1.Phone_ID", "=", "T3.Phone_ID", "ORDER", "BY", "T2.Ranking"],
        "query_toks_no_value": ["select", "t3", ".", "name", ",", "t2", ".", "district", "from", "phone_market", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "join", "phone", "as", "t3", "on", "t1", ".", "phone_id", "=", "t3", ".", "phone_id", "order", "by", "t2", ".", "ranking"],
        "question": "Show the names of phones and the districts of markets they are on, in ascending order of the ranking of the market.",
        "question_toks": ["Show", "the", "names", "of", "phones", "and", "the", "districts", "of", "markets", "they", "are", "on", ",", "in", "ascending", "order", "of", "the", "ranking", "of", "the", "market", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 10, false], null]]],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT T3.Name FROM phone_market AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID JOIN phone AS T3 ON T1.Phone_ID  =  T3.Phone_ID WHERE T2.Num_of_shops  >  50",
        "query_toks": ["SELECT", "T3.Name", "FROM", "phone_market", "AS", "T1", "JOIN", "market", "AS", "T2", "ON", "T1.Market_ID", "=", "T2.Market_ID", "JOIN", "phone", "AS", "T3", "ON", "T1.Phone_ID", "=", "T3.Phone_ID", "WHERE", "T2.Num_of_shops", ">", "50"],
        "query_toks_no_value": ["select", "t3", ".", "name", "from", "phone_market", "as", "t1", "join", "market", "as", "t2", "on", "t1", ".", "market_id", "=", "t2", ".", "market_id", "join", "phone", "as", "t3", "on", "t1", ".", "phone_id", "=", "t3", ".", "phone_id", "where", "t2", ".", "num_of_shops", ">", "value"],
        "question": "Show the names of phones that are on market with number of shops greater than 50.",
        "question_toks": ["Show", "the", "names", "of", "phones", "that", "are", "on", "market", "with", "number", "of", "shops", "greater", "than", "50", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 9, false], null], 50.0, null]]
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT T2.Name ,  sum(T1.Num_of_stock) FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name",
        "query_toks": ["SELECT", "T2.Name", ",", "sum", "(", "T1.Num_of_stock", ")", "FROM", "phone_market", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Phone_ID", "=", "T2.Phone_ID", "GROUP", "BY", "T2.Name"],
        "query_toks_no_value": ["select", "t2", ".", "name", ",", "sum", "(", "t1", ".", "num_of_stock", ")", "from", "phone_market", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "phone_id", "=", "t2", ".", "phone_id", "group", "by", "t2", ".", "name"],
        "question": "For each phone, show its names and total number of stocks.",
        "question_toks": ["For", "each", "phone", ",", "show", "its", "names", "and", "total", "number", "of", "stocks", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 12, false], null], [0, 2, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]], [4, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "query_toks": ["SELECT", "T2.Name", "FROM", "phone_market", "AS", "T1", "JOIN", "phone", "AS", "T2", "ON", "T1.Phone_ID", "=", "T2.Phone_ID", "GROUP", "BY", "T2.Name", "HAVING", "sum", "(", "T1.Num_of_stock", ")", ">", "=", "2000", "ORDER", "BY", "sum", "(", "T1.Num_of_stock", ")", "DESC"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "phone_market", "as", "t1", "join", "phone", "as", "t2", "on", "t1", ".", "phone_id", "=", "t2", ".", "phone_id", "group", "by", "t2", ".", "name", "having", "sum", "(", "t1", ".", "num_of_stock", ")", ">", "=", "value", "order", "by", "sum", "(", "t1", ".", "num_of_stock", ")", "desc"],
        "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "question_toks": ["Show", "the", "names", "of", "phones", "that", "have", "total", "number", "of", "stocks", "bigger", "than", "2000", ",", "in", "descending", "order", "of", "the", "total", "number", "of", "stocks", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 12, false], null], [0, 2, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 5, [0, [4, 13, false], null], 2000.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "phone_market",
        "query": "SELECT Name FROM phone WHERE Phone_id NOT IN (SELECT Phone_ID FROM phone_market)",
        "query_toks": ["SELECT", "Name", "FROM", "phone", "WHERE", "Phone_id", "NOT", "IN", "(", "SELECT", "Phone_ID", "FROM", "phone_market", ")"],
        "query_toks_no_value": ["select", "name", "from", "phone", "where", "phone_id", "not", "in", "(", "select", "phone_id", "from", "phone_market", ")"],
        "question": "List the names of phones that are not on any market.",
        "question_toks": ["List", "the", "names", "of", "phones", "that", "are", "not", "on", "any", "market", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 2, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 12, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "query_toks": ["SELECT", "name", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", "from", "races", "order", "by", "date", "desc", "limit", "value"],
        "question": "What is the name of the race held most recently?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "race", "held", "most", "recently", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 15, false], null]]],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "query_toks": ["SELECT", "name", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", "from", "races", "order", "by", "date", "desc", "limit", "value"],
        "question": "What is the name of the race that occurred most recently?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "race", "that", "occurred", "most", "recently", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 15, false], null]]],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "query_toks": ["SELECT", "name", ",", "date", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", ",", "date", "from", "races", "order", "by", "date", "desc", "limit", "value"],
        "question": "What is the name and date of the most recent race?",
        "question_toks": ["What", "is", "the", "name", "and", "date", "of", "the", "most", "recent", "race", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 15, false], null]]],
            "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "query_toks": ["SELECT", "name", ",", "date", "FROM", "races", "ORDER", "BY", "date", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", ",", "date", "from", "races", "order", "by", "date", "desc", "limit", "value"],
        "question": "What is the name and date of the race that occurred most recently?",
        "question_toks": ["What", "is", "the", "name", "and", "date", "of", "the", "race", "that", "occurred", "most", "recently", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 15, false], null]]],
            "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE YEAR = 2017",
        "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "=", "2017"],
        "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "=", "value"],
        "question": "Find the names of all races held in 2017.",
        "question_toks": ["Find", "the", "names", "of", "all", "races", "held", "in", "2017", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], 2017.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE YEAR = 2017",
        "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "=", "2017"],
        "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "=", "value"],
        "question": "What are the names of all the races that occurred in the year 2017?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "the", "races", "that", "occurred", "in", "the", "year", "2017", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], 2017.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2014", "AND", "2017"],
        "query_toks_no_value": ["select", "distinct", "name", "from", "races", "where", "year", "between", "value", "and", "value"],
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "question_toks": ["Find", "the", "distinct", "names", "of", "all", "races", "held", "between", "2014", "and", "2017", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 1, [0, [0, 11, false], null], 2014.0, 2017.0]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2014", "AND", "2017"],
        "query_toks_no_value": ["select", "distinct", "name", "from", "races", "where", "year", "between", "value", "and", "value"],
        "question": "What are the unique names of all race held between 2014 and 2017?",
        "question_toks": ["What", "are", "the", "unique", "names", "of", "all", "race", "held", "between", "2014", "and", "2017", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 1, [0, [0, 11, false], null], 2014.0, 2017.0]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "query_toks": ["SELECT", "DISTINCT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", "<", "93000"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", "<", "value"],
        "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "question_toks": ["List", "the", "forename", "and", "surname", "of", "all", "distinct", "drivers", "who", "once", "had", "laptime", "less", "than", "93000", "milliseconds", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 94, false], null], 93000.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "query_toks": ["SELECT", "DISTINCT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", "<", "93000"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", "<", "value"],
        "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
        "question_toks": ["What", "are", "the", "forenames", "and", "surnames", "of", "all", "unique", "drivers", "who", "had", "a", "lap", "time", "of", "less", "than", "93000", "milliseconds", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 94, false], null], 93000.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "query_toks": ["SELECT", "DISTINCT", "T1.driverid", ",", "T1.nationality", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", ">", "100000"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "driverid", ",", "t1", ".", "nationality", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", ">", "value"],
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "question_toks": ["Find", "all", "the", "distinct", "id", "and", "nationality", "of", "drivers", "who", "have", "had", "laptime", "more", "than", "100000", "milliseconds", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 18, false], null]], [0, [0, [0, 25, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 94, false], null], 100000.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "query_toks": ["SELECT", "DISTINCT", "T1.driverid", ",", "T1.nationality", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.milliseconds", ">", "100000"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "driverid", ",", "t1", ".", "nationality", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "milliseconds", ">", "value"],
        "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
        "question_toks": ["What", "are", "the", "different", "driver", "ids", "and", "nationalities", "of", "all", "drivers", "who", "had", "a", "laptime", "of", "more", "than", "100000", "milliseconds", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 18, false], null]], [0, [0, [0, 25, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 94, false], null], 100000.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "limit", "value"],
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "question_toks": ["What", "are", "the", "forename", "and", "surname", "of", "the", "driver", "who", "has", "the", "smallest", "laptime", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 94, false], null]]],
            "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "limit", "value"],
        "question": "What is the forename and surname of the driver with the shortest laptime?",
        "question_toks": ["What", "is", "the", "forename", "and", "surname", "of", "the", "driver", "with", "the", "shortest", "laptime", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 94, false], null]]],
            "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "desc", "limit", "value"],
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "question_toks": ["What", "is", "the", "id", "and", "family", "name", "of", "the", "driver", "who", "has", "the", "longest", "laptime", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 94, false], null]]],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "ORDER", "BY", "T2.milliseconds", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "order", "by", "t2", ".", "milliseconds", "desc", "limit", "value"],
        "question": "What is the id and last name of the driver with the longest laptime?",
        "question_toks": ["What", "is", "the", "id", "and", "last", "name", "of", "the", "driver", "with", "the", "longest", "laptime", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 94, false], null]]],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "POSITION", "=", "'1", "'", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "position", "=", "value", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What is the id, forname and surname of the driver who had the first position in terms of laptime at least twice?",
        "question_toks": ["What", "is", "the", "id", ",", "forname", "and", "surname", "of", "the", "driver", "who", "had", "the", "first", "position", "in", "terms", "of", "laptime", "at", "least", "twice", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 92, false], null], "\"1\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE POSITION  =  '1' GROUP BY T1.driverid HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "laptimes", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "POSITION", "=", "'1", "'", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "laptimes", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "position", "=", "value", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What is the id, first name, and last name of the driver who was in the first position for laptime at least twice?",
        "question_toks": ["What", "is", "the", "id", ",", "first", "name", ",", "and", "last", "name", "of", "the", "driver", "who", "was", "in", "the", "first", "position", "for", "laptime", "at", "least", "twice", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 90, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 12]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 92, false], null], "\"1\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T2.name", "=", "``", "Australian", "Grand", "Prix", "''", "AND", "YEAR", "=", "2009"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t2", ".", "name", "=", "value", "and", "year", "=", "value"],
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "question_toks": ["How", "many", "drivers", "participated", "in", "the", "race", "Australian", "Grand", "Prix", "held", "in", "2009", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 44, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], "\"Australian Grand Prix\"", null], "and", [false, 2, [0, [0, 11, false], null], 2009.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T2.name", "=", "``", "Australian", "Grand", "Prix", "''", "AND", "YEAR", "=", "2009"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t2", ".", "name", "=", "value", "and", "year", "=", "value"],
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "question_toks": ["How", "many", "drivers", "were", "in", "the", "Australian", "Grand", "Prix", "held", "in", "2009", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 44, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], "\"Australian Grand Prix\"", null], "and", [false, 2, [0, [0, 11, false], null], 2009.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "driverId", ")", "FROM", "results", "WHERE", "raceId", "NOT", "IN", "(", "SELECT", "raceId", "FROM", "races", "WHERE", "YEAR", "!", "=", "2009", ")"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "driverid", ")", "from", "results", "where", "raceid", "not", "in", "(", "select", "raceid", "from", "races", "where", "year", "!", "=", "value", ")"],
        "question": "How many drivers did not participate in the races held in 2009?",
        "question_toks": ["How", "many", "drivers", "did", "not", "participate", "in", "the", "races", "held", "in", "2009", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 45, true], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 44, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 10, false], null]]]],
                        "union": null,
                        "where": [[false, 7, [0, [0, 11, false], null], 2009.0, null]]
                    }, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "driverId", ")", "FROM", "results", "WHERE", "raceId", "NOT", "IN", "(", "SELECT", "raceId", "FROM", "races", "WHERE", "YEAR", "!", "=", "2009", ")"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "driverid", ")", "from", "results", "where", "raceid", "not", "in", "(", "select", "raceid", "from", "races", "where", "year", "!", "=", "value", ")"],
        "question": "How many drivers did not race in 2009?",
        "question_toks": ["How", "many", "drivers", "did", "not", "race", "in", "2009", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 45, true], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 44, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 10, false], null]]]],
                        "union": null,
                        "where": [[false, 7, [0, [0, 11, false], null], 2009.0, null]]
                    }, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "query_toks": ["SELECT", "T2.name", ",", "T2.year", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T1.driverid", "=", "T3.driverid", "WHERE", "T3.forename", "=", "``", "Lewis", "''"],
        "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "year", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t1", ".", "driverid", "=", "t3", ".", "driverid", "where", "t3", ".", "forename", "=", "value"],
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "question_toks": ["Give", "me", "a", "list", "of", "names", "and", "years", "of", "races", "that", "had", "any", "driver", "whose", "forename", "is", "Lewis", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 44, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], "\"Lewis\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "query_toks": ["SELECT", "T2.name", ",", "T2.year", "FROM", "results", "AS", "T1", "JOIN", "races", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T1.driverid", "=", "T3.driverid", "WHERE", "T3.forename", "=", "``", "Lewis", "''"],
        "query_toks_no_value": ["select", "t2", ".", "name", ",", "t2", ".", "year", "from", "results", "as", "t1", "join", "races", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t1", ".", "driverid", "=", "t3", ".", "driverid", "where", "t3", ".", "forename", "=", "value"],
        "question": "What are the names and years of all races that had a driver with the last name Lewis?",
        "question_toks": ["What", "are", "the", "names", "and", "years", "of", "all", "races", "that", "had", "a", "driver", "with", "the", "last", "name", "Lewis", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 44, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], "\"Lewis\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "query_toks": ["SELECT", "forename", ",", "surname", "FROM", "drivers", "WHERE", "nationality", "=", "``", "German", "''"],
        "query_toks_no_value": ["select", "forename", ",", "surname", "from", "drivers", "where", "nationality", "=", "value"],
        "question": "Find the forename and surname of drivers whose nationality is German?",
        "question_toks": ["Find", "the", "forename", "and", "surname", "of", "drivers", "whose", "nationality", "is", "German", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 25, false], null], "\"German\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "query_toks": ["SELECT", "forename", ",", "surname", "FROM", "drivers", "WHERE", "nationality", "=", "``", "German", "''"],
        "query_toks_no_value": ["select", "forename", ",", "surname", "from", "drivers", "where", "nationality", "=", "value"],
        "question": "What is the first and last name of all the German drivers?",
        "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "all", "the", "German", "drivers", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 25, false], null], "\"German\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "query_toks": ["SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "INTERSECT", "SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"],
        "query_toks_no_value": ["select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"],
        "question": "Find the id and forenames of drivers who participated both the races with name Australian Grand Prix and the races with name Chinese Grand Prix?",
        "question_toks": ["Find", "the", "id", "and", "forenames", "of", "drivers", "who", "participated", "both", "the", "races", "with", "name", "Australian", "Grand", "Prix", "and", "the", "races", "with", "name", "Chinese", "Grand", "Prix", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 7]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 45, false], null]], [0, [0, [0, 22, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 14, false], null], "\"Chinese Grand Prix\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 45, false], null]], [0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], "\"Australian Grand Prix\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Australian Grand Prix\" INTERSECT SELECT T2.driverid ,  T3.forename FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid  =  T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "query_toks": ["SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "INTERSECT", "SELECT", "T2.driverid", ",", "T3.forename", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"],
        "query_toks_no_value": ["select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "intersect", "select", "t2", ".", "driverid", ",", "t3", ".", "forename", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"],
        "question": "What is the id and first name of all the drivers who participated in the Australian Grand Prix and the Chinese Grand Prix?",
        "question_toks": ["What", "is", "the", "id", "and", "first", "name", "of", "all", "the", "drivers", "who", "participated", "in", "the", "Australian", "Grand", "Prix", "and", "the", "Chinese", "Grand", "Prix", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 7]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 45, false], null]], [0, [0, [0, 22, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 14, false], null], "\"Chinese Grand Prix\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 45, false], null]], [0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], "\"Australian Grand Prix\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "query_toks": ["SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "EXCEPT", "SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"],
        "query_toks_no_value": ["select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "except", "select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"],
        "question": "What are the forenames and surnames of drivers who participated in the races named Australian Grand Prix but not the races named Chinese Grand Prix?",
        "question_toks": ["What", "are", "the", "forenames", "and", "surnames", "of", "drivers", "who", "participated", "in", "the", "races", "named", "Australian", "Grand", "Prix", "but", "not", "the", "races", "named", "Chinese", "Grand", "Prix", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 7]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 14, false], null], "\"Chinese Grand Prix\"", null]]
            },
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], "\"Australian Grand Prix\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "query_toks": ["SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Australian", "Grand", "Prix", "''", "EXCEPT", "SELECT", "T3.forename", ",", "T3.surname", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "JOIN", "drivers", "AS", "T3", "ON", "T2.driverid", "=", "T3.driverid", "WHERE", "T1.name", "=", "``", "Chinese", "Grand", "Prix", "''"],
        "query_toks_no_value": ["select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value", "except", "select", "t3", ".", "forename", ",", "t3", ".", "surname", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "join", "drivers", "as", "t3", "on", "t2", ".", "driverid", "=", "t3", ".", "driverid", "where", "t1", ".", "name", "=", "value"],
        "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?",
        "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "drivers", "who", "participated", "in", "the", "Australian", "Grand", "Prix", "but", "not", "the", "Chinese", "Grand", "Prix", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 7]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 14, false], null], "\"Chinese Grand Prix\"", null]]
            },
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], "\"Australian Grand Prix\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value"],
        "question": "Find all the forenames of distinct drivers who was in position 1 as standing and won?",
        "question_toks": ["Find", "all", "the", "forenames", "of", "distinct", "drivers", "who", "was", "in", "position", "1", "as", "standing", "and", "won", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 63, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 8]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 65, false], null], 1.0, null], "and", [false, 2, [0, [0, 67, false], null], 1.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value"],
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "question_toks": ["What", "are", "all", "the", "different", "first", "names", "of", "the", "drivers", "who", "are", "in", "position", "as", "standing", "and", "won", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 63, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 8]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 65, false], null], 1.0, null], "and", [false, 2, [0, [0, 67, false], null], 1.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1", "AND", "T2.points", ">", "20"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value", "and", "t2", ".", "points", ">", "value"],
        "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
        "question_toks": ["Find", "all", "the", "forenames", "of", "distinct", "drivers", "who", "won", "in", "position", "1", "as", "driver", "standing", "and", "had", "more", "than", "20", "points", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 63, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 8]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 65, false], null], 1.0, null], "and", [false, 2, [0, [0, 67, false], null], 1.0, null], "and", [false, 3, [0, [0, 64, false], null], 20.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "query_toks": ["SELECT", "DISTINCT", "T1.forename", "FROM", "drivers", "AS", "T1", "JOIN", "driverstandings", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "WHERE", "T2.position", "=", "1", "AND", "T2.wins", "=", "1", "AND", "T2.points", ">", "20"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "forename", "from", "drivers", "as", "t1", "join", "driverstandings", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "where", "t2", ".", "position", "=", "value", "and", "t2", ".", "wins", "=", "value", "and", "t2", ".", "points", ">", "value"],
        "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "the", "different", "drivers", "who", "won", "in", "position", "1", "as", "driver", "standing", "and", "had", "more", "than", "20", "points", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 63, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 8]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 65, false], null], 1.0, null], "and", [false, 2, [0, [0, 67, false], null], 1.0, null], "and", [false, 3, [0, [0, 64, false], null], 20.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "nationality", "FROM", "constructors", "GROUP", "BY", "nationality"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "nationality", "from", "constructors", "group", "by", "nationality"],
        "question": "What are the numbers of constructors for different nationalities?",
        "question_toks": ["What", "are", "the", "numbers", "of", "constructors", "for", "different", "nationalities", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [[0, 34, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "nationality", "FROM", "constructors", "GROUP", "BY", "nationality"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "nationality", "from", "constructors", "group", "by", "nationality"],
        "question": "For each nationality, how many different constructors are there?",
        "question_toks": ["For", "each", "nationality", ",", "how", "many", "different", "constructors", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [[0, 34, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "constructorid", "FROM", "constructorStandings", "GROUP", "BY", "constructorid"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "constructorid", "from", "constructorstandings", "group", "by", "constructorid"],
        "question": "What are the numbers of races for each constructor id?",
        "question_toks": ["What", "are", "the", "numbers", "of", "races", "for", "each", "constructor", "id", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [[0, 38, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 38, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "constructorid", "FROM", "constructorStandings", "GROUP", "BY", "constructorid"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "constructorid", "from", "constructorstandings", "group", "by", "constructorid"],
        "question": "For each constructor id, how many races are there?",
        "question_toks": ["For", "each", "constructor", "id", ",", "how", "many", "races", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [[0, 38, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 38, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "query_toks": ["SELECT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2017"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"],
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "question_toks": ["What", "are", "the", "names", "of", "races", "that", "were", "held", "after", "2017", "and", "the", "circuits", "were", "in", "the", "country", "of", "Spain", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 13, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Spain\"", null], "and", [false, 3, [0, [0, 11, false], null], 2017.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "query_toks": ["SELECT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2017"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"],
        "question": "What are the names of the races held after 2017 in Spain?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "races", "held", "after", "2017", "in", "Spain", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 13, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Spain\"", null], "and", [false, 3, [0, [0, 11, false], null], 2017.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2000"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"],
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "question_toks": ["What", "are", "the", "unique", "names", "of", "races", "that", "held", "after", "2000", "and", "the", "circuits", "were", "in", "Spain", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 13, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Spain\"", null], "and", [false, 3, [0, [0, 11, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "query_toks": ["SELECT", "DISTINCT", "T1.name", "FROM", "races", "AS", "T1", "JOIN", "circuits", "AS", "T2", "ON", "T1.circuitid", "=", "T2.circuitid", "WHERE", "T2.country", "=", "``", "Spain", "''", "AND", "T1.year", ">", "2000"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "name", "from", "races", "as", "t1", "join", "circuits", "as", "t2", "on", "t1", ".", "circuitid", "=", "t2", ".", "circuitid", "where", "t2", ".", "country", "=", "value", "and", "t1", ".", "year", ">", "value"],
        "question": "What are the names of all races held after 2000 in Spain?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "races", "held", "after", "2000", "in", "Spain", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 13, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Spain\"", null], "and", [false, 3, [0, [0, 11, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",
        "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", "<", "(", "SELECT", "max", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"],
        "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", "<", "(", "select", "max", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"],
        "question": "Find the distinct driver id and the stop number of all drivers that have a shorter pit stop duration than some drivers in the race with id 841.",
        "question_toks": ["Find", "the", "distinct", "driver", "id", "and", "the", "stop", "number", "of", "all", "drivers", "that", "have", "a", "shorter", "pit", "stop", "duration", "than", "some", "drivers", "in", "the", "race", "with", "id", "841", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 11]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 83, false], null]], [0, [0, [0, 84, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 87, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 11]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 87, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 82, false], null], 841.0, null]]
                    }, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  <  (SELECT max(duration) FROM pitstops WHERE raceid  =  841)",
        "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", "<", "(", "SELECT", "max", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"],
        "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", "<", "(", "select", "max", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"],
        "question": "What is the id and stop number for each driver that has a shorter pit stop than the driver in the race with id 841?",
        "question_toks": ["What", "is", "the", "id", "and", "stop", "number", "for", "each", "driver", "that", "has", "a", "shorter", "pit", "stop", "than", "the", "driver", "in", "the", "race", "with", "id", "841", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 11]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 83, false], null]], [0, [0, [0, 84, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 87, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 11]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 87, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 82, false], null], 841.0, null]]
                    }, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)",
        "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", ">", "(", "SELECT", "min", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"],
        "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", ">", "(", "select", "min", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"],
        "question": "Find the distinct driver id of all drivers that have a longer stop duration than some drivers in the race whose id is 841?",
        "question_toks": ["Find", "the", "distinct", "driver", "id", "of", "all", "drivers", "that", "have", "a", "longer", "stop", "duration", "than", "some", "drivers", "in", "the", "race", "whose", "id", "is", "841", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 11]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 83, false], null]], [0, [0, [0, 84, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 87, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 11]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[2, [0, [0, 87, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 82, false], null], 841.0, null]]
                    }, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT driverid ,  STOP FROM pitstops WHERE duration  >  (SELECT min(duration) FROM pitstops WHERE raceid  =  841)",
        "query_toks": ["SELECT", "DISTINCT", "driverid", ",", "STOP", "FROM", "pitstops", "WHERE", "duration", ">", "(", "SELECT", "min", "(", "duration", ")", "FROM", "pitstops", "WHERE", "raceid", "=", "841", ")"],
        "query_toks_no_value": ["select", "distinct", "driverid", ",", "stop", "from", "pitstops", "where", "duration", ">", "(", "select", "min", "(", "duration", ")", "from", "pitstops", "where", "raceid", "=", "value", ")"],
        "question": "What are the different ids and stop durations of all the drivers whose stop lasted longer than the driver in the race with the id 841?",
        "question_toks": ["What", "are", "the", "different", "ids", "and", "stop", "durations", "of", "all", "the", "drivers", "whose", "stop", "lasted", "longer", "than", "the", "driver", "in", "the", "race", "with", "the", "id", "841", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 11]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 83, false], null]], [0, [0, [0, 84, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 87, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 11]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[2, [0, [0, 87, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 82, false], null], 841.0, null]]
                    }, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "query_toks": ["SELECT", "DISTINCT", "forename", "FROM", "drivers", "ORDER", "BY", "forename", "ASC"],
        "query_toks_no_value": ["select", "distinct", "forename", "from", "drivers", "order", "by", "forename", "asc"],
        "question": "List the forenames of all distinct drivers in alphabetical order?",
        "question_toks": ["List", "the", "forenames", "of", "all", "distinct", "drivers", "in", "alphabetical", "order", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 22, false], null]]],
            "select": [true, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "query_toks": ["SELECT", "DISTINCT", "forename", "FROM", "drivers", "ORDER", "BY", "forename", "ASC"],
        "query_toks_no_value": ["select", "distinct", "forename", "from", "drivers", "order", "by", "forename", "asc"],
        "question": "What are the first names of all the different drivers in alphabetical order?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "the", "different", "drivers", "in", "alphabetical", "order", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 22, false], null]]],
            "select": [true, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "ORDER", "BY", "name", "DESC"],
        "query_toks_no_value": ["select", "distinct", "name", "from", "races", "order", "by", "name", "desc"],
        "question": "List the names of all distinct races in reversed  lexicographic order?",
        "question_toks": ["List", "the", "names", "of", "all", "distinct", "races", "in", "reversed", "lexicographic", "order", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 14, false], null]]],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "query_toks": ["SELECT", "DISTINCT", "name", "FROM", "races", "ORDER", "BY", "name", "DESC"],
        "query_toks_no_value": ["select", "distinct", "name", "from", "races", "order", "by", "name", "desc"],
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "question_toks": ["What", "are", "the", "different", "names", "of", "all", "the", "races", "in", "reverse", "alphabetical", "order", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 14, false], null]]],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2009", "AND", "2011"],
        "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "between", "value", "and", "value"],
        "question": "What are the names of races held between 2009 and 2011?",
        "question_toks": ["What", "are", "the", "names", "of", "races", "held", "between", "2009", "and", "2011", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 1, [0, [0, 11, false], null], 2009.0, 2011.0]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "YEAR", "BETWEEN", "2009", "AND", "2011"],
        "query_toks_no_value": ["select", "name", "from", "races", "where", "year", "between", "value", "and", "value"],
        "question": "What are the names of all races held between 2009 and 2011?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "races", "held", "between", "2009", "and", "2011", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 1, [0, [0, 11, false], null], 2009.0, 2011.0]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "TIME", ">", "``", "12:00:00", "''", "OR", "TIME", "<", "``", "09:00:00", "''"],
        "query_toks_no_value": ["select", "name", "from", "races", "where", "time", ">", "value", "or", "time", "<", "value"],
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "question_toks": ["What", "are", "the", "names", "of", "races", "held", "after", "12:00:00", "or", "before", "09:00:00", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 16, false], null], "\"12:00:00\"", null], "or", [false, 4, [0, [0, 16, false], null], "\"09:00:00\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "query_toks": ["SELECT", "name", "FROM", "races", "WHERE", "TIME", ">", "``", "12:00:00", "''", "OR", "TIME", "<", "``", "09:00:00", "''"],
        "query_toks_no_value": ["select", "name", "from", "races", "where", "time", ">", "value", "or", "time", "<", "value"],
        "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "races", "that", "occurred", "after", "12:00:00", "or", "before", "09:00:00", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 16, false], null], "\"12:00:00\"", null], "or", [false, 4, [0, [0, 16, false], null], "\"09:00:00\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "8", "UNION", "SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"],
        "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"],
        "question": "What are the drivers' first, last names and id who had more than 8 pit stops or participated in more than 5 race results?",
        "question_toks": ["What", "are", "the", "drivers", "'", "first", ",", "last", "names", "and", "id", "who", "had", "more", "than", "8", "pit", "stops", "or", "participated", "in", "more", "than", "5", "race", "results", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 11]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 8.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]], [0, [0, [0, 18, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                    "table_units": [["table_unit", 2], ["table_unit", 7]]
                },
                "groupBy": [[0, 18, false]],
                "having": [[false, 3, [0, [3, 0, false], null], 5.0, null]],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]], [0, [0, [0, 18, false], null]]]],
                "union": null,
                "where": []
            },
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  8 UNION SELECT T1.forename ,  T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "query_toks": ["SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "8", "UNION", "SELECT", "T1.forename", ",", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"],
        "query_toks_no_value": ["select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value", "union", "select", "t1", ".", "forename", ",", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"],
        "question": "What are the drivers' first names,last names, and ids for all those that had more than 8 stops or participated in more than 5 races?",
        "question_toks": ["What", "are", "the", "drivers", "'", "first", "names", ",", "last", "names", ",", "and", "ids", "for", "all", "those", "that", "had", "more", "than", "8", "stops", "or", "participated", "in", "more", "than", "5", "races", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 11]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 8.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]], [0, [0, [0, 18, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                    "table_units": [["table_unit", 2], ["table_unit", 7]]
                },
                "groupBy": [[0, 18, false]],
                "having": [[false, 3, [0, [3, 0, false], null], 5.0, null]],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 22, false], null]], [0, [0, [0, 23, false], null]], [0, [0, [0, 18, false], null]]]],
                "union": null,
                "where": []
            },
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "query_toks": ["SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "=", "11", "INTERSECT", "SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"],
        "query_toks_no_value": ["select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "=", "value", "intersect", "select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"],
        "question": "What are the drivers' last names and id who had 11 pit stops and participated in more than 5 race results?",
        "question_toks": ["What", "are", "the", "drivers", "'", "last", "names", "and", "id", "who", "had", "11", "pit", "stops", "and", "participated", "in", "more", "than", "5", "race", "results", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 11]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 2, [0, [3, 0, false], null], 11.0, null]],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                    "table_units": [["table_unit", 2], ["table_unit", 7]]
                },
                "groupBy": [[0, 18, false]],
                "having": [[false, 3, [0, [3, 0, false], null], 5.0, null]],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 23, false], null]], [0, [0, [0, 18, false], null]]]],
                "union": null,
                "where": []
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 23, false], null]], [0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "query_toks": ["SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "pitstops", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "=", "11", "INTERSECT", "SELECT", "T1.surname", ",", "T1.driverid", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "5"],
        "query_toks_no_value": ["select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "pitstops", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "=", "value", "intersect", "select", "t1", ".", "surname", ",", "t1", ".", "driverid", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "value"],
        "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
        "question_toks": ["What", "are", "the", "last", "names", "and", "ids", "of", "all", "drivers", "who", "had", "11", "pit", "stops", "and", "participated", "in", "more", "than", "5", "races", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 11]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 2, [0, [3, 0, false], null], 11.0, null]],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                    "table_units": [["table_unit", 2], ["table_unit", 7]]
                },
                "groupBy": [[0, 18, false]],
                "having": [[false, 3, [0, [3, 0, false], null], 5.0, null]],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 23, false], null]], [0, [0, [0, 18, false], null]]]],
                "union": null,
                "where": []
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 23, false], null]], [0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "WHERE", "T3.year", ">", "2010", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "where", "t3", ".", "year", ">", "value", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the id and last name of the driver who participated in the most races after 2010?",
        "question_toks": ["What", "is", "the", "id", "and", "last", "name", "of", "the", "driver", "who", "participated", "in", "the", "most", "races", "after", "2010", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 7]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 2010.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid WHERE T3.year > 2010 GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "WHERE", "T3.year", ">", "2010", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "where", "t3", ".", "year", ">", "value", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the id and last name of the driver who participated in the most races after 2010?",
        "question_toks": ["What", "is", "the", "id", "and", "last", "name", "of", "the", "driver", "who", "participated", "in", "the", "most", "races", "after", "2010", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 7]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 2010.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
        "query_toks": ["SELECT", "name", "FROM", "circuits", "WHERE", "country", "=", "``", "UK", "''", "OR", "country", "=", "``", "Malaysia", "''"],
        "query_toks_no_value": ["select", "name", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"],
        "question": "What are the names of circuits that belong to UK or Malaysia?",
        "question_toks": ["What", "are", "the", "names", "of", "circuits", "that", "belong", "to", "UK", "or", "Malaysia", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"UK\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Malaysia\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT name FROM circuits WHERE country = \"UK\" OR country = \"Malaysia\"",
        "query_toks": ["SELECT", "name", "FROM", "circuits", "WHERE", "country", "=", "``", "UK", "''", "OR", "country", "=", "``", "Malaysia", "''"],
        "query_toks_no_value": ["select", "name", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"],
        "question": "What are the names of all the circuits that are in the UK or Malaysia?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "the", "circuits", "that", "are", "in", "the", "UK", "or", "Malaysia", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"UK\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Malaysia\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "query_toks": ["SELECT", "circuitid", ",", "LOCATION", "FROM", "circuits", "WHERE", "country", "=", "``", "France", "''", "OR", "country", "=", "``", "Belgium", "''"],
        "query_toks_no_value": ["select", "circuitid", ",", "location", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"],
        "question": "Find the id and location of circuits that belong to France or Belgium?",
        "question_toks": ["Find", "the", "id", "and", "location", "of", "circuits", "that", "belong", "to", "France", "or", "Belgium", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"France\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Belgium\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "query_toks": ["SELECT", "circuitid", ",", "LOCATION", "FROM", "circuits", "WHERE", "country", "=", "``", "France", "''", "OR", "country", "=", "``", "Belgium", "''"],
        "query_toks_no_value": ["select", "circuitid", ",", "location", "from", "circuits", "where", "country", "=", "value", "or", "country", "=", "value"],
        "question": "What are the ids and locations of all circuits in France or Belgium?",
        "question_toks": ["What", "are", "the", "ids", "and", "locations", "of", "all", "circuits", "in", "France", "or", "Belgium", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"France\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Belgium\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "query_toks": ["SELECT", "T1.name", "FROM", "constructors", "AS", "T1", "JOIN", "constructorstandings", "AS", "T2", "ON", "T1.constructorid", "=", "T2.constructorid", "WHERE", "T1.nationality", "=", "``", "Japanese", "''", "AND", "T2.points", ">", "5"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "constructors", "as", "t1", "join", "constructorstandings", "as", "t2", "on", "t1", ".", "constructorid", "=", "t2", ".", "constructorid", "where", "t1", ".", "nationality", "=", "value", "and", "t2", ".", "points", ">", "value"],
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "question_toks": ["Find", "the", "names", "of", "Japanese", "constructors", "that", "have", "once", "earned", "more", "than", "5", "points", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 31, false], null], [0, 38, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 34, false], null], "\"Japanese\"", null], "and", [false, 3, [0, [0, 39, false], null], 5.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "query_toks": ["SELECT", "T1.name", "FROM", "constructors", "AS", "T1", "JOIN", "constructorstandings", "AS", "T2", "ON", "T1.constructorid", "=", "T2.constructorid", "WHERE", "T1.nationality", "=", "``", "Japanese", "''", "AND", "T2.points", ">", "5"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "constructors", "as", "t1", "join", "constructorstandings", "as", "t2", "on", "t1", ".", "constructorid", "=", "t2", ".", "constructorid", "where", "t1", ".", "nationality", "=", "value", "and", "t2", ".", "points", ">", "value"],
        "question": "What are the names of all the Japanese constructors that have earned more than 5 points?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "the", "Japanese", "constructors", "that", "have", "earned", "more", "than", "5", "points", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 31, false], null], [0, 38, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 34, false], null], "\"Japanese\"", null], "and", [false, 3, [0, [0, 39, false], null], 5.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"],
        "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"],
        "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "question_toks": ["What", "is", "the", "average", "fastest", "lap", "speed", "in", "race", "named", "'Monaco", "Grand", "Prix", "'", "in", "2008", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 59, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], 2008.0, null], "and", [false, 2, [0, [0, 14, false], null], "\"Monaco Grand Prix\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"],
        "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"],
        "question": "What is the average fastest lap speed for the Monaco Grand Prix in 2008?",
        "question_toks": ["What", "is", "the", "average", "fastest", "lap", "speed", "for", "the", "Monaco", "Grand", "Prix", "in", "2008", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 59, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], 2008.0, null], "and", [false, 2, [0, [0, 14, false], null], "\"Monaco Grand Prix\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"],
        "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"],
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "question_toks": ["What", "is", "the", "maximum", "fastest", "lap", "speed", "in", "race", "named", "'Monaco", "Grand", "Prix", "'", "in", "2008", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 59, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], 2008.0, null], "and", [false, 2, [0, [0, 14, false], null], "\"Monaco Grand Prix\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", "=", "2008", "AND", "T1.name", "=", "``", "Monaco", "Grand", "Prix", "''"],
        "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", "=", "value", "and", "t1", ".", "name", "=", "value"],
        "question": "What is the maximum fastest lap speed in the Monaco Grand Prix in 2008?",
        "question_toks": ["What", "is", "the", "maximum", "fastest", "lap", "speed", "in", "the", "Monaco", "Grand", "Prix", "in", "2008", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 59, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], 2008.0, null], "and", [false, 2, [0, [0, 14, false], null], "\"Monaco Grand Prix\"", null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"],
        "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"],
        "question": "What are the maximum fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
        "question_toks": ["What", "are", "the", "maximum", "fastest", "lap", "speed", "in", "races", "held", "after", "2004", "grouped", "by", "race", "name", "and", "ordered", "by", "year", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[1, [0, [0, 59, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 2014.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT max(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "query_toks": ["SELECT", "max", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"],
        "query_toks_no_value": ["select", "max", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"],
        "question": "For each race name, What is the maximum fastest lap speed for races after 2004 ordered by year?",
        "question_toks": ["For", "each", "race", "name", ",", "What", "is", "the", "maximum", "fastest", "lap", "speed", "for", "races", "after", "2004", "ordered", "by", "year", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[1, [0, [0, 59, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 2014.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"],
        "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"],
        "question": "What are the average fastest lap speed in races held after 2004 grouped by race name and ordered by year?",
        "question_toks": ["What", "are", "the", "average", "fastest", "lap", "speed", "in", "races", "held", "after", "2004", "grouped", "by", "race", "name", "and", "ordered", "by", "year", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[5, [0, [0, 59, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 2014.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT avg(T2.fastestlapspeed) ,  T1.name ,  T1.year FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year > 2014 GROUP BY T1.name ORDER BY T1.year",
        "query_toks": ["SELECT", "avg", "(", "T2.fastestlapspeed", ")", ",", "T1.name", ",", "T1.year", "FROM", "races", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.raceid", "=", "T2.raceid", "WHERE", "T1.year", ">", "2014", "GROUP", "BY", "T1.name", "ORDER", "BY", "T1.year"],
        "query_toks_no_value": ["select", "avg", "(", "t2", ".", "fastestlapspeed", ")", ",", "t1", ".", "name", ",", "t1", ".", "year", "from", "races", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "raceid", "=", "t2", ".", "raceid", "where", "t1", ".", "year", ">", "value", "group", "by", "t1", ".", "name", "order", "by", "t1", ".", "year"],
        "question": "What is the average fastest lap speed for races held after 2004, for each race, ordered by year?",
        "question_toks": ["What", "is", "the", "average", "fastest", "lap", "speed", "for", "races", "held", "after", "2004", ",", "for", "each", "race", ",", "ordered", "by", "year", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 10, false], null], [0, 44, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 7]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[5, [0, [0, 59, false], null]], [0, [0, [0, 14, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 2014.0, null]]
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Find the id, forename and number of races of all drivers who have at least participated in two races?",
        "question_toks": ["Find", "the", "id", ",", "forename", "and", "number", "of", "races", "of", "all", "drivers", "who", "have", "at", "least", "participated", "in", "two", "races", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 7]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 22, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.forename ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.forename", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "forename", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What is the id, forename, and number of races for all drivers that have participated in at least 2 races?",
        "question_toks": ["What", "is", "the", "id", ",", "forename", ",", "and", "number", "of", "races", "for", "all", "drivers", "that", "have", "participated", "in", "at", "least", "2", "races", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 7]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 22, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
        "query_toks": ["SELECT", "T1.driverid", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "<", "=", "30"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "<", "=", "value"],
        "question": "Find the driver id and number of races of all drivers who have at most participated in 30 races?",
        "question_toks": ["Find", "the", "driver", "id", "and", "number", "of", "races", "of", "all", "drivers", "who", "have", "at", "most", "participated", "in", "30", "races", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 7]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 6, [0, [3, 0, false], null], 30.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  count(*) FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid HAVING count(*)  <=  30",
        "query_toks": ["SELECT", "T1.driverid", ",", "count", "(", "*", ")", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "HAVING", "count", "(", "*", ")", "<", "=", "30"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "count", "(", "*", ")", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "having", "count", "(", "*", ")", "<", "=", "value"],
        "question": "For each id of a driver who participated in at most 30 races, how many races did they participate in?",
        "question_toks": ["For", "each", "id", "of", "a", "driver", "who", "participated", "in", "at", "most", "30", "races", ",", "how", "many", "races", "did", "they", "participate", "in", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 7]]
            },
            "groupBy": [[0, 18, false]],
            "having": [[false, 6, [0, [3, 0, false], null], 30.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "question_toks": ["Find", "the", "id", "and", "surname", "of", "the", "driver", "who", "participated", "the", "most", "number", "of", "races", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 7]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "formula_1",
        "query": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.driverid", ",", "T1.surname", "FROM", "drivers", "AS", "T1", "JOIN", "results", "AS", "T2", "ON", "T1.driverid", "=", "T2.driverid", "JOIN", "races", "AS", "T3", "ON", "T2.raceid", "=", "T3.raceid", "GROUP", "BY", "T1.driverid", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "driverid", ",", "t1", ".", "surname", "from", "drivers", "as", "t1", "join", "results", "as", "t2", "on", "t1", ".", "driverid", "=", "t2", ".", "driverid", "join", "races", "as", "t3", "on", "t2", ".", "raceid", "=", "t3", ".", "raceid", "group", "by", "t1", ".", "driverid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What are the ids and last names of all drivers who participated in the most races?",
        "question_toks": ["What", "are", "the", "ids", "and", "last", "names", "of", "all", "drivers", "who", "participated", "in", "the", "most", "races", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 45, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 7]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT count(*) FROM entrepreneur",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "entrepreneur"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "entrepreneur"],
        "question": "How many entrepreneurs are there?",
        "question_toks": ["How", "many", "entrepreneurs", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT count(*) FROM entrepreneur",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "entrepreneur"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "entrepreneur"],
        "question": "Count the number of entrepreneurs.",
        "question_toks": ["Count", "the", "number", "of", "entrepreneurs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "query_toks": ["SELECT", "Company", "FROM", "entrepreneur", "ORDER", "BY", "Money_Requested", "DESC"],
        "query_toks_no_value": ["select", "company", "from", "entrepreneur", "order", "by", "money_requested", "desc"],
        "question": "List the companies of entrepreneurs in descending order of money requested.",
        "question_toks": ["List", "the", "companies", "of", "entrepreneurs", "in", "descending", "order", "of", "money", "requested", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 4, false], null]]],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested DESC",
        "query_toks": ["SELECT", "Company", "FROM", "entrepreneur", "ORDER", "BY", "Money_Requested", "DESC"],
        "query_toks_no_value": ["select", "company", "from", "entrepreneur", "order", "by", "money_requested", "desc"],
        "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?",
        "question_toks": ["What", "are", "the", "companies", "of", "entrepreneurs", ",", "ordered", "descending", "by", "amount", "of", "money", "requested", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 4, false], null]]],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Company ,  Investor FROM entrepreneur",
        "query_toks": ["SELECT", "Company", ",", "Investor", "FROM", "entrepreneur"],
        "query_toks_no_value": ["select", "company", ",", "investor", "from", "entrepreneur"],
        "question": "List the companies and the investors of entrepreneurs.",
        "question_toks": ["List", "the", "companies", "and", "the", "investors", "of", "entrepreneurs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Company ,  Investor FROM entrepreneur",
        "query_toks": ["SELECT", "Company", ",", "Investor", "FROM", "entrepreneur"],
        "query_toks_no_value": ["select", "company", ",", "investor", "from", "entrepreneur"],
        "question": "What are the companies and investors that correspond to each entrepreneur?",
        "question_toks": ["What", "are", "the", "companies", "and", "investors", "that", "correspond", "to", "each", "entrepreneur", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT avg(Money_Requested) FROM entrepreneur",
        "query_toks": ["SELECT", "avg", "(", "Money_Requested", ")", "FROM", "entrepreneur"],
        "query_toks_no_value": ["select", "avg", "(", "money_requested", ")", "from", "entrepreneur"],
        "question": "What is the average money requested by all entrepreneurs?",
        "question_toks": ["What", "is", "the", "average", "money", "requested", "by", "all", "entrepreneurs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT avg(Money_Requested) FROM entrepreneur",
        "query_toks": ["SELECT", "avg", "(", "Money_Requested", ")", "FROM", "entrepreneur"],
        "query_toks_no_value": ["select", "avg", "(", "money_requested", ")", "from", "entrepreneur"],
        "question": "Return the average money requested across all entrepreneurs.",
        "question_toks": ["Return", "the", "average", "money", "requested", "across", "all", "entrepreneurs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Name FROM People ORDER BY Weight ASC",
        "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Weight", "ASC"],
        "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "weight", "asc"],
        "question": "What are the names of people in ascending order of weight?",
        "question_toks": ["What", "are", "the", "names", "of", "people", "in", "ascending", "order", "of", "weight", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Name FROM People ORDER BY Weight ASC",
        "query_toks": ["SELECT", "Name", "FROM", "People", "ORDER", "BY", "Weight", "ASC"],
        "query_toks_no_value": ["select", "name", "from", "people", "order", "by", "weight", "asc"],
        "question": "Return the names of people, ordered by weight ascending.",
        "question_toks": ["Return", "the", "names", "of", "people", ",", "ordered", "by", "weight", "ascending", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"],
        "question": "What are the names of entrepreneurs?",
        "question_toks": ["What", "are", "the", "names", "of", "entrepreneurs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id"],
        "question": "Return the names of entrepreneurs.",
        "question_toks": ["Return", "the", "names", "of", "entrepreneurs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Investor", "!", "=", "``", "Rachel", "Elnaugh", "''"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "investor", "!", "=", "value"],
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "question_toks": ["What", "are", "the", "names", "of", "entrepreneurs", "whose", "investor", "is", "not", "``", "Rachel", "Elnaugh", "''", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 7, [0, [0, 5, false], null], "\"Rachel Elnaugh\"", null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Investor", "!", "=", "``", "Rachel", "Elnaugh", "''"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "investor", "!", "=", "value"],
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "question_toks": ["Return", "the", "names", "of", "entrepreneurs", "do", "no", "not", "have", "the", "investor", "Rachel", "Elnaugh", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 7, [0, [0, 5, false], null], "\"Rachel Elnaugh\"", null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "query_toks": ["SELECT", "Weight", "FROM", "people", "ORDER", "BY", "Height", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "weight", "from", "people", "order", "by", "height", "asc", "limit", "value"],
        "question": "What is the weight of the shortest person?",
        "question_toks": ["What", "is", "the", "weight", "of", "the", "shortest", "person", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 8, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "query_toks": ["SELECT", "Weight", "FROM", "people", "ORDER", "BY", "Height", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "weight", "from", "people", "order", "by", "height", "asc", "limit", "value"],
        "question": "Return the weight of the shortest person.",
        "question_toks": ["Return", "the", "weight", "of", "the", "shortest", "person", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 8, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Weight", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "weight", "desc", "limit", "value"],
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "entrepreneur", "with", "the", "greatest", "weight", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.Name", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Weight", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "weight", "desc", "limit", "value"],
        "question": "Return the name of the heaviest entrepreneur.",
        "question_toks": ["Return", "the", "name", "of", "the", "heaviest", "entrepreneur", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
        "query_toks": ["SELECT", "sum", "(", "T1.Money_Requested", ")", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Height", ">", "1.85"],
        "query_toks_no_value": ["select", "sum", "(", "t1", ".", "money_requested", ")", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "height", ">", "value"],
        "question": "What is the total money requested by entrepreneurs with height more than 1.85?",
        "question_toks": ["What", "is", "the", "total", "money", "requested", "by", "entrepreneurs", "with", "height", "more", "than", "1.85", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 8, false], null], 1.85, null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT sum(T1.Money_Requested) FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Height  >  1.85",
        "query_toks": ["SELECT", "sum", "(", "T1.Money_Requested", ")", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T2.Height", ">", "1.85"],
        "query_toks_no_value": ["select", "sum", "(", "t1", ".", "money_requested", ")", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t2", ".", "height", ">", "value"],
        "question": "Give the total money requested by entrepreneurs who are taller than 1.85.",
        "question_toks": ["Give", "the", "total", "money", "requested", "by", "entrepreneurs", "who", "are", "taller", "than", "1.85", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 8, false], null], 1.85, null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "query_toks": ["SELECT", "T2.Date_of_Birth", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Investor", "=", "``", "Simon", "Woodroffe", "''", "OR", "T1.Investor", "=", "``", "Peter", "Jones", "''"],
        "query_toks_no_value": ["select", "t2", ".", "date_of_birth", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "investor", "=", "value", "or", "t1", ".", "investor", "=", "value"],
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "question_toks": ["What", "are", "the", "dates", "of", "birth", "of", "entrepreneurs", "with", "investor", "``", "Simon", "Woodroffe", "''", "or", "``", "Peter", "Jones", "''", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Simon Woodroffe\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Peter Jones\"", null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "query_toks": ["SELECT", "T2.Date_of_Birth", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "WHERE", "T1.Investor", "=", "``", "Simon", "Woodroffe", "''", "OR", "T1.Investor", "=", "``", "Peter", "Jones", "''"],
        "query_toks_no_value": ["select", "t2", ".", "date_of_birth", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "where", "t1", ".", "investor", "=", "value", "or", "t1", ".", "investor", "=", "value"],
        "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
        "question_toks": ["Return", "the", "dates", "of", "birth", "for", "entrepreneurs", "who", "have", "either", "the", "investor", "Simon", "Woodroffe", "or", "Peter", "Jones", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Simon Woodroffe\"", null], "or", [false, 2, [0, [0, 5, false], null], "\"Peter Jones\"", null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "query_toks": ["SELECT", "T2.Weight", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Money_Requested", "DESC"],
        "query_toks_no_value": ["select", "t2", ".", "weight", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "money_requested", "desc"],
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "question_toks": ["What", "are", "the", "weights", "of", "entrepreneurs", "in", "descending", "order", "of", "money", "requested", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 4, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "query_toks": ["SELECT", "T2.Weight", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Money_Requested", "DESC"],
        "query_toks_no_value": ["select", "t2", ".", "weight", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "money_requested", "desc"],
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "question_toks": ["Return", "the", "weights", "of", "entrepreneurs", ",", "ordered", "descending", "by", "amount", "of", "money", "requested", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 4, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor",
        "query_toks": ["SELECT", "Investor", ",", "COUNT", "(", "*", ")", "FROM", "entrepreneur", "GROUP", "BY", "Investor"],
        "query_toks_no_value": ["select", "investor", ",", "count", "(", "*", ")", "from", "entrepreneur", "group", "by", "investor"],
        "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
        "question_toks": ["What", "are", "the", "investors", "of", "entrepreneurs", "and", "the", "corresponding", "number", "of", "entrepreneurs", "invested", "by", "each", "investor", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Investor ,  COUNT(*) FROM entrepreneur GROUP BY Investor",
        "query_toks": ["SELECT", "Investor", ",", "COUNT", "(", "*", ")", "FROM", "entrepreneur", "GROUP", "BY", "Investor"],
        "query_toks_no_value": ["select", "investor", ",", "count", "(", "*", ")", "from", "entrepreneur", "group", "by", "investor"],
        "question": "How many entrepreneurs correspond to each investor?",
        "question_toks": ["How", "many", "entrepreneurs", "correspond", "to", "each", "investor", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "GROUP", "BY", "Investor", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "group", "by", "investor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "question_toks": ["What", "is", "the", "investor", "that", "has", "invested", "in", "the", "most", "number", "of", "entrepreneurs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "GROUP", "BY", "Investor", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "group", "by", "investor", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "question_toks": ["Return", "the", "investor", "who", "have", "invested", "in", "the", "greatest", "number", "of", "entrepreneurs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "GROUP", "BY", "Investor", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "group", "by", "investor", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "question_toks": ["What", "are", "the", "investors", "that", "have", "invested", "in", "at", "least", "two", "entrepreneurs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "GROUP", "BY", "Investor", "HAVING", "COUNT", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "group", "by", "investor", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "question_toks": ["Return", "the", "investors", "who", "have", "invested", "in", "two", "or", "more", "entrepreneurs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "query_toks": ["SELECT", "T2.Name", ",", "T1.Company", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Money_Requested"],
        "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "company", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "money_requested"],
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "question_toks": ["List", "the", "names", "of", "entrepreneurs", "and", "their", "companies", "in", "descending", "order", "of", "money", "requested", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 4, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "query_toks": ["SELECT", "T2.Name", ",", "T1.Company", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T1.Money_Requested"],
        "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "company", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t1", ".", "money_requested"],
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "question_toks": ["What", "are", "the", "names", "of", "entrepreneurs", "and", "their", "corresponding", "investors", ",", "ordered", "descending", "by", "the", "amount", "of", "money", "requested", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 4, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "entrepreneur", ")"],
        "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "entrepreneur", ")"],
        "question": "List the names of people that are not entrepreneurs.",
        "question_toks": ["List", "the", "names", "of", "people", "that", "are", "not", "entrepreneurs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 6, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 0]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 2, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Name FROM people WHERE People_ID NOT IN (SELECT People_ID FROM entrepreneur)",
        "query_toks": ["SELECT", "Name", "FROM", "people", "WHERE", "People_ID", "NOT", "IN", "(", "SELECT", "People_ID", "FROM", "entrepreneur", ")"],
        "query_toks_no_value": ["select", "name", "from", "people", "where", "people_id", "not", "in", "(", "select", "people_id", "from", "entrepreneur", ")"],
        "question": "What are the names of people who are not entrepreneurs?",
        "question_toks": ["What", "are", "the", "names", "of", "people", "who", "are", "not", "entrepreneurs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 6, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 0]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 2, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "WHERE", "Money_Requested", ">", "140000", "INTERSECT", "SELECT", "Investor", "FROM", "entrepreneur", "WHERE", "Money_Requested", "<", "120000"],
        "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "where", "money_requested", ">", "value", "intersect", "select", "investor", "from", "entrepreneur", "where", "money_requested", "<", "value"],
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "question_toks": ["Show", "the", "investors", "shared", "by", "entrepreneurs", "that", "requested", "more", "than", "140000", "and", "entrepreneurs", "that", "requested", "less", "than", "120000", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 5, false], null]]]],
                "union": null,
                "where": [[false, 4, [0, [0, 4, false], null], 120000.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 4, false], null], 140000.0, null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "query_toks": ["SELECT", "Investor", "FROM", "entrepreneur", "WHERE", "Money_Requested", ">", "140000", "INTERSECT", "SELECT", "Investor", "FROM", "entrepreneur", "WHERE", "Money_Requested", "<", "120000"],
        "query_toks_no_value": ["select", "investor", "from", "entrepreneur", "where", "money_requested", ">", "value", "intersect", "select", "investor", "from", "entrepreneur", "where", "money_requested", "<", "value"],
        "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
        "question_toks": ["What", "are", "the", "investors", "who", "have", "invested", "in", "both", "entrepreneurs", "who", "requested", "more", "than", "140000", "and", "entrepreneurs", "who", "requested", "less", "than", "120000", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 5, false], null]]]],
                "union": null,
                "where": [[false, 4, [0, [0, 4, false], null], 120000.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 4, false], null], 140000.0, null]]
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT count(DISTINCT Company) FROM entrepreneur",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "Company", ")", "FROM", "entrepreneur"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "company", ")", "from", "entrepreneur"],
        "question": "How many distinct companies are there?",
        "question_toks": ["How", "many", "distinct", "companies", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 3, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT count(DISTINCT Company) FROM entrepreneur",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "Company", ")", "FROM", "entrepreneur"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "company", ")", "from", "entrepreneur"],
        "question": "Count the number of different companies.",
        "question_toks": ["Count", "the", "number", "of", "different", "companies", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 3, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.Company", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Height", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "company", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "height", "desc", "limit", "value"],
        "question": "Show the company of the tallest entrepreneur.",
        "question_toks": ["Show", "the", "company", "of", "the", "tallest", "entrepreneur", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 8, false], null]]],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "entrepreneur",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Height DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.Company", "FROM", "entrepreneur", "AS", "T1", "JOIN", "people", "AS", "T2", "ON", "T1.People_ID", "=", "T2.People_ID", "ORDER", "BY", "T2.Height", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "company", "from", "entrepreneur", "as", "t1", "join", "people", "as", "t2", "on", "t1", ".", "people_id", "=", "t2", ".", "people_id", "order", "by", "t2", ".", "height", "desc", "limit", "value"],
        "question": "Which company was started by the entrepreneur with the greatest height?",
        "question_toks": ["Which", "company", "was", "started", "by", "the", "entrepreneur", "with", "the", "greatest", "height", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 8, false], null]]],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"],
        "question": "Report the name of all campuses in Los Angeles county.",
        "question_toks": ["Report", "the", "name", "of", "all", "campuses", "in", "Los", "Angeles", "county", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"],
        "question": "What campuses are located in the county of Los Angeles?",
        "question_toks": ["What", "campuses", "are", "located", "in", "the", "county", "of", "Los", "Angeles", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Chico", "''"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value"],
        "question": "What are the names of all campuses located at Chico?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "campuses", "located", "at", "Chico", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 3, false], null], "\"Chico\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Chico\"",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Chico", "''"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value"],
        "question": "What campuses are located in Chico?",
        "question_toks": ["What", "campuses", "are", "located", "in", "Chico", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 3, false], null], "\"Chico\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  =  1958",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "=", "1958"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "=", "value"],
        "question": "Find all the campuses opened in 1958.",
        "question_toks": ["Find", "all", "the", "campuses", "opened", "in", "1958", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], 1958.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  =  1958",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "=", "1958"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "=", "value"],
        "question": "What are the campuses that opened in 1958?",
        "question_toks": ["What", "are", "the", "campuses", "that", "opened", "in", "1958", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], 1958.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  <  1800",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "<", "1800"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "<", "value"],
        "question": "Find the name of the campuses opened before 1800.",
        "question_toks": ["Find", "the", "name", "of", "the", "campuses", "opened", "before", "1800", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 5, false], null], 1800.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  <  1800",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", "<", "1800"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", "<", "value"],
        "question": "What campuses opened before 1800?",
        "question_toks": ["What", "campuses", "opened", "before", "1800", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 5, false], null], 1800.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", ">", "=", "1935", "AND", "YEAR", "<", "=", "1939"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", ">", "=", "value", "and", "year", "<", "=", "value"],
        "question": "Which campus was opened between 1935 and 1939?",
        "question_toks": ["Which", "campus", "was", "opened", "between", "1935", "and", "1939", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 5, false], null], 1935.0, null], "and", [false, 6, [0, [0, 5, false], null], 1939.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE YEAR  >=  1935 AND YEAR  <=  1939",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "YEAR", ">", "=", "1935", "AND", "YEAR", "<", "=", "1939"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "year", ">", "=", "value", "and", "year", "<", "=", "value"],
        "question": "What campuses opened between 1935 and 1939?",
        "question_toks": ["What", "campuses", "opened", "between", "1935", "and", "1939", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 5, false], null], 1935.0, null], "and", [false, 6, [0, [0, 5, false], null], 1939.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Northridge", "''", "AND", "county", "=", "``", "Los", "Angeles", "''", "UNION", "SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "San", "Francisco", "''", "AND", "county", "=", "``", "San", "Francisco", "''"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value", "union", "select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value"],
        "question": "Find the name of the campuses that is in Northridge, Los Angeles or in San Francisco, San Francisco.",
        "question_toks": ["Find", "the", "name", "of", "the", "campuses", "that", "is", "in", "Northridge", ",", "Los", "Angeles", "or", "in", "San", "Francisco", ",", "San", "Francisco", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 3, false], null], "\"San Francisco\"", null], "and", [false, 2, [0, [0, 4, false], null], "\"San Francisco\"", null]]
            },
            "where": [[false, 2, [0, [0, 3, false], null], "\"Northridge\"", null], "and", [false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE LOCATION  =  \"Northridge\" AND county  =  \"Los Angeles\" UNION SELECT campus FROM campuses WHERE LOCATION  =  \"San Francisco\" AND county  =  \"San Francisco\"",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "Northridge", "''", "AND", "county", "=", "``", "Los", "Angeles", "''", "UNION", "SELECT", "campus", "FROM", "campuses", "WHERE", "LOCATION", "=", "``", "San", "Francisco", "''", "AND", "county", "=", "``", "San", "Francisco", "''"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value", "union", "select", "campus", "from", "campuses", "where", "location", "=", "value", "and", "county", "=", "value"],
        "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
        "question_toks": ["What", "campuses", "are", "located", "in", "Northridge", ",", "Los", "Angeles", "or", "in", "San", "Francisco", ",", "San", "Francisco", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 3, false], null], "\"San Francisco\"", null], "and", [false, 2, [0, [0, 4, false], null], "\"San Francisco\"", null]]
            },
            "where": [[false, 2, [0, [0, 3, false], null], "\"Northridge\"", null], "and", [false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "T2.year", "=", "1996"],
        "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"],
        "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "question_toks": ["What", "is", "the", "campus", "fee", "of", "``", "San", "Jose", "State", "University", "''", "in", "year", "1996", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Jose State University\"", null], "and", [false, 2, [0, [0, 7, false], null], 1996.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND T2.year  =  1996",
        "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "T2.year", "=", "1996"],
        "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"],
        "question": "What is the campus fee for San Jose State University in 1996?",
        "question_toks": ["What", "is", "the", "campus", "fee", "for", "San", "Jose", "State", "University", "in", "1996", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Jose State University\"", null], "and", [false, 2, [0, [0, 7, false], null], 1996.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996",
        "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "T2.year", "=", "1996"],
        "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"],
        "question": "What is the campus fee of \"San Francisco State University\" in year 1996?",
        "question_toks": ["What", "is", "the", "campus", "fee", "of", "``", "San", "Francisco", "State", "University", "''", "in", "year", "1996", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null], "and", [false, 2, [0, [0, 7, false], null], 1996.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campusfee FROM campuses AS T1 JOIN csu_fees AS T2 ON T1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND T2.year  =  1996",
        "query_toks": ["SELECT", "campusfee", "FROM", "campuses", "AS", "T1", "JOIN", "csu_fees", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "T2.year", "=", "1996"],
        "query_toks_no_value": ["select", "campusfee", "from", "campuses", "as", "t1", "join", "csu_fees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"],
        "question": "What is the campus fee for San Francisco State University in 1996?",
        "question_toks": ["What", "is", "the", "campus", "fee", "for", "San", "Francisco", "State", "University", "in", "1996", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null], "and", [false, 2, [0, [0, 7, false], null], 1996.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"],
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "question_toks": ["Find", "the", "count", "of", "universities", "whose", "campus", "fee", "is", "greater", "than", "the", "average", "campus", "fee", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 8, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 8, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"],
        "question": "How many universities have a campus fee higher than average?",
        "question_toks": ["How", "many", "universities", "have", "a", "campus", "fee", "higher", "than", "average", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 8, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 8, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"],
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "question_toks": ["Find", "the", "count", "of", "universities", "whose", "campus", "fee", "is", "greater", "than", "the", "average", "campus", "fee", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 8, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 8, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM csu_fees WHERE campusfee  >  (SELECT avg(campusfee) FROM csu_fees)",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "csu_fees", "WHERE", "campusfee", ">", "(", "SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", ")"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "csu_fees", "where", "campusfee", ">", "(", "select", "avg", "(", "campusfee", ")", "from", "csu_fees", ")"],
        "question": "How many universities have a campus fee greater than the average?",
        "question_toks": ["How", "many", "universities", "have", "a", "campus", "fee", "greater", "than", "the", "average", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 8, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 8, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''", "AND", "YEAR", ">", "1950"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value", "and", "year", ">", "value"],
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "question_toks": ["Which", "university", "is", "in", "Los", "Angeles", "county", "and", "opened", "after", "1950", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null], "and", [false, 3, [0, [0, 5, false], null], 1950.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\" AND YEAR  >  1950",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''", "AND", "YEAR", ">", "1950"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value", "and", "year", ">", "value"],
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "question_toks": ["What", "campuses", "are", "located", "in", "Los", "Angeles", "county", "and", "opened", "after", "1950", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null], "and", [false, 3, [0, [0, 5, false], null], 1950.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "query_toks": ["SELECT", "YEAR", "FROM", "degrees", "GROUP", "BY", "YEAR", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "year", "from", "degrees", "group", "by", "year", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"],
        "question": "Which year has the most degrees conferred?",
        "question_toks": ["Which", "year", "has", "the", "most", "degrees", "conferred", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 9, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 11, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT YEAR FROM degrees GROUP BY YEAR ORDER BY sum(degrees) DESC LIMIT 1",
        "query_toks": ["SELECT", "YEAR", "FROM", "degrees", "GROUP", "BY", "YEAR", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "year", "from", "degrees", "group", "by", "year", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"],
        "question": "In what year was the most degrees conferred?",
        "question_toks": ["In", "what", "year", "was", "the", "most", "degrees", "conferred", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 9, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 11, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "query_toks": ["SELECT", "campus", "FROM", "degrees", "GROUP", "BY", "campus", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "campus", "from", "degrees", "group", "by", "campus", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"],
        "question": "Which campus has the most degrees conferred in all times?",
        "question_toks": ["Which", "campus", "has", "the", "most", "degrees", "conferred", "in", "all", "times", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 10, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 11, false], null]]],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM degrees GROUP BY campus ORDER BY sum(degrees) DESC LIMIT 1",
        "query_toks": ["SELECT", "campus", "FROM", "degrees", "GROUP", "BY", "campus", "ORDER", "BY", "sum", "(", "degrees", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "campus", "from", "degrees", "group", "by", "campus", "order", "by", "sum", "(", "degrees", ")", "desc", "limit", "value"],
        "question": "What campus has the most degrees  conferrred over its entire existence?",
        "question_toks": ["What", "campus", "has", "the", "most", "degrees", "conferrred", "over", "its", "entire", "existence", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 10, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 11, false], null]]],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2003", "ORDER", "BY", "T2.faculty", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "order", "by", "t2", ".", "faculty", "desc", "limit", "value"],
        "question": "Which campus has the most faculties in year 2003?",
        "question_toks": ["Which", "campus", "has", "the", "most", "faculties", "in", "year", "2003", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 23, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2003.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2003 ORDER BY T2.faculty DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2003", "ORDER", "BY", "T2.faculty", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "order", "by", "t2", ".", "faculty", "desc", "limit", "value"],
        "question": "What campus has the most faculties in 2003?",
        "question_toks": ["What", "campus", "has", "the", "most", "faculties", "in", "2003", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 23, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2003.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "1996"],
        "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"],
        "question": "Find the average fee on a CSU campus in 1996",
        "question_toks": ["Find", "the", "average", "fee", "on", "a", "CSU", "campus", "in", "1996"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 7, false], null], 1996.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  1996",
        "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "1996"],
        "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"],
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "question_toks": ["What", "is", "the", "average", "fee", "for", "a", "CSU", "campus", "in", "the", "year", "of", "1996", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 7, false], null], 1996.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "2005"],
        "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"],
        "question": "What is the average fee on a CSU campus in 2005?",
        "question_toks": ["What", "is", "the", "average", "fee", "on", "a", "CSU", "campus", "in", "2005", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 7, false], null], 2005.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT avg(campusfee) FROM csu_fees WHERE YEAR  =  2005",
        "query_toks": ["SELECT", "avg", "(", "campusfee", ")", "FROM", "csu_fees", "WHERE", "YEAR", "=", "2005"],
        "query_toks_no_value": ["select", "avg", "(", "campusfee", ")", "from", "csu_fees", "where", "year", "=", "value"],
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "question_toks": ["What", "is", "the", "average", "fee", "for", "a", "CSU", "campus", "in", "the", "year", "of", "2005", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 7, false], null], 2005.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus",
        "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", ">", "=", "1998", "AND", "T2.year", "<", "=", "2002", "GROUP", "BY", "T1.campus"],
        "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", ">", "=", "value", "and", "t2", ".", "year", "<", "=", "value", "group", "by", "t1", ".", "campus"],
        "question": "report the total number of degrees granted between 1998 and 2002.",
        "question_toks": ["report", "the", "total", "number", "of", "degrees", "granted", "between", "1998", "and", "2002", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [4, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 9, false], null], 1998.0, null], "and", [false, 6, [0, [0, 9, false], null], 2002.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T2.year  >=  1998 AND T2.year  <=  2002 GROUP BY T1.campus",
        "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", ">", "=", "1998", "AND", "T2.year", "<", "=", "2002", "GROUP", "BY", "T1.campus"],
        "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", ">", "=", "value", "and", "t2", ".", "year", "<", "=", "value", "group", "by", "t1", ".", "campus"],
        "question": "how many degrees were conferred between 1998 and 2002?",
        "question_toks": ["how", "many", "degrees", "were", "conferred", "between", "1998", "and", "2002", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [4, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 9, false], null], 1998.0, null], "and", [false, 6, [0, [0, 9, false], null], 2002.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus",
        "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T1.county", "=", "``", "Orange", "''", "AND", "T2.year", ">", "=", "2000", "GROUP", "BY", "T1.campus"],
        "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "year", ">", "=", "value", "group", "by", "t1", ".", "campus"],
        "question": "For each Orange county campus, report the number of degrees granted after 2000.",
        "question_toks": ["For", "each", "Orange", "county", "campus", ",", "report", "the", "number", "of", "degrees", "granted", "after", "2000", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [4, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Orange\"", null], "and", [false, 5, [0, [0, 9, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus ,  sum(T2.degrees) FROM campuses AS T1 JOIN degrees AS T2 ON T1.id  =  T2.campus WHERE T1.county  =  \"Orange\" AND T2.year  >=  2000 GROUP BY T1.campus",
        "query_toks": ["SELECT", "T1.campus", ",", "sum", "(", "T2.degrees", ")", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T1.county", "=", "``", "Orange", "''", "AND", "T2.year", ">", "=", "2000", "GROUP", "BY", "T1.campus"],
        "query_toks_no_value": ["select", "t1", ".", "campus", ",", "sum", "(", "t2", ".", "degrees", ")", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "county", "=", "value", "and", "t2", ".", "year", ">", "=", "value", "group", "by", "t1", ".", "campus"],
        "question": "What is the total number of degrees granted after 2000 for each Orange county campus?",
        "question_toks": ["What", "is", "the", "total", "number", "of", "degrees", "granted", "after", "2000", "for", "each", "Orange", "county", "campus", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [4, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Orange\"", null], "and", [false, 5, [0, [0, 9, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")",
        "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "faculty", ">", "(", "SELECT", "max", "(", "faculty", ")", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "T1.county", "=", "``", "Orange", "''", ")"],
        "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "faculty", ">", "(", "select", "max", "(", "faculty", ")", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "t1", ".", "county", "=", "value", ")"],
        "question": "Find the names of the campus which has more faculties in 2002 than every campus in Orange county.",
        "question_toks": ["Find", "the", "names", "of", "the", "campus", "which", "has", "more", "faculties", "in", "2002", "than", "every", "campus", "in", "Orange", "county", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null], "and", [false, 3, [0, [0, 23, false], null], {
                        "except": null,
                        "from": {
                            "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]],
                            "table_units": [["table_unit", 0], ["table_unit", 5]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 23, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null], "and", [false, 2, [0, [0, 4, false], null], "\"Orange\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND faculty  >  (SELECT max(faculty) FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  T2.campus WHERE T2.year  =  2002 AND T1.county  =  \"Orange\")",
        "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "faculty", ">", "(", "SELECT", "max", "(", "faculty", ")", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "T2.campus", "WHERE", "T2.year", "=", "2002", "AND", "T1.county", "=", "``", "Orange", "''", ")"],
        "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "faculty", ">", "(", "select", "max", "(", "faculty", ")", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "t1", ".", "county", "=", "value", ")"],
        "question": "What are the names of the campus that have more faculties in 2002 than the maximum number in Orange county?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "campus", "that", "have", "more", "faculties", "in", "2002", "than", "the", "maximum", "number", "in", "Orange", "county", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null], "and", [false, 3, [0, [0, 23, false], null], {
                        "except": null,
                        "from": {
                            "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]],
                            "table_units": [["table_unit", 0], ["table_unit", 5]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 23, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null], "and", [false, 2, [0, [0, 4, false], null], "\"Orange\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "enrollments", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.year", "=", "1956", "AND", "totalenrollment_ay", ">", "400", "AND", "FTE_AY", ">", "200"],
        "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "enrollments", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "totalenrollment_ay", ">", "value", "and", "fte_ay", ">", "value"],
        "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "question_toks": ["What", "campus", "had", "more", "than", "400", "total", "enrollment", "but", "more", "than", "200", "full", "time", "enrollment", "in", "year", "1956", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], 1956.0, null], "and", [false, 3, [0, [0, 19, false], null], 400.0, null], "and", [false, 3, [0, [0, 20, false], null], 200.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN enrollments AS t2 ON t1.id  =  t2.campus WHERE t2.year  =  1956 AND totalenrollment_ay  >  400 AND FTE_AY  >  200",
        "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "enrollments", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.year", "=", "1956", "AND", "totalenrollment_ay", ">", "400", "AND", "FTE_AY", ">", "200"],
        "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "enrollments", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "year", "=", "value", "and", "totalenrollment_ay", ">", "value", "and", "fte_ay", ">", "value"],
        "question": "What campus started in year 1956, has more than 200 full time students, and more than 400 students enrolled?",
        "question_toks": ["What", "campus", "started", "in", "year", "1956", ",", "has", "more", "than", "200", "full", "time", "students", ",", "and", "more", "than", "400", "students", "enrolled", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], 1956.0, null], "and", [false, 3, [0, [0, 19, false], null], 400.0, null], "and", [false, 3, [0, [0, 20, false], null], 200.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses", "where", "county", "=", "value"],
        "question": "How many campuses are there in Los Angeles county?",
        "question_toks": ["How", "many", "campuses", "are", "there", "in", "Los", "Angeles", "county", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses WHERE county  =  \"Los Angeles\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses", "where", "county", "=", "value"],
        "question": "How many campuses exist are in the county of LA?",
        "question_toks": ["How", "many", "campuses", "exist", "are", "in", "the", "county", "of", "LA", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"],
        "question": "List the campuses in Los Angeles county.",
        "question_toks": ["List", "the", "campuses", "in", "Los", "Angeles", "county", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT campus FROM campuses WHERE county  =  \"Los Angeles\"",
        "query_toks": ["SELECT", "campus", "FROM", "campuses", "WHERE", "county", "=", "``", "Los", "Angeles", "''"],
        "query_toks_no_value": ["select", "campus", "from", "campuses", "where", "county", "=", "value"],
        "question": "What campuses are in Los Angeles county?",
        "question_toks": ["What", "campuses", "are", "in", "Los", "Angeles", "county", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"Los Angeles\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t2.year", "=", "2000"],
        "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"],
        "question": "How many degrees were conferred in \"San Jose State University\" in 2000?",
        "question_toks": ["How", "many", "degrees", "were", "conferred", "in", "``", "San", "Jose", "State", "University", "''", "in", "2000", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Jose State University\"", null], "and", [false, 2, [0, [0, 9, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Jose State University\" AND t2.year  =  2000",
        "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t2.year", "=", "2000"],
        "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"],
        "question": "How many degrees were conferred at San Jose State University in 2000?",
        "question_toks": ["How", "many", "degrees", "were", "conferred", "at", "San", "Jose", "State", "University", "in", "2000", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Jose State University\"", null], "and", [false, 2, [0, [0, 9, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t2.year", "=", "2001"],
        "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"],
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "question_toks": ["What", "are", "the", "degrees", "conferred", "in", "``", "San", "Francisco", "State", "University", "''", "in", "2001", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null], "and", [false, 2, [0, [0, 9, false], null], 2001.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT degrees FROM campuses AS T1 JOIN degrees AS T2 ON t1.id  =  t2.campus WHERE t1.campus  =  \"San Francisco State University\" AND t2.year  =  2001",
        "query_toks": ["SELECT", "degrees", "FROM", "campuses", "AS", "T1", "JOIN", "degrees", "AS", "T2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t1.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t2.year", "=", "2001"],
        "query_toks_no_value": ["select", "degrees", "from", "campuses", "as", "t1", "join", "degrees", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t1", ".", "campus", "=", "value", "and", "t2", ".", "year", "=", "value"],
        "question": "What degrees were conferred in San Francisco State University in the year 2001?",
        "question_toks": ["What", "degrees", "were", "conferred", "in", "San", "Francisco", "State", "University", "in", "the", "year", "2001", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null], "and", [false, 2, [0, [0, 9, false], null], 2001.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "query_toks": ["SELECT", "sum", "(", "faculty", ")", "FROM", "faculty", "WHERE", "YEAR", "=", "2002"],
        "query_toks_no_value": ["select", "sum", "(", "faculty", ")", "from", "faculty", "where", "year", "=", "value"],
        "question": "How many faculty is there in total in the year of 2002?",
        "question_toks": ["How", "many", "faculty", "is", "there", "in", "total", "in", "the", "year", "of", "2002", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT sum(faculty) FROM faculty WHERE YEAR  =  2002",
        "query_toks": ["SELECT", "sum", "(", "faculty", ")", "FROM", "faculty", "WHERE", "YEAR", "=", "2002"],
        "query_toks_no_value": ["select", "sum", "(", "faculty", ")", "from", "faculty", "where", "year", "=", "value"],
        "question": "How many faculty, in total, are there in the year 2002?",
        "question_toks": ["How", "many", "faculty", ",", "in", "total", ",", "are", "there", "in", "the", "year", "2002", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2002", "AND", "T2.campus", "=", "``", "Long", "Beach", "State", "University", "''"],
        "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"],
        "question": "What is the number of faculty lines in campus \"Long Beach State University\" in 2002?",
        "question_toks": ["What", "is", "the", "number", "of", "faculty", "lines", "in", "campus", "``", "Long", "Beach", "State", "University", "''", "in", "2002", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 21, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null], "and", [false, 2, [0, [0, 2, false], null], "\"Long Beach State University\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2002 AND T2.campus  =  \"Long Beach State University\"",
        "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2002", "AND", "T2.campus", "=", "``", "Long", "Beach", "State", "University", "''"],
        "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"],
        "question": "What is the number of faculty at Long Beach State University in 2002?",
        "question_toks": ["What", "is", "the", "number", "of", "faculty", "at", "Long", "Beach", "State", "University", "in", "2002", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 21, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null], "and", [false, 2, [0, [0, 2, false], null], "\"Long Beach State University\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2004", "AND", "T2.campus", "=", "``", "San", "Francisco", "State", "University", "''"],
        "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"],
        "question": "How many faculty lines are there in \"San Francisco State University\" in year 2004?",
        "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "``", "San", "Francisco", "State", "University", "''", "in", "year", "2004", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 21, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2004.0, null], "and", [false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT faculty FROM faculty AS T1 JOIN campuses AS T2 ON T1.campus  =  T2.id WHERE T1.year  =  2004 AND T2.campus  =  \"San Francisco State University\"",
        "query_toks": ["SELECT", "faculty", "FROM", "faculty", "AS", "T1", "JOIN", "campuses", "AS", "T2", "ON", "T1.campus", "=", "T2.id", "WHERE", "T1.year", "=", "2004", "AND", "T2.campus", "=", "``", "San", "Francisco", "State", "University", "''"],
        "query_toks_no_value": ["select", "faculty", "from", "faculty", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"],
        "question": "How many faculty lines are there at San Francisco State University in 2004?",
        "question_toks": ["How", "many", "faculty", "lines", "are", "there", "at", "San", "Francisco", "State", "University", "in", "2004", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 21, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2004.0, null], "and", [false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
        "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "faculty", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.faculty", ">", "=", "600", "AND", "t2.faculty", "<", "=", "1000", "AND", "T1.year", "=", "2004"],
        "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "faculty", ">", "=", "value", "and", "t2", ".", "faculty", "<", "=", "value", "and", "t1", ".", "year", "=", "value"],
        "question": "List the campus that have between 600 and 1000 faculty lines in year 2004.",
        "question_toks": ["List", "the", "campus", "that", "have", "between", "600", "and", "1000", "faculty", "lines", "in", "year", "2004", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 23, false], null], 600.0, null], "and", [false, 6, [0, [0, 23, false], null], 1000.0, null], "and", [false, 2, [0, [0, 5, false], null], 2004.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T1.campus FROM campuses AS t1 JOIN faculty AS t2 ON t1.id  =  t2.campus WHERE t2.faculty  >=  600 AND t2.faculty  <=  1000 AND T1.year  =  2004",
        "query_toks": ["SELECT", "T1.campus", "FROM", "campuses", "AS", "t1", "JOIN", "faculty", "AS", "t2", "ON", "t1.id", "=", "t2.campus", "WHERE", "t2.faculty", ">", "=", "600", "AND", "t2.faculty", "<", "=", "1000", "AND", "T1.year", "=", "2004"],
        "query_toks_no_value": ["select", "t1", ".", "campus", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "where", "t2", ".", "faculty", ">", "=", "value", "and", "t2", ".", "faculty", "<", "=", "value", "and", "t1", ".", "year", "=", "value"],
        "question": "What are the campuses that had between 600 and 1000 faculty members in 2004?",
        "question_toks": ["What", "are", "the", "campuses", "that", "had", "between", "600", "and", "1000", "faculty", "members", "in", "2004", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 23, false], null], 600.0, null], "and", [false, 6, [0, [0, 23, false], null], 1000.0, null], "and", [false, 2, [0, [0, 5, false], null], 2004.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2002", "ORDER", "BY", "t3.degrees", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "desc", "limit", "value"],
        "question": "How many faculty lines are there in the university that conferred the most number of degrees in year 2002?",
        "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "the", "university", "that", "conferred", "the", "most", "number", "of", "degrees", "in", "year", "2002", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 22, false], null], [0, 9, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2002 ORDER BY t3.degrees DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2002", "ORDER", "BY", "t3.degrees", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "desc", "limit", "value"],
        "question": "How many faculty members did the university that conferred the most degrees in 2002 have?",
        "question_toks": ["How", "many", "faculty", "members", "did", "the", "university", "that", "conferred", "the", "most", "degrees", "in", "2002", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 22, false], null], [0, 9, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2002.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2001", "ORDER", "BY", "t3.degrees", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "limit", "value"],
        "question": "How many faculty lines are there in the university that conferred the least number of degrees in year 2001?",
        "question_toks": ["How", "many", "faculty", "lines", "are", "there", "in", "the", "university", "that", "conferred", "the", "least", "number", "of", "degrees", "in", "year", "2001", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 22, false], null], [0, 9, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2001.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT T2.faculty FROM campuses AS T1 JOIN faculty AS T2 ON T1.id  =  t2.campus JOIN degrees AS T3 ON T1.id  =  t3.campus AND t2.year  =  t3.year WHERE t2.year  =  2001 ORDER BY t3.degrees LIMIT 1",
        "query_toks": ["SELECT", "T2.faculty", "FROM", "campuses", "AS", "T1", "JOIN", "faculty", "AS", "T2", "ON", "T1.id", "=", "t2.campus", "JOIN", "degrees", "AS", "T3", "ON", "T1.id", "=", "t3.campus", "AND", "t2.year", "=", "t3.year", "WHERE", "t2.year", "=", "2001", "ORDER", "BY", "t3.degrees", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "faculty", "from", "campuses", "as", "t1", "join", "faculty", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "campus", "join", "degrees", "as", "t3", "on", "t1", ".", "id", "=", "t3", ".", "campus", "and", "t2", ".", "year", "=", "t3", ".", "year", "where", "t2", ".", "year", "=", "value", "order", "by", "t3", ".", "degrees", "limit", "value"],
        "question": "How many faculty members are at the university that gave the least number of degrees in 2001?",
        "question_toks": ["How", "many", "faculty", "members", "are", "at", "the", "university", "that", "gave", "the", "least", "number", "of", "degrees", "in", "2001", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 21, false], null], "and", [false, 2, [0, [0, 22, false], null], [0, 9, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 2001.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "query_toks": ["SELECT", "sum", "(", "t1.undergraduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''"],
        "query_toks_no_value": ["select", "sum", "(", "t1", ".", "undergraduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"],
        "question": "How many undergraduates are there in \"San Jose State University\" in year 2004?",
        "question_toks": ["How", "many", "undergraduates", "are", "there", "in", "``", "San", "Jose", "State", "University", "''", "in", "year", "2004", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 12, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], 2004.0, null], "and", [false, 2, [0, [0, 2, false], null], "\"San Jose State University\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT sum(t1.undergraduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Jose State University\"",
        "query_toks": ["SELECT", "sum", "(", "t1.undergraduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''"],
        "query_toks_no_value": ["select", "sum", "(", "t1", ".", "undergraduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"],
        "question": "How many undergraduates are there at San Jose State",
        "question_toks": ["How", "many", "undergraduates", "are", "there", "at", "San", "Jose", "State"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 12, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], 2004.0, null], "and", [false, 2, [0, [0, 2, false], null], "\"San Jose State University\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
        "query_toks": ["SELECT", "sum", "(", "t1.graduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''"],
        "query_toks_no_value": ["select", "sum", "(", "t1", ".", "graduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"],
        "question": "What is the number of graduates in \"San Francisco State University\" in year 2004?",
        "question_toks": ["What", "is", "the", "number", "of", "graduates", "in", "``", "San", "Francisco", "State", "University", "''", "in", "year", "2004", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 12, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], 2004.0, null], "and", [false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT sum(t1.graduate) FROM discipline_enrollments AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t1.year  =  2004 AND t2.campus  =  \"San Francisco State University\"",
        "query_toks": ["SELECT", "sum", "(", "t1.graduate", ")", "FROM", "discipline_enrollments", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t1.year", "=", "2004", "AND", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''"],
        "query_toks_no_value": ["select", "sum", "(", "t1", ".", "graduate", ")", "from", "discipline_enrollments", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t1", ".", "year", "=", "value", "and", "t2", ".", "campus", "=", "value"],
        "question": "How many people graduated from San Francisco State University in 2004?",
        "question_toks": ["How", "many", "people", "graduated", "from", "San", "Francisco", "State", "University", "in", "2004", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 12, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 14, false], null], 2004.0, null], "and", [false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t1.year", "=", "2000"],
        "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"],
        "question": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "question_toks": ["What", "is", "the", "campus", "fee", "of", "``", "San", "Francisco", "State", "University", "''", "in", "year", "2000", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null], "and", [false, 2, [0, [0, 7, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Francisco State University\" AND t1.year  =  2000",
        "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Francisco", "State", "University", "''", "AND", "t1.year", "=", "2000"],
        "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"],
        "question": "In the year 2000, what is the campus fee for San Francisco State University?",
        "question_toks": ["In", "the", "year", "2000", ",", "what", "is", "the", "campus", "fee", "for", "San", "Francisco", "State", "University", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Francisco State University\"", null], "and", [false, 2, [0, [0, 7, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000",
        "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t1.year", "=", "2000"],
        "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"],
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "question_toks": ["Find", "the", "campus", "fee", "of", "``", "San", "Jose", "State", "University", "''", "in", "year", "2000", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Jose State University\"", null], "and", [false, 2, [0, [0, 7, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT t1.campusfee FROM csu_fees AS t1 JOIN campuses AS t2 ON t1.campus  =  t2.id WHERE t2.campus  =  \"San Jose State University\" AND t1.year  =  2000",
        "query_toks": ["SELECT", "t1.campusfee", "FROM", "csu_fees", "AS", "t1", "JOIN", "campuses", "AS", "t2", "ON", "t1.campus", "=", "t2.id", "WHERE", "t2.campus", "=", "``", "San", "Jose", "State", "University", "''", "AND", "t1.year", "=", "2000"],
        "query_toks_no_value": ["select", "t1", ".", "campusfee", "from", "csu_fees", "as", "t1", "join", "campuses", "as", "t2", "on", "t1", ".", "campus", "=", "t2", ".", "id", "where", "t2", ".", "campus", "=", "value", "and", "t1", ".", "year", "=", "value"],
        "question": "What is the campus fee in the year 2000 for San Jose State University?",
        "question_toks": ["What", "is", "the", "campus", "fee", "in", "the", "year", "2000", "for", "San", "Jose", "State", "University", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"San Jose State University\"", null], "and", [false, 2, [0, [0, 7, false], null], 2000.0, null]]
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses"],
        "question": "How many CSU campuses are there?",
        "question_toks": ["How", "many", "CSU", "campuses", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "csu_1",
        "query": "SELECT count(*) FROM campuses",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "campuses"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "campuses"],
        "question": "What is the total number of campuses?",
        "question_toks": ["What", "is", "the", "total", "number", "of", "campuses", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT last_name) FROM actor",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "last_name", ")", "FROM", "actor"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "last_name", ")", "from", "actor"],
        "question": "How many different last names do the actors and actresses have?",
        "question_toks": ["How", "many", "different", "last", "names", "do", "the", "actors", "and", "actresses", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 3, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT last_name) FROM actor",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "last_name", ")", "FROM", "actor"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "last_name", ")", "from", "actor"],
        "question": "Count the number of different last names actors have.",
        "question_toks": ["Count", "the", "number", "of", "different", "last", "names", "actors", "have", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 3, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "first_name", "FROM", "actor", "GROUP", "BY", "first_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "first_name", "from", "actor", "group", "by", "first_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the most popular first name of the actors?",
        "question_toks": ["What", "is", "the", "most", "popular", "first", "name", "of", "the", "actors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "first_name", "FROM", "actor", "GROUP", "BY", "first_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "first_name", "from", "actor", "group", "by", "first_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Return the most common first name among all actors.",
        "question_toks": ["Return", "the", "most", "common", "first", "name", "among", "all", "actors", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "actor", "GROUP", "BY", "first_name", ",", "last_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "actor", "group", "by", "first_name", ",", "last_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the most popular full name of the actors?",
        "question_toks": ["What", "is", "the", "most", "popular", "full", "name", "of", "the", "actors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 2, false], [0, 3, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "first_name", ",", "last_name", "FROM", "actor", "GROUP", "BY", "first_name", ",", "last_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "first_name", ",", "last_name", "from", "actor", "group", "by", "first_name", ",", "last_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Return the most common full name among all actors.",
        "question_toks": ["Return", "the", "most", "common", "full", "name", "among", "all", "actors", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 2, false], [0, 3, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "district", "FROM", "address", "GROUP", "BY", "district", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "district", "from", "address", "group", "by", "district", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Which districts have at least two addresses?",
        "question_toks": ["Which", "districts", "have", "at", "least", "two", "addresses", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 8, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT district FROM address GROUP BY district HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "district", "FROM", "address", "GROUP", "BY", "district", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "district", "from", "address", "group", "by", "district", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Give the districts which have two or more addresses.",
        "question_toks": ["Give", "the", "districts", "which", "have", "two", "or", "more", "addresses", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 8, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "query_toks": ["SELECT", "phone", ",", "postal_code", "FROM", "address", "WHERE", "address", "=", "'1031", "Daugavpils", "Parkway", "'"],
        "query_toks_no_value": ["select", "phone", ",", "postal_code", "from", "address", "where", "address", "=", "value"],
        "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?",
        "question_toks": ["What", "is", "the", "phone", "number", "and", "postal", "code", "of", "the", "address", "1031", "Daugavpils", "Parkway", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"1031 Daugavpils Parkway\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT phone ,  postal_code FROM address WHERE address  =  '1031 Daugavpils Parkway'",
        "query_toks": ["SELECT", "phone", ",", "postal_code", "FROM", "address", "WHERE", "address", "=", "'1031", "Daugavpils", "Parkway", "'"],
        "query_toks_no_value": ["select", "phone", ",", "postal_code", "from", "address", "where", "address", "=", "value"],
        "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
        "question_toks": ["Give", "the", "phone", "and", "postal", "code", "corresponding", "to", "the", "address", "'1031", "Daugavpils", "Parkway", "'", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"1031 Daugavpils Parkway\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.city", ",", "count", "(", "*", ")", ",", "T1.city_id", "FROM", "address", "AS", "T1", "JOIN", "city", "AS", "T2", "ON", "T1.city_id", "=", "T2.city_id", "GROUP", "BY", "T1.city_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "city", ",", "count", "(", "*", ")", ",", "t1", ".", "city_id", "from", "address", "as", "t1", "join", "city", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "city_id", "group", "by", "t1", ".", "city_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "question_toks": ["Which", "city", "has", "the", "most", "addresses", "?", "List", "the", "city", "name", ",", "number", "of", "addresses", ",", "and", "city", "id", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 9, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 9, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 17, false], null]], [3, [0, [0, 0, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.city", ",", "count", "(", "*", ")", ",", "T1.city_id", "FROM", "address", "AS", "T1", "JOIN", "city", "AS", "T2", "ON", "T1.city_id", "=", "T2.city_id", "GROUP", "BY", "T1.city_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "city", ",", "count", "(", "*", ")", ",", "t1", ".", "city_id", "from", "address", "as", "t1", "join", "city", "as", "t2", "on", "t1", ".", "city_id", "=", "t2", ".", "city_id", "group", "by", "t1", ".", "city_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "question_toks": ["What", "are", "the", "city", "name", ",", "id", ",", "and", "number", "of", "addresses", "corresponding", "to", "the", "city", "with", "the", "most", "addressed", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 9, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 9, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 17, false], null]], [3, [0, [0, 0, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM address WHERE district  =  'California'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "address", "WHERE", "district", "=", "'California", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "address", "where", "district", "=", "value"],
        "question": "How many addresses are in the district of California?",
        "question_toks": ["How", "many", "addresses", "are", "in", "the", "district", "of", "California", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"California\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM address WHERE district  =  'California'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "address", "WHERE", "district", "=", "'California", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "address", "where", "district", "=", "value"],
        "question": "Count the number of addressed in the California district.",
        "question_toks": ["Count", "the", "number", "of", "addressed", "in", "the", "California", "district", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"California\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "query_toks": ["SELECT", "title", ",", "film_id", "FROM", "film", "WHERE", "rental_rate", "=", "0.99", "INTERSECT", "SELECT", "T1.title", ",", "T1.film_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id", "HAVING", "count", "(", "*", ")", "<", "3"],
        "query_toks_no_value": ["select", "title", ",", "film_id", "from", "film", "where", "rental_rate", "=", "value", "intersect", "select", "t1", ".", "title", ",", "t1", ".", "film_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id", "having", "count", "(", "*", ")", "<", "value"],
        "question": "Which film is rented at a fee of 0.99 and has less than 3 in the inventory? List the film title and id.",
        "question_toks": ["Which", "film", "is", "rented", "at", "a", "fee", "of", "0.99", "and", "has", "less", "than", "3", "in", "the", "inventory", "?", "List", "the", "film", "title", "and", "id", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 32, false], null], [0, 55, false], null]],
                    "table_units": [["table_unit", 6], ["table_unit", 10]]
                },
                "groupBy": [[0, 32, false]],
                "having": [[false, 4, [0, [3, 0, false], null], 3.0, null]],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 32, false], null]]]],
                "union": null,
                "where": []
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 32, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 39, false], null], 0.99, null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title ,  film_id FROM film WHERE rental_rate  =  0.99 INTERSECT SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id HAVING count(*)  <  3",
        "query_toks": ["SELECT", "title", ",", "film_id", "FROM", "film", "WHERE", "rental_rate", "=", "0.99", "INTERSECT", "SELECT", "T1.title", ",", "T1.film_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id", "HAVING", "count", "(", "*", ")", "<", "3"],
        "query_toks_no_value": ["select", "title", ",", "film_id", "from", "film", "where", "rental_rate", "=", "value", "intersect", "select", "t1", ".", "title", ",", "t1", ".", "film_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id", "having", "count", "(", "*", ")", "<", "value"],
        "question": "What are the title and id of the film which has a rental rate of 0.99 and an inventory of below 3?",
        "question_toks": ["What", "are", "the", "title", "and", "id", "of", "the", "film", "which", "has", "a", "rental", "rate", "of", "0.99", "and", "an", "inventory", "of", "below", "3", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 32, false], null], [0, 55, false], null]],
                    "table_units": [["table_unit", 6], ["table_unit", 10]]
                },
                "groupBy": [[0, 32, false]],
                "having": [[false, 4, [0, [3, 0, false], null], 3.0, null]],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 32, false], null]]]],
                "union": null,
                "where": []
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 32, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 39, false], null], 0.99, null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "city", "AS", "T1", "JOIN", "country", "AS", "T2", "ON", "T1.country_id", "=", "T2.country_id", "WHERE", "T2.country", "=", "'Australia", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "city", "as", "t1", "join", "country", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "where", "t2", ".", "country", "=", "value"],
        "question": "How many cities are in Australia?",
        "question_toks": ["How", "many", "cities", "are", "in", "Australia", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 20, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 21, false], null], "\"Australia\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "city", "AS", "T1", "JOIN", "country", "AS", "T2", "ON", "T1.country_id", "=", "T2.country_id", "WHERE", "T2.country", "=", "'Australia", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "city", "as", "t1", "join", "country", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "where", "t2", ".", "country", "=", "value"],
        "question": "Count the number of cities in Australia.",
        "question_toks": ["Count", "the", "number", "of", "cities", "in", "Australia", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 20, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 21, false], null], "\"Australia\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "query_toks": ["SELECT", "T2.country", "FROM", "city", "AS", "T1", "JOIN", "country", "AS", "T2", "ON", "T1.country_id", "=", "T2.country_id", "GROUP", "BY", "T2.country_id", "HAVING", "count", "(", "*", ")", ">", "=", "3"],
        "query_toks_no_value": ["select", "t2", ".", "country", "from", "city", "as", "t1", "join", "country", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "group", "by", "t2", ".", "country_id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Which countries have at least 3 cities?",
        "question_toks": ["Which", "countries", "have", "at", "least", "3", "cities", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 20, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 4]]
            },
            "groupBy": [[0, 20, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 21, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "query_toks": ["SELECT", "T2.country", "FROM", "city", "AS", "T1", "JOIN", "country", "AS", "T2", "ON", "T1.country_id", "=", "T2.country_id", "GROUP", "BY", "T2.country_id", "HAVING", "count", "(", "*", ")", ">", "=", "3"],
        "query_toks_no_value": ["select", "t2", ".", "country", "from", "city", "as", "t1", "join", "country", "as", "t2", "on", "t1", ".", "country_id", "=", "t2", ".", "country_id", "group", "by", "t2", ".", "country_id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What are the countries that contain 3 or more cities?",
        "question_toks": ["What", "are", "the", "countries", "that", "contain", "3", "or", "more", "cities", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 18, false], null], [0, 20, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 4]]
            },
            "groupBy": [[0, 20, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 3.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 21, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "query_toks": ["SELECT", "payment_date", "FROM", "payment", "WHERE", "amount", ">", "10", "UNION", "SELECT", "T1.payment_date", "FROM", "payment", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "'Elsa", "'"],
        "query_toks_no_value": ["select", "payment_date", "from", "payment", "where", "amount", ">", "value", "union", "select", "t1", ".", "payment_date", "from", "payment", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value"],
        "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
        "question_toks": ["Find", "all", "the", "payment", "dates", "for", "the", "payments", "with", "an", "amount", "larger", "than", "10", "and", "the", "payments", "handled", "by", "a", "staff", "person", "with", "the", "first", "name", "Elsa", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 66, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 63, false], null], [0, 75, false], null]],
                    "table_units": [["table_unit", 12], ["table_unit", 14]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 66, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 76, false], null], "\"Elsa\"", null]]
            },
            "where": [[false, 3, [0, [0, 65, false], null], 10.0, null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT payment_date FROM payment WHERE amount  >  10 UNION SELECT T1.payment_date FROM payment AS T1 JOIN staff AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.first_name  =  'Elsa'",
        "query_toks": ["SELECT", "payment_date", "FROM", "payment", "WHERE", "amount", ">", "10", "UNION", "SELECT", "T1.payment_date", "FROM", "payment", "AS", "T1", "JOIN", "staff", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "WHERE", "T2.first_name", "=", "'Elsa", "'"],
        "query_toks_no_value": ["select", "payment_date", "from", "payment", "where", "amount", ">", "value", "union", "select", "t1", ".", "payment_date", "from", "payment", "as", "t1", "join", "staff", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "where", "t2", ".", "first_name", "=", "value"],
        "question": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?",
        "question_toks": ["What", "are", "the", "payment", "dates", "for", "any", "payments", "that", "have", "an", "amount", "greater", "than", "10", "or", "were", "handled", "by", "a", "staff", "member", "with", "the", "first", "name", "Elsa", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 66, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 63, false], null], [0, 75, false], null]],
                    "table_units": [["table_unit", 12], ["table_unit", 14]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 66, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 76, false], null], "\"Elsa\"", null]]
            },
            "where": [[false, 3, [0, [0, 65, false], null], 10.0, null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM customer WHERE active = '1'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customer", "WHERE", "active", "=", "'1", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customer", "where", "active", "=", "value"],
        "question": "How many customers have an active value of 1?",
        "question_toks": ["How", "many", "customers", "have", "an", "active", "value", "of", "1", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 29, false], null], "\"1\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM customer WHERE active = '1'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "customer", "WHERE", "active", "=", "'1", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "customer", "where", "active", "=", "value"],
        "question": "Count the number of customers who are active.",
        "question_toks": ["Count", "the", "number", "of", "customers", "who", "are", "active", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 29, false], null], "\"1\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "query_toks": ["SELECT", "title", ",", "rental_rate", "FROM", "film", "ORDER", "BY", "rental_rate", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "title", ",", "rental_rate", "from", "film", "order", "by", "rental_rate", "desc", "limit", "value"],
        "question": "Which film has the highest rental rate? And what is the rate?",
        "question_toks": ["Which", "film", "has", "the", "highest", "rental", "rate", "?", "And", "what", "is", "the", "rate", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 39, false], null]]],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 39, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "query_toks": ["SELECT", "title", ",", "rental_rate", "FROM", "film", "ORDER", "BY", "rental_rate", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "title", ",", "rental_rate", "from", "film", "order", "by", "rental_rate", "desc", "limit", "value"],
        "question": "What are the title and rental rate of the film with the highest rental rate?",
        "question_toks": ["What", "are", "the", "title", "and", "rental", "rate", "of", "the", "film", "with", "the", "highest", "rental", "rate", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 39, false], null]]],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 39, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.title", ",", "T2.film_id", ",", "T2.description", "FROM", "film_actor", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T2.film_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "film_id", ",", "t2", ".", "description", "from", "film_actor", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t2", ".", "film_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "question_toks": ["Which", "film", "has", "the", "most", "number", "of", "actors", "or", "actresses", "?", "List", "the", "film", "name", ",", "film", "id", "and", "description", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 46, false], null], [0, 32, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 6]]
            },
            "groupBy": [[0, 32, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 32, false], null]], [0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.title", ",", "T2.film_id", ",", "T2.description", "FROM", "film_actor", "AS", "T1", "JOIN", "film", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T2.film_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "title", ",", "t2", ".", "film_id", ",", "t2", ".", "description", "from", "film_actor", "as", "t1", "join", "film", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t2", ".", "film_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "question_toks": ["What", "are", "the", "title", ",", "id", ",", "and", "description", "of", "the", "movie", "with", "the", "greatest", "number", "of", "actors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 46, false], null], [0, 32, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 6]]
            },
            "groupBy": [[0, 32, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 32, false], null]], [0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", ",", "T2.actor_id", "FROM", "film_actor", "AS", "T1", "JOIN", "actor", "AS", "T2", "ON", "T1.actor_id", "=", "T2.actor_id", "GROUP", "BY", "T2.actor_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", ",", "t2", ".", "actor_id", "from", "film_actor", "as", "t1", "join", "actor", "as", "t2", "on", "t1", ".", "actor_id", "=", "t2", ".", "actor_id", "group", "by", "t2", ".", "actor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "question_toks": ["Which", "film", "actor", "(", "actress", ")", "starred", "the", "most", "films", "?", "List", "his", "or", "her", "first", "name", ",", "last", "name", "and", "actor", "id", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 45, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]], [0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.first_name ,  T2.last_name ,  T2.actor_id FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", ",", "T2.actor_id", "FROM", "film_actor", "AS", "T1", "JOIN", "actor", "AS", "T2", "ON", "T1.actor_id", "=", "T2.actor_id", "GROUP", "BY", "T2.actor_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", ",", "t2", ".", "actor_id", "from", "film_actor", "as", "t1", "join", "actor", "as", "t2", "on", "t1", ".", "actor_id", "=", "t2", ".", "actor_id", "group", "by", "t2", ".", "actor_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
        "question_toks": ["Return", "the", "full", "name", "and", "id", "of", "the", "actor", "or", "actress", "who", "starred", "in", "the", "greatest", "number", "of", "films", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 45, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]], [0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "film_actor", "AS", "T1", "JOIN", "actor", "AS", "T2", "ON", "T1.actor_id", "=", "T2.actor_id", "GROUP", "BY", "T2.actor_id", "HAVING", "count", "(", "*", ")", ">", "30"],
        "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "film_actor", "as", "t1", "join", "actor", "as", "t2", "on", "t1", ".", "actor_id", "=", "t2", ".", "actor_id", "group", "by", "t2", ".", "actor_id", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "question_toks": ["Which", "film", "actors", "(", "actresses", ")", "played", "a", "role", "in", "more", "than", "30", "films", "?", "List", "his", "or", "her", "first", "name", "and", "last", "name", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 45, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 30.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "query_toks": ["SELECT", "T2.first_name", ",", "T2.last_name", "FROM", "film_actor", "AS", "T1", "JOIN", "actor", "AS", "T2", "ON", "T1.actor_id", "=", "T2.actor_id", "GROUP", "BY", "T2.actor_id", "HAVING", "count", "(", "*", ")", ">", "30"],
        "query_toks_no_value": ["select", "t2", ".", "first_name", ",", "t2", ".", "last_name", "from", "film_actor", "as", "t1", "join", "actor", "as", "t2", "on", "t1", ".", "actor_id", "=", "t2", ".", "actor_id", "group", "by", "t2", ".", "actor_id", "having", "count", "(", "*", ")", ">", "value"],
        "question": "What are the full names of actors who had roles in more than 30 films?",
        "question_toks": ["What", "are", "the", "full", "names", "of", "actors", "who", "had", "roles", "in", "more", "than", "30", "films", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 45, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 7], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 30.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "store_id", "FROM", "inventory", "GROUP", "BY", "store_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "store_id", "from", "inventory", "group", "by", "store_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which store owns most items?",
        "question_toks": ["Which", "store", "owns", "most", "items", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 10]]
            },
            "groupBy": [[0, 56, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 56, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM inventory GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "store_id", "FROM", "inventory", "GROUP", "BY", "store_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "store_id", "from", "inventory", "group", "by", "store_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the id of the store that has the most items in inventory?",
        "question_toks": ["What", "is", "the", "id", "of", "the", "store", "that", "has", "the", "most", "items", "in", "inventory", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 10]]
            },
            "groupBy": [[0, 56, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 56, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT sum(amount) FROM payment",
        "query_toks": ["SELECT", "sum", "(", "amount", ")", "FROM", "payment"],
        "query_toks_no_value": ["select", "sum", "(", "amount", ")", "from", "payment"],
        "question": "What is the total amount of all payments?",
        "question_toks": ["What", "is", "the", "total", "amount", "of", "all", "payments", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 65, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT sum(amount) FROM payment",
        "query_toks": ["SELECT", "sum", "(", "amount", ")", "FROM", "payment"],
        "query_toks_no_value": ["select", "sum", "(", "amount", ")", "from", "payment"],
        "question": "Return the sum of all payment amounts.",
        "question_toks": ["Return", "the", "sum", "of", "all", "payment", "amounts", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 65, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.customer_id", "FROM", "customer", "AS", "T1", "JOIN", "payment", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "sum", "(", "amount", ")", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "customer_id", "from", "customer", "as", "t1", "join", "payment", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "sum", "(", "amount", ")", "asc", "limit", "value"],
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "question_toks": ["Which", "customer", ",", "who", "has", "made", "at", "least", "one", "payment", ",", "has", "spent", "the", "least", "money", "?", "List", "his", "or", "her", "first", "name", ",", "last", "name", ",", "and", "the", "id", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 23, false], null], [0, 62, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 12]]
            },
            "groupBy": [[0, 23, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [4, 65, false], null]]],
            "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.customer_id", "FROM", "customer", "AS", "T1", "JOIN", "payment", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "sum", "(", "amount", ")", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "customer_id", "from", "customer", "as", "t1", "join", "payment", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "sum", "(", "amount", ")", "asc", "limit", "value"],
        "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
        "question_toks": ["What", "is", "the", "full", "name", "and", "id", "of", "the", "customer", "who", "has", "the", "lowest", "total", "amount", "of", "payment", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 23, false], null], [0, 62, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 12]]
            },
            "groupBy": [[0, 23, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [4, 65, false], null]]],
            "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "query_toks": ["SELECT", "T1.name", "FROM", "category", "AS", "T1", "JOIN", "film_category", "AS", "T2", "ON", "T1.category_id", "=", "T2.category_id", "JOIN", "film", "AS", "T3", "ON", "T2.film_id", "=", "T3.film_id", "WHERE", "T3.title", "=", "'HUNGER", "ROOF", "'"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t1", "join", "film_category", "as", "t2", "on", "t1", ".", "category_id", "=", "t2", ".", "category_id", "join", "film", "as", "t3", "on", "t2", ".", "film_id", "=", "t3", ".", "film_id", "where", "t3", ".", "title", "=", "value"],
        "question": "What is the genre name of the film HUNGER ROOF?",
        "question_toks": ["What", "is", "the", "genre", "name", "of", "the", "film", "HUNGER", "ROOF", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 13, false], null], [0, 49, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 8]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 33, false], null], "\"HUNGER ROOF\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "query_toks": ["SELECT", "T1.name", "FROM", "category", "AS", "T1", "JOIN", "film_category", "AS", "T2", "ON", "T1.category_id", "=", "T2.category_id", "JOIN", "film", "AS", "T3", "ON", "T2.film_id", "=", "T3.film_id", "WHERE", "T3.title", "=", "'HUNGER", "ROOF", "'"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "category", "as", "t1", "join", "film_category", "as", "t2", "on", "t1", ".", "category_id", "=", "t2", ".", "category_id", "join", "film", "as", "t3", "on", "t2", ".", "film_id", "=", "t3", ".", "film_id", "where", "t3", ".", "title", "=", "value"],
        "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs.",
        "question_toks": ["Return", "the", "name", "of", "the", "category", "to", "which", "the", "film", "'HUNGER", "ROOF", "'", "belongs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 13, false], null], [0, 49, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 8]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 33, false], null], "\"HUNGER ROOF\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "query_toks": ["SELECT", "T2.name", ",", "T1.category_id", ",", "count", "(", "*", ")", "FROM", "film_category", "AS", "T1", "JOIN", "category", "AS", "T2", "ON", "T1.category_id", "=", "T2.category_id", "GROUP", "BY", "T1.category_id"],
        "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "category_id", ",", "count", "(", "*", ")", "from", "film_category", "as", "t1", "join", "category", "as", "t2", "on", "t1", ".", "category_id", "=", "t2", ".", "category_id", "group", "by", "t1", ".", "category_id"],
        "question": "How many films are there in each category? List the genre name, genre id and the count.",
        "question_toks": ["How", "many", "films", "are", "there", "in", "each", "category", "?", "List", "the", "genre", "name", ",", "genre", "id", "and", "the", "count", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 49, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 8], ["table_unit", 2]]
            },
            "groupBy": [[0, 49, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 49, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.name ,  T1.category_id ,  count(*) FROM film_category AS T1 JOIN category AS T2 ON T1.category_id  =  T2.category_id GROUP BY T1.category_id",
        "query_toks": ["SELECT", "T2.name", ",", "T1.category_id", ",", "count", "(", "*", ")", "FROM", "film_category", "AS", "T1", "JOIN", "category", "AS", "T2", "ON", "T1.category_id", "=", "T2.category_id", "GROUP", "BY", "T1.category_id"],
        "query_toks_no_value": ["select", "t2", ".", "name", ",", "t1", ".", "category_id", ",", "count", "(", "*", ")", "from", "film_category", "as", "t1", "join", "category", "as", "t2", "on", "t1", ".", "category_id", "=", "t2", ".", "category_id", "group", "by", "t1", ".", "category_id"],
        "question": "What are the names and ids of the different categories, and how many films are in each?",
        "question_toks": ["What", "are", "the", "names", "and", "ids", "of", "the", "different", "categories", ",", "and", "how", "many", "films", "are", "in", "each", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 49, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 8], ["table_unit", 2]]
            },
            "groupBy": [[0, 49, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 14, false], null]], [0, [0, [0, 49, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.title", ",", "T1.film_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "film_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "question_toks": ["Which", "film", "has", "the", "most", "copies", "in", "the", "inventory", "?", "List", "both", "title", "and", "id", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 55, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 10]]
            },
            "groupBy": [[0, 32, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 32, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.title", ",", "T1.film_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "GROUP", "BY", "T1.film_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "title", ",", "t1", ".", "film_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "group", "by", "t1", ".", "film_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
        "question_toks": ["What", "is", "the", "title", "and", "id", "of", "the", "film", "that", "has", "the", "greatest", "number", "of", "copies", "in", "inventory", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 55, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 10]]
            },
            "groupBy": [[0, 32, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 32, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.title", ",", "T2.inventory_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "JOIN", "rental", "AS", "T3", "ON", "T2.inventory_id", "=", "T3.inventory_id", "GROUP", "BY", "T2.inventory_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "inventory_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "join", "rental", "as", "t3", "on", "t2", ".", "inventory_id", "=", "t3", ".", "inventory_id", "group", "by", "t2", ".", "inventory_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "question_toks": ["What", "is", "the", "film", "title", "and", "inventory", "id", "of", "the", "item", "in", "the", "inventory", "which", "was", "rented", "most", "frequently", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 55, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 10]]
            },
            "groupBy": [[0, 54, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 54, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.title", ",", "T2.inventory_id", "FROM", "film", "AS", "T1", "JOIN", "inventory", "AS", "T2", "ON", "T1.film_id", "=", "T2.film_id", "JOIN", "rental", "AS", "T3", "ON", "T2.inventory_id", "=", "T3.inventory_id", "GROUP", "BY", "T2.inventory_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "title", ",", "t2", ".", "inventory_id", "from", "film", "as", "t1", "join", "inventory", "as", "t2", "on", "t1", ".", "film_id", "=", "t2", ".", "film_id", "join", "rental", "as", "t3", "on", "t2", ".", "inventory_id", "=", "t3", ".", "inventory_id", "group", "by", "t2", ".", "inventory_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Return the title and inventory id of the film that is rented most often.",
        "question_toks": ["Return", "the", "title", "and", "inventory", "id", "of", "the", "film", "that", "is", "rented", "most", "often", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 55, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 10]]
            },
            "groupBy": [[0, 54, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 33, false], null]], [0, [0, [0, 54, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT language_id) FROM film",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "language_id", ")", "FROM", "film"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "language_id", ")", "from", "film"],
        "question": "How many languages are in these films?",
        "question_toks": ["How", "many", "languages", "are", "in", "these", "films", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 36, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT language_id) FROM film",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "language_id", ")", "FROM", "film"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "language_id", ")", "from", "film"],
        "question": "Count the number of different languages in these films.",
        "question_toks": ["Count", "the", "number", "of", "different", "languages", "in", "these", "films", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 36, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title FROM film WHERE rating  =  'R'",
        "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "rating", "=", "'R", "'"],
        "query_toks_no_value": ["select", "title", "from", "film", "where", "rating", "=", "value"],
        "question": "What are all the movies rated as R? List the titles.",
        "question_toks": ["What", "are", "all", "the", "movies", "rated", "as", "R", "?", "List", "the", "titles", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 42, false], null], "\"R\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title FROM film WHERE rating  =  'R'",
        "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "rating", "=", "'R", "'"],
        "query_toks_no_value": ["select", "title", "from", "film", "where", "rating", "=", "value"],
        "question": "Return the titles of any movies with an R rating.",
        "question_toks": ["Return", "the", "titles", "of", "any", "movies", "with", "an", "R", "rating", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 42, false], null], "\"R\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "query_toks": ["SELECT", "T2.address", "FROM", "store", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "store_id", "=", "1"],
        "query_toks_no_value": ["select", "t2", ".", "address", "from", "store", "as", "t1", "join", "address", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "store_id", "=", "value"],
        "question": "Where is store 1 located?",
        "question_toks": ["Where", "is", "store", "1", "located", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 88, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 15], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 86, false], null], 1.0, null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "query_toks": ["SELECT", "T2.address", "FROM", "store", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "store_id", "=", "1"],
        "query_toks_no_value": ["select", "t2", ".", "address", "from", "store", "as", "t1", "join", "address", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "store_id", "=", "value"],
        "question": "Return the address of store 1.",
        "question_toks": ["Return", "the", "address", "of", "store", "1", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 88, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 15], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 86, false], null], 1.0, null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
        "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.staff_id", "FROM", "staff", "AS", "T1", "JOIN", "payment", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "GROUP", "BY", "T1.staff_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "staff_id", "from", "staff", "as", "t1", "join", "payment", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "group", "by", "t1", ".", "staff_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"],
        "question": "Which staff handled least number of payments? List the full name and the id.",
        "question_toks": ["Which", "staff", "handled", "least", "number", "of", "payments", "?", "List", "the", "full", "name", "and", "the", "id", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 75, false], null], [0, 63, false], null]],
                "table_units": [["table_unit", 14], ["table_unit", 12]]
            },
            "groupBy": [[0, 75, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 76, false], null]], [0, [0, [0, 77, false], null]], [0, [0, [0, 75, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name ,  T1.staff_id FROM staff AS T1 JOIN payment AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T1.staff_id ORDER BY count(*) ASC LIMIT 1",
        "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", ",", "T1.staff_id", "FROM", "staff", "AS", "T1", "JOIN", "payment", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "GROUP", "BY", "T1.staff_id", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", ",", "t1", ".", "staff_id", "from", "staff", "as", "t1", "join", "payment", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "group", "by", "t1", ".", "staff_id", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"],
        "question": "Give the full name and staff id of the staff who has handled the fewest payments.",
        "question_toks": ["Give", "the", "full", "name", "and", "staff", "id", "of", "the", "staff", "who", "has", "handled", "the", "fewest", "payments", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 75, false], null], [0, 63, false], null]],
                "table_units": [["table_unit", 14], ["table_unit", 12]]
            },
            "groupBy": [[0, 75, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 76, false], null]], [0, [0, [0, 77, false], null]], [0, [0, [0, 75, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "query_toks": ["SELECT", "T2.name", "FROM", "film", "AS", "T1", "JOIN", "LANGUAGE", "AS", "T2", "ON", "T1.language_id", "=", "T2.language_id", "WHERE", "T1.title", "=", "'AIRPORT", "POLLOCK", "'"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "film", "as", "t1", "join", "language", "as", "t2", "on", "t1", ".", "language_id", "=", "t2", ".", "language_id", "where", "t1", ".", "title", "=", "value"],
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "question_toks": ["Which", "language", "does", "the", "film", "AIRPORT", "POLLOCK", "use", "?", "List", "the", "language", "name", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 36, false], null], [0, 58, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 11]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 59, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 33, false], null], "\"AIRPORT POLLOCK\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "query_toks": ["SELECT", "T2.name", "FROM", "film", "AS", "T1", "JOIN", "LANGUAGE", "AS", "T2", "ON", "T1.language_id", "=", "T2.language_id", "WHERE", "T1.title", "=", "'AIRPORT", "POLLOCK", "'"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "film", "as", "t1", "join", "language", "as", "t2", "on", "t1", ".", "language_id", "=", "t2", ".", "language_id", "where", "t1", ".", "title", "=", "value"],
        "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "language", "that", "the", "film", "'AIRPORT", "POLLOCK", "'", "is", "in", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 36, false], null], [0, 58, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 11]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 59, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 33, false], null], "\"AIRPORT POLLOCK\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM store",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "store"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "store"],
        "question": "How many stores are there?",
        "question_toks": ["How", "many", "stores", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 15]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM store",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "store"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "store"],
        "question": "Count the number of stores.",
        "question_toks": ["Count", "the", "number", "of", "stores", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 15]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT rating) FROM film",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "rating", ")", "FROM", "film"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "rating", ")", "from", "film"],
        "question": "How many kinds of different ratings are listed?",
        "question_toks": ["How", "many", "kinds", "of", "different", "ratings", "are", "listed", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 42, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(DISTINCT rating) FROM film",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "rating", ")", "FROM", "film"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "rating", ")", "from", "film"],
        "question": "Count the number of different film ratings.",
        "question_toks": ["Count", "the", "number", "of", "different", "film", "ratings", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 42, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "special_features", "LIKE", "'", "%", "Deleted", "Scenes", "%", "'"],
        "query_toks_no_value": ["select", "title", "from", "film", "where", "special_features", "like", "value"],
        "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "question_toks": ["Which", "movies", "have", "'Deleted", "Scenes", "'", "as", "a", "substring", "in", "the", "special", "feature", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 43, false], null], "\"%Deleted Scenes%\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "special_features", "LIKE", "'", "%", "Deleted", "Scenes", "%", "'"],
        "query_toks_no_value": ["select", "title", "from", "film", "where", "special_features", "like", "value"],
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "question_toks": ["Return", "the", "titles", "of", "films", "that", "include", "'Deleted", "Scenes", "'", "in", "their", "special", "feature", "section", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 43, false], null], "\"%Deleted Scenes%\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "inventory", "WHERE", "store_id", "=", "1"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "inventory", "where", "store_id", "=", "value"],
        "question": "How many items in inventory does store 1 have?",
        "question_toks": ["How", "many", "items", "in", "inventory", "does", "store", "1", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 10]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 56, false], null], 1.0, null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "inventory", "WHERE", "store_id", "=", "1"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "inventory", "where", "store_id", "=", "value"],
        "question": "Count the number of items store 1 has in stock.",
        "question_toks": ["Count", "the", "number", "of", "items", "store", "1", "has", "in", "stock", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 10]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 56, false], null], 1.0, null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "query_toks": ["SELECT", "payment_date", "FROM", "payment", "ORDER", "BY", "payment_date", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "payment_date", "from", "payment", "order", "by", "payment_date", "asc", "limit", "value"],
        "question": "When did the first payment happen?",
        "question_toks": ["When", "did", "the", "first", "payment", "happen", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 66, false], null]]],
            "select": [false, [[0, [0, [0, 66, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "query_toks": ["SELECT", "payment_date", "FROM", "payment", "ORDER", "BY", "payment_date", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "payment_date", "from", "payment", "order", "by", "payment_date", "asc", "limit", "value"],
        "question": "What was the date of the earliest payment?",
        "question_toks": ["What", "was", "the", "date", "of", "the", "earliest", "payment", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 66, false], null]]],
            "select": [false, [[0, [0, [0, 66, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "query_toks": ["SELECT", "T2.address", ",", "T1.email", "FROM", "customer", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T2.address_id", "=", "T1.address_id", "WHERE", "T1.first_name", "=", "'LINDA", "'"],
        "query_toks_no_value": ["select", "t2", ".", "address", ",", "t1", ".", "email", "from", "customer", "as", "t1", "join", "address", "as", "t2", "on", "t2", ".", "address_id", "=", "t1", ".", "address_id", "where", "t1", ".", "first_name", "=", "value"],
        "question": "Where does the customer with the first name Linda live? And what is her email?",
        "question_toks": ["Where", "does", "the", "customer", "with", "the", "first", "name", "Linda", "live", "?", "And", "what", "is", "her", "email", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 5, false], null], [0, 28, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 27, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 25, false], null], "\"LINDA\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "query_toks": ["SELECT", "T2.address", ",", "T1.email", "FROM", "customer", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T2.address_id", "=", "T1.address_id", "WHERE", "T1.first_name", "=", "'LINDA", "'"],
        "query_toks_no_value": ["select", "t2", ".", "address", ",", "t1", ".", "email", "from", "customer", "as", "t1", "join", "address", "as", "t2", "on", "t2", ".", "address_id", "=", "t1", ".", "address_id", "where", "t1", ".", "first_name", "=", "value"],
        "question": "Return the address and email of the customer with the first name Linda.",
        "question_toks": ["Return", "the", "address", "and", "email", "of", "the", "customer", "with", "the", "first", "name", "Linda", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 5, false], null], [0, 28, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 27, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 25, false], null], "\"LINDA\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "LENGTH", ">", "100", "OR", "rating", "=", "'PG", "'", "EXCEPT", "SELECT", "title", "FROM", "film", "WHERE", "replacement_cost", ">", "200"],
        "query_toks_no_value": ["select", "title", "from", "film", "where", "length", ">", "value", "or", "rating", "=", "value", "except", "select", "title", "from", "film", "where", "replacement_cost", ">", "value"],
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "question_toks": ["Find", "all", "the", "films", "longer", "than", "100", "minutes", ",", "or", "rated", "PG", ",", "except", "those", "who", "cost", "more", "than", "200", "for", "replacement", ".", "List", "the", "titles", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 6]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 33, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 41, false], null], 200.0, null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 40, false], null], 100.0, null], "or", [false, 2, [0, [0, 42, false], null], "\"PG\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "query_toks": ["SELECT", "title", "FROM", "film", "WHERE", "LENGTH", ">", "100", "OR", "rating", "=", "'PG", "'", "EXCEPT", "SELECT", "title", "FROM", "film", "WHERE", "replacement_cost", ">", "200"],
        "query_toks_no_value": ["select", "title", "from", "film", "where", "length", ">", "value", "or", "rating", "=", "value", "except", "select", "title", "from", "film", "where", "replacement_cost", ">", "value"],
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "question_toks": ["What", "are", "the", "titles", "of", "films", "that", "are", "either", "longer", "than", "100", "minutes", "or", "rated", "PG", "other", "than", "those", "that", "cost", "more", "than", "200", "to", "replace", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 6]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 33, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 41, false], null], 200.0, null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 40, false], null], 100.0, null], "or", [false, 2, [0, [0, 42, false], null], "\"PG\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "customer", "AS", "T1", "JOIN", "rental", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "ORDER", "BY", "T2.rental_date", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customer", "as", "t1", "join", "rental", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "order", "by", "t2", ".", "rental_date", "asc", "limit", "value"],
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "question_toks": ["What", "is", "the", "first", "name", "and", "the", "last", "name", "of", "the", "customer", "who", "made", "the", "earliest", "rental", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 23, false], null], [0, 71, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 13]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 69, false], null]]],
            "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "query_toks": ["SELECT", "T1.first_name", ",", "T1.last_name", "FROM", "customer", "AS", "T1", "JOIN", "rental", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "ORDER", "BY", "T2.rental_date", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "customer", "as", "t1", "join", "rental", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "order", "by", "t2", ".", "rental_date", "asc", "limit", "value"],
        "question": "Return the full name of the customer who made the first rental.",
        "question_toks": ["Return", "the", "full", "name", "of", "the", "customer", "who", "made", "the", "first", "rental", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 23, false], null], [0, 71, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 13]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 69, false], null]]],
            "select": [false, [[0, [0, [0, 25, false], null]], [0, [0, [0, 26, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
        "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.last_name", "FROM", "staff", "AS", "T1", "JOIN", "rental", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "JOIN", "customer", "AS", "T3", "ON", "T2.customer_id", "=", "T3.customer_id", "WHERE", "T3.first_name", "=", "'APRIL", "'", "AND", "T3.last_name", "=", "'BURNS", "'"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "staff", "as", "t1", "join", "rental", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "join", "customer", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t3", ".", "first_name", "=", "value", "and", "t3", ".", "last_name", "=", "value"],
        "question": "What is the full name of the staff member who has rented a film to a customer with the first name April and the last name Burns?",
        "question_toks": ["What", "is", "the", "full", "name", "of", "the", "staff", "member", "who", "has", "rented", "a", "film", "to", "a", "customer", "with", "the", "first", "name", "April", "and", "the", "last", "name", "Burns", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 75, false], null], [0, 73, false], null]],
                "table_units": [["table_unit", 14], ["table_unit", 13]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 76, false], null]], [0, [0, [0, 77, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 25, false], null], "\"APRIL\"", null], "and", [false, 2, [0, [0, 26, false], null], "\"BURNS\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT DISTINCT T1.first_name ,  T1.last_name FROM staff AS T1 JOIN rental AS T2 ON T1.staff_id  =  T2.staff_id JOIN customer AS T3 ON T2.customer_id  =  T3.customer_id WHERE T3.first_name  =  'APRIL' AND T3.last_name  =  'BURNS'",
        "query_toks": ["SELECT", "DISTINCT", "T1.first_name", ",", "T1.last_name", "FROM", "staff", "AS", "T1", "JOIN", "rental", "AS", "T2", "ON", "T1.staff_id", "=", "T2.staff_id", "JOIN", "customer", "AS", "T3", "ON", "T2.customer_id", "=", "T3.customer_id", "WHERE", "T3.first_name", "=", "'APRIL", "'", "AND", "T3.last_name", "=", "'BURNS", "'"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "first_name", ",", "t1", ".", "last_name", "from", "staff", "as", "t1", "join", "rental", "as", "t2", "on", "t1", ".", "staff_id", "=", "t2", ".", "staff_id", "join", "customer", "as", "t3", "on", "t2", ".", "customer_id", "=", "t3", ".", "customer_id", "where", "t3", ".", "first_name", "=", "value", "and", "t3", ".", "last_name", "=", "value"],
        "question": "Return the full name of the staff who provided a customer with the first name April and the last name Burns with a film rental.",
        "question_toks": ["Return", "the", "full", "name", "of", "the", "staff", "who", "provided", "a", "customer", "with", "the", "first", "name", "April", "and", "the", "last", "name", "Burns", "with", "a", "film", "rental", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 75, false], null], [0, 73, false], null]],
                "table_units": [["table_unit", 14], ["table_unit", 13]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 76, false], null]], [0, [0, [0, 77, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 25, false], null], "\"APRIL\"", null], "and", [false, 2, [0, [0, 26, false], null], "\"BURNS\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "store_id", "FROM", "customer", "GROUP", "BY", "store_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "store_id", "from", "customer", "group", "by", "store_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which store has most the customers?",
        "question_toks": ["Which", "store", "has", "most", "the", "customers", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [[0, 24, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 24, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT store_id FROM customer GROUP BY store_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "store_id", "FROM", "customer", "GROUP", "BY", "store_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "store_id", "from", "customer", "group", "by", "store_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Return the id of the store with the most customers.",
        "question_toks": ["Return", "the", "id", "of", "the", "store", "with", "the", "most", "customers", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [[0, 24, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 24, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "query_toks": ["SELECT", "amount", "FROM", "payment", "ORDER", "BY", "amount", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "amount", "from", "payment", "order", "by", "amount", "desc", "limit", "value"],
        "question": "What is the largest payment amount?",
        "question_toks": ["What", "is", "the", "largest", "payment", "amount", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 65, false], null]]],
            "select": [false, [[0, [0, [0, 65, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT amount FROM payment ORDER BY amount DESC LIMIT 1",
        "query_toks": ["SELECT", "amount", "FROM", "payment", "ORDER", "BY", "amount", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "amount", "from", "payment", "order", "by", "amount", "desc", "limit", "value"],
        "question": "Return the amount of the largest payment.",
        "question_toks": ["Return", "the", "amount", "of", "the", "largest", "payment", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 12]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 65, false], null]]],
            "select": [false, [[0, [0, [0, 65, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'",
        "query_toks": ["SELECT", "T2.address", "FROM", "staff", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.first_name", "=", "'Elsa", "'"],
        "query_toks_no_value": ["select", "t2", ".", "address", "from", "staff", "as", "t1", "join", "address", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "first_name", "=", "value"],
        "question": "Where does the staff member with the first name Elsa live?",
        "question_toks": ["Where", "does", "the", "staff", "member", "with", "the", "first", "name", "Elsa", "live", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 78, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 14], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 76, false], null], "\"Elsa\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT T2.address FROM staff AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE T1.first_name  =  'Elsa'",
        "query_toks": ["SELECT", "T2.address", "FROM", "staff", "AS", "T1", "JOIN", "address", "AS", "T2", "ON", "T1.address_id", "=", "T2.address_id", "WHERE", "T1.first_name", "=", "'Elsa", "'"],
        "query_toks_no_value": ["select", "t2", ".", "address", "from", "staff", "as", "t1", "join", "address", "as", "t2", "on", "t1", ".", "address_id", "=", "t2", ".", "address_id", "where", "t1", ".", "first_name", "=", "value"],
        "question": "Give the address of the staff member who has the first name Elsa.",
        "question_toks": ["Give", "the", "address", "of", "the", "staff", "member", "who", "has", "the", "first", "name", "Elsa", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 78, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 14], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 76, false], null], "\"Elsa\"", null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "query_toks": ["SELECT", "first_name", "FROM", "customer", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "rental", "WHERE", "rental_date", ">", "'2005-08-23", "02:06:01", "'", ")"],
        "query_toks_no_value": ["select", "first_name", "from", "customer", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "rental", "where", "rental_date", ">", "value", ")"],
        "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "customers", "who", "have", "not", "rented", "any", "films", "after", "'2005-08-23", "02:06:01", "'", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 25, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 23, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 13]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 71, false], null]]]],
                        "union": null,
                        "where": [[false, 3, [0, [0, 69, false], null], "\"2005-08-23 02:06:01\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "sakila_1",
        "query": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "query_toks": ["SELECT", "first_name", "FROM", "customer", "WHERE", "customer_id", "NOT", "IN", "(", "SELECT", "customer_id", "FROM", "rental", "WHERE", "rental_date", ">", "'2005-08-23", "02:06:01", "'", ")"],
        "query_toks_no_value": ["select", "first_name", "from", "customer", "where", "customer_id", "not", "in", "(", "select", "customer_id", "from", "rental", "where", "rental_date", ">", "value", ")"],
        "question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.",
        "question_toks": ["Return", "the", "first", "names", "of", "customers", "who", "did", "not", "rented", "a", "film", "after", "the", "date", "'2005-08-23", "02:06:01", "'", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 25, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 23, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 13]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 71, false], null]]]],
                        "union": null,
                        "where": [[false, 3, [0, [0, 69, false], null], "\"2005-08-23 02:06:01\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT count(*) FROM bank",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "bank"],
        "question": "How many bank branches are there?",
        "question_toks": ["How", "many", "bank", "branches", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT count(*) FROM bank",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "bank"],
        "question": "Count the number of bank branches.",
        "question_toks": ["Count", "the", "number", "of", "bank", "branches", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(no_of_customers) FROM bank",
        "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank"],
        "question": "How many customers are there?",
        "question_toks": ["How", "many", "customers", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(no_of_customers) FROM bank",
        "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank"],
        "question": "What is the total number of customers across banks?",
        "question_toks": ["What", "is", "the", "total", "number", "of", "customers", "across", "banks", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "city", "=", "'New", "York", "City", "'"],
        "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank", "where", "city", "=", "value"],
        "question": "Find the number of customers in the banks at New York City.",
        "question_toks": ["Find", "the", "number", "of", "customers", "in", "the", "banks", "at", "New", "York", "City", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"New York City\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "query_toks": ["SELECT", "sum", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "city", "=", "'New", "York", "City", "'"],
        "query_toks_no_value": ["select", "sum", "(", "no_of_customers", ")", "from", "bank", "where", "city", "=", "value"],
        "question": "What is the total number of customers who use banks in New York City?",
        "question_toks": ["What", "is", "the", "total", "number", "of", "customers", "who", "use", "banks", "in", "New", "York", "City", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], "\"New York City\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "state", "=", "'Utah", "'"],
        "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank", "where", "state", "=", "value"],
        "question": "Find the average number of customers in all banks of Utah state.",
        "question_toks": ["Find", "the", "average", "number", "of", "customers", "in", "all", "banks", "of", "Utah", "state", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Utah\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank", "WHERE", "state", "=", "'Utah", "'"],
        "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank", "where", "state", "=", "value"],
        "question": "What is the average number of customers across banks in the state of Utah?",
        "question_toks": ["What", "is", "the", "average", "number", "of", "customers", "across", "banks", "in", "the", "state", "of", "Utah", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Utah\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(no_of_customers) FROM bank",
        "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank"],
        "question": "Find the average number of customers cross all banks.",
        "question_toks": ["Find", "the", "average", "number", "of", "customers", "cross", "all", "banks", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(no_of_customers) FROM bank",
        "query_toks": ["SELECT", "avg", "(", "no_of_customers", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "avg", "(", "no_of_customers", ")", "from", "bank"],
        "question": "What is the average number of bank customers?",
        "question_toks": ["What", "is", "the", "average", "number", "of", "bank", "customers", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
        "query_toks": ["SELECT", "city", ",", "state", "FROM", "bank", "WHERE", "bname", "=", "'morningside", "'"],
        "query_toks_no_value": ["select", "city", ",", "state", "from", "bank", "where", "bname", "=", "value"],
        "question": "Find the city and state of the bank branch named morningside.",
        "question_toks": ["Find", "the", "city", "and", "state", "of", "the", "bank", "branch", "named", "morningside", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"morningside\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT city ,  state FROM bank WHERE bname  =  'morningside'",
        "query_toks": ["SELECT", "city", ",", "state", "FROM", "bank", "WHERE", "bname", "=", "'morningside", "'"],
        "query_toks_no_value": ["select", "city", ",", "state", "from", "bank", "where", "bname", "=", "value"],
        "question": "What city and state is the bank with the name morningside in?",
        "question_toks": ["What", "city", "and", "state", "is", "the", "bank", "with", "the", "name", "morningside", "in", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"morningside\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT bname FROM bank WHERE state  =  'New York'",
        "query_toks": ["SELECT", "bname", "FROM", "bank", "WHERE", "state", "=", "'New", "York", "'"],
        "query_toks_no_value": ["select", "bname", "from", "bank", "where", "state", "=", "value"],
        "question": "Find the branch names of banks in the New York state.",
        "question_toks": ["Find", "the", "branch", "names", "of", "banks", "in", "the", "New", "York", "state", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"New York\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT bname FROM bank WHERE state  =  'New York'",
        "query_toks": ["SELECT", "bname", "FROM", "bank", "WHERE", "state", "=", "'New", "York", "'"],
        "query_toks_no_value": ["select", "bname", "from", "bank", "where", "state", "=", "value"],
        "question": "What are the names of banks in the state of New York?",
        "question_toks": ["What", "are", "the", "names", "of", "banks", "in", "the", "state", "of", "New", "York", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"New York\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "acc_bal"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "acc_bal"],
        "question": "List the name of all customers sorted by their account balance in ascending order.",
        "question_toks": ["List", "the", "name", "of", "all", "customers", "sorted", "by", "their", "account", "balance", "in", "ascending", "order", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "acc_bal"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "acc_bal"],
        "question": "What are the names of all customers, ordered by account balance?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "customers", ",", "ordered", "by", "account", "balance", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")"],
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "question_toks": ["List", "the", "name", "of", "all", "different", "customers", "who", "have", "some", "loan", "sorted", "by", "their", "total", "loan", "amount", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [4, 18, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")"],
        "question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "different", "customers", "who", "have", "taken", "out", "a", "loan", ",", "ordered", "by", "the", "total", "amount", "that", "they", "have", "taken", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [4, 18, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query_toks": ["SELECT", "state", ",", "acc_type", ",", "credit_score", "FROM", "customer", "WHERE", "no_of_loans", "=", "0"],
        "query_toks_no_value": ["select", "state", ",", "acc_type", ",", "credit_score", "from", "customer", "where", "no_of_loans", "=", "value"],
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "question_toks": ["Find", "the", "state", ",", "account", "type", ",", "and", "credit", "score", "of", "the", "customer", "whose", "number", "of", "loan", "is", "0", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 8, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 10, false], null], 0.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "query_toks": ["SELECT", "state", ",", "acc_type", ",", "credit_score", "FROM", "customer", "WHERE", "no_of_loans", "=", "0"],
        "query_toks_no_value": ["select", "state", ",", "acc_type", ",", "credit_score", "from", "customer", "where", "no_of_loans", "=", "value"],
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "question_toks": ["What", "are", "the", "states", ",", "account", "types", ",", "and", "credit", "scores", "for", "customers", "who", "have", "0", "loans", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 8, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 10, false], null], 0.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT count(DISTINCT city) FROM bank",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "bank"],
        "question": "Find the number of different cities which banks are located at.",
        "question_toks": ["Find", "the", "number", "of", "different", "cities", "which", "banks", "are", "located", "at", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 4, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT count(DISTINCT city) FROM bank",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "bank"],
        "question": "In how many different cities are banks located?",
        "question_toks": ["In", "how", "many", "different", "cities", "are", "banks", "located", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 4, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT count(DISTINCT state) FROM bank",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "bank"],
        "question": "Find the number of different states which banks are located at.",
        "question_toks": ["Find", "the", "number", "of", "different", "states", "which", "banks", "are", "located", "at", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 5, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT count(DISTINCT state) FROM bank",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "state", ")", "FROM", "bank"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "state", ")", "from", "bank"],
        "question": "In how many different states are banks located?",
        "question_toks": ["In", "how", "many", "different", "states", "are", "banks", "located", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 5, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT count(DISTINCT acc_type) FROM customer",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "acc_type", ")", "FROM", "customer"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "acc_type", ")", "from", "customer"],
        "question": "How many distinct types of accounts are there?",
        "question_toks": ["How", "many", "distinct", "types", "of", "accounts", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 8, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT count(DISTINCT acc_type) FROM customer",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "acc_type", ")", "FROM", "customer"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "acc_type", ")", "from", "customer"],
        "question": "Count the number of different account types.",
        "question_toks": ["Count", "the", "number", "of", "different", "account", "types", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 8, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "query_toks": ["SELECT", "cust_name", ",", "acc_bal", "FROM", "customer", "WHERE", "cust_name", "LIKE", "'", "%", "a", "%", "'"],
        "query_toks_no_value": ["select", "cust_name", ",", "acc_bal", "from", "customer", "where", "cust_name", "like", "value"],
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "question_toks": ["Find", "the", "name", "and", "account", "balance", "of", "the", "customer", "whose", "name", "includes", "the", "letter", "\u2018a\u2019", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 7, false], null], "\"%a%\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "query_toks": ["SELECT", "cust_name", ",", "acc_bal", "FROM", "customer", "WHERE", "cust_name", "LIKE", "'", "%", "a", "%", "'"],
        "query_toks_no_value": ["select", "cust_name", ",", "acc_bal", "from", "customer", "where", "cust_name", "like", "value"],
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "question_toks": ["What", "are", "the", "names", "and", "account", "balances", "of", "customers", "with", "the", "letter", "a", "in", "their", "names", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 7, false], null], "\"%a%\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", "FROM", "customer", "WHERE", "state", "=", "'Utah", "'", "OR", "state", "=", "'Texas", "'"],
        "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", "from", "customer", "where", "state", "=", "value", "or", "state", "=", "value"],
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "question_toks": ["Find", "the", "total", "account", "balance", "of", "each", "customer", "from", "Utah", "or", "Texas", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 13, false], null], "\"Utah\"", null], "or", [false, 2, [0, [0, 13, false], null], "\"Texas\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", "FROM", "customer", "WHERE", "state", "=", "'Utah", "'", "OR", "state", "=", "'Texas", "'"],
        "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", "from", "customer", "where", "state", "=", "value", "or", "state", "=", "value"],
        "question": "What are the total account balances for each customer from Utah or Texas?",
        "question_toks": ["What", "are", "the", "total", "account", "balances", "for", "each", "customer", "from", "Utah", "or", "Texas", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 13, false], null], "\"Utah\"", null], "or", [false, 2, [0, [0, 13, false], null], "\"Texas\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'", "INTERSECT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'checking", "'"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "acc_type", "=", "value", "intersect", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"],
        "question": "Find the name of customers who have both saving and checking account types.",
        "question_toks": ["Find", "the", "name", "of", "customers", "who", "have", "both", "saving", "and", "checking", "account", "types", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 8, false], null], "\"checking\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"saving\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer WHERE acc_type  =  'saving' INTERSECT SELECT cust_name FROM customer WHERE acc_type  =  'checking'",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'", "INTERSECT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'checking", "'"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "acc_type", "=", "value", "intersect", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"],
        "question": "What are the names of customers who have both savings and checking accounts?",
        "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "both", "savings", "and", "checking", "accounts", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 8, false], null], "\"checking\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"saving\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"],
        "question": "Find the name of customers who do not have an saving account.",
        "question_toks": ["Find", "the", "name", "of", "customers", "who", "do", "not", "have", "an", "saving", "account", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 8, false], null], "\"saving\"", null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "cust_name", "FROM", "customer", "WHERE", "acc_type", "=", "'saving", "'"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "cust_name", "from", "customer", "where", "acc_type", "=", "value"],
        "question": "What are the names of customers who do not have saving accounts?",
        "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "do", "not", "have", "saving", "accounts", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 8, false], null], "\"saving\"", null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "T2.loan_type", "=", "'Mortgages", "'"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "t2", ".", "loan_type", "=", "value"],
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "question_toks": ["Find", "the", "name", "of", "customers", "who", "do", "not", "have", "a", "loan", "with", "a", "type", "of", "Mortgages", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 15, false], null], "\"Mortgages\"", null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "EXCEPT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "T2.loan_type", "=", "'Mortgages", "'"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "except", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "t2", ".", "loan_type", "=", "value"],
        "question": "What are the names of customers who have not taken a Mortage loan?",
        "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "not", "taken", "a", "Mortage", "loan", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 15, false], null], "\"Mortgages\"", null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Mortgages", "'", "INTERSECT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Auto", "'"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value", "intersect", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value"],
        "question": "Find the name of customers who have loans of both Mortgages and Auto.",
        "question_toks": ["Find", "the", "name", "of", "customers", "who", "have", "loans", "of", "both", "Mortgages", "and", "Auto", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 15, false], null], "\"Auto\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 15, false], null], "\"Mortgages\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Mortgages", "'", "INTERSECT", "SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "loan_type", "=", "'Auto", "'"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value", "intersect", "select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "loan_type", "=", "value"],
        "question": "What are the names of customers who have taken both Mortgage and Auto loans?",
        "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "taken", "both", "Mortgage", "and", "Auto", "loans", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 15, false], null], "\"Auto\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 15, false], null], "\"Mortgages\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "credit_score", "<", "(", "SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", ")"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "credit_score", "<", "(", "select", "avg", "(", "credit_score", ")", "from", "customer", ")"],
        "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "question_toks": ["Find", "the", "name", "of", "customers", "whose", "credit", "score", "is", "below", "the", "average", "credit", "scores", "of", "all", "customers", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 11, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 11, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer WHERE credit_score  <  (SELECT avg(credit_score) FROM customer)",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "WHERE", "credit_score", "<", "(", "SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", ")"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "where", "credit_score", "<", "(", "select", "avg", "(", "credit_score", ")", "from", "customer", ")"],
        "question": "What are the names of customers with credit score less than the average credit score across customers?",
        "question_toks": ["What", "are", "the", "names", "of", "customers", "with", "credit", "score", "less", "than", "the", "average", "credit", "score", "across", "customers", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 11, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 11, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "query_toks": ["SELECT", "bname", "FROM", "bank", "ORDER", "BY", "no_of_customers", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "bname", "from", "bank", "order", "by", "no_of_customers", "desc", "limit", "value"],
        "question": "Find the branch name of the bank that has the most number of customers.",
        "question_toks": ["Find", "the", "branch", "name", "of", "the", "bank", "that", "has", "the", "most", "number", "of", "customers", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 3, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "query_toks": ["SELECT", "bname", "FROM", "bank", "ORDER", "BY", "no_of_customers", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "bname", "from", "bank", "order", "by", "no_of_customers", "desc", "limit", "value"],
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "bank", "branch", "with", "the", "greatest", "number", "of", "customers", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 3, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "credit_score", "LIMIT", "1"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "credit_score", "limit", "value"],
        "question": "Find the name of customer who has the lowest credit score.",
        "question_toks": ["Find", "the", "name", "of", "customer", "who", "has", "the", "lowest", "credit", "score", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "query_toks": ["SELECT", "cust_name", "FROM", "customer", "ORDER", "BY", "credit_score", "LIMIT", "1"],
        "query_toks_no_value": ["select", "cust_name", "from", "customer", "order", "by", "credit_score", "limit", "value"],
        "question": "What is the name of the customer with the worst credit score?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "with", "the", "worst", "credit", "score", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "query_toks": ["SELECT", "cust_name", ",", "acc_type", ",", "acc_bal", "FROM", "customer", "ORDER", "BY", "credit_score", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "cust_name", ",", "acc_type", ",", "acc_bal", "from", "customer", "order", "by", "credit_score", "desc", "limit", "value"],
        "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "question_toks": ["Find", "the", "name", ",", "account", "type", ",", "and", "account", "balance", "of", "the", "customer", "who", "has", "the", "highest", "credit", "score", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT cust_name ,  acc_type ,  acc_bal FROM customer ORDER BY credit_score DESC LIMIT 1",
        "query_toks": ["SELECT", "cust_name", ",", "acc_type", ",", "acc_bal", "FROM", "customer", "ORDER", "BY", "credit_score", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "cust_name", ",", "acc_type", ",", "acc_bal", "from", "customer", "order", "by", "credit_score", "desc", "limit", "value"],
        "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
        "question_toks": ["What", "is", "the", "name", ",", "account", "type", ",", "and", "account", "balance", "corresponding", "to", "the", "customer", "with", "the", "highest", "credit", "score", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"],
        "question": "Find the name of customer who has the highest amount of loans.",
        "question_toks": ["Find", "the", "name", "of", "customer", "who", "has", "the", "highest", "amount", "of", "loans", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 18, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"],
        "question": "What is the name of the customer who has greatest total loan amount?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "greatest", "total", "loan", "amount", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 18, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "query_toks": ["SELECT", "state", "FROM", "bank", "GROUP", "BY", "state", "ORDER", "BY", "sum", "(", "no_of_customers", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "state", "from", "bank", "group", "by", "state", "order", "by", "sum", "(", "no_of_customers", ")", "desc", "limit", "value"],
        "question": "Find the state which has the most number of customers.",
        "question_toks": ["Find", "the", "state", "which", "has", "the", "most", "number", "of", "customers", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 3, false], null]]],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "query_toks": ["SELECT", "state", "FROM", "bank", "GROUP", "BY", "state", "ORDER", "BY", "sum", "(", "no_of_customers", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "state", "from", "bank", "group", "by", "state", "order", "by", "sum", "(", "no_of_customers", ")", "desc", "limit", "value"],
        "question": "Which state has the greatest total number of bank customers?",
        "question_toks": ["Which", "state", "has", "the", "greatest", "total", "number", "of", "bank", "customers", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 3, false], null]]],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "query_toks": ["SELECT", "avg", "(", "acc_bal", ")", ",", "acc_type", "FROM", "customer", "WHERE", "credit_score", "<", "50", "GROUP", "BY", "acc_type"],
        "query_toks_no_value": ["select", "avg", "(", "acc_bal", ")", ",", "acc_type", "from", "customer", "where", "credit_score", "<", "value", "group", "by", "acc_type"],
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "question_toks": ["For", "each", "account", "type", ",", "find", "the", "average", "account", "balance", "of", "customers", "with", "credit", "score", "lower", "than", "50", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 9, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 11, false], null], 50.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "query_toks": ["SELECT", "avg", "(", "acc_bal", ")", ",", "acc_type", "FROM", "customer", "WHERE", "credit_score", "<", "50", "GROUP", "BY", "acc_type"],
        "query_toks_no_value": ["select", "avg", "(", "acc_bal", ")", ",", "acc_type", "from", "customer", "where", "credit_score", "<", "value", "group", "by", "acc_type"],
        "question": "What is the average account balance of customers with credit score below 50 for the different account types?",
        "question_toks": ["What", "is", "the", "average", "account", "balance", "of", "customers", "with", "credit", "score", "below", "50", "for", "the", "different", "account", "types", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 9, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 11, false], null], 50.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", ",", "state", "FROM", "customer", "WHERE", "credit_score", ">", "100", "GROUP", "BY", "state"],
        "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", ",", "state", "from", "customer", "where", "credit_score", ">", "value", "group", "by", "state"],
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "question_toks": ["For", "each", "state", ",", "find", "the", "total", "account", "balance", "of", "customers", "whose", "credit", "score", "is", "above", "100", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 9, false], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 100.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "query_toks": ["SELECT", "sum", "(", "acc_bal", ")", ",", "state", "FROM", "customer", "WHERE", "credit_score", ">", "100", "GROUP", "BY", "state"],
        "query_toks_no_value": ["select", "sum", "(", "acc_bal", ")", ",", "state", "from", "customer", "where", "credit_score", ">", "value", "group", "by", "state"],
        "question": "What is the total account balance for customers with a credit score of above 100 for the different states?",
        "question_toks": ["What", "is", "the", "total", "account", "balance", "for", "customers", "with", "a", "credit", "score", "of", "above", "100", "for", "the", "different", "states", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 9, false], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 11, false], null], 100.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "query_toks": ["SELECT", "sum", "(", "amount", ")", ",", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname"],
        "query_toks_no_value": ["select", "sum", "(", "amount", ")", ",", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname"],
        "question": "Find the total amount of loans offered by each bank branch.",
        "question_toks": ["Find", "the", "total", "amount", "of", "loans", "offered", "by", "each", "bank", "branch", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 18, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "query_toks": ["SELECT", "sum", "(", "amount", ")", ",", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname"],
        "query_toks_no_value": ["select", "sum", "(", "amount", ")", ",", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname"],
        "question": "What are the names of the different bank branches, and what are their total loan amounts?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "different", "bank", "branches", ",", "and", "what", "are", "their", "total", "loan", "amounts", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 18, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Find the name of customers who have more than one loan.",
        "question_toks": ["Find", "the", "name", "of", "customers", "who", "have", "more", "than", "one", "loan", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 7, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "count", "(", "*", ")", ">", "value"],
        "question": "What are the names of customers who have taken out more than one loan?",
        "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "taken", "out", "more", "than", "one", "loan", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 7, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query_toks": ["SELECT", "T1.cust_name", ",", "T1.acc_type", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "sum", "(", "T2.amount", ")", ">", "5000"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", ",", "t1", ".", "acc_type", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "sum", "(", "t2", ".", "amount", ")", ">", "value"],
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "question_toks": ["Find", "the", "name", "and", "account", "balance", "of", "the", "customers", "who", "have", "loans", "with", "a", "total", "amount", "of", "more", "than", "5000", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 7, false]],
            "having": [[false, 3, [0, [4, 18, false], null], 5000.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "query_toks": ["SELECT", "T1.cust_name", ",", "T1.acc_type", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "GROUP", "BY", "T1.cust_name", "HAVING", "sum", "(", "T2.amount", ")", ">", "5000"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", ",", "t1", ".", "acc_type", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "group", "by", "t1", ".", "cust_name", "having", "sum", "(", "t2", ".", "amount", ")", ">", "value"],
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "question_toks": ["What", "are", "the", "names", "and", "account", "balances", "for", "customers", "who", "have", "taken", "a", "total", "amount", "of", "more", "than", "5000", "in", "loans", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 7, false]],
            "having": [[false, 3, [0, [4, 18, false], null], 5000.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"],
        "question": "Find the name of bank branch that provided the greatest total amount of loans.",
        "question_toks": ["Find", "the", "name", "of", "bank", "branch", "that", "provided", "the", "greatest", "total", "amount", "of", "loans", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 18, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname ORDER BY sum(T2.amount) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "GROUP", "BY", "T1.bname", "ORDER", "BY", "sum", "(", "T2.amount", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "group", "by", "t1", ".", "bname", "order", "by", "sum", "(", "t2", ".", "amount", ")", "desc", "limit", "value"],
        "question": "What is the name of the bank branch that has lent the greatest amount?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "bank", "branch", "that", "has", "lent", "the", "greatest", "amount", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 18, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100", "GROUP", "BY", "T2.bname", "ORDER", "BY", "sum", "(", "T1.amount", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value", "group", "by", "t2", ".", "bname", "order", "by", "sum", "(", "t1", ".", "amount", ")", "desc", "limit", "value"],
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "question_toks": ["Find", "the", "name", "of", "bank", "branch", "that", "provided", "the", "greatest", "total", "amount", "of", "loans", "to", "customers", "with", "credit", "score", "is", "less", "than", "100", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 18, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 11, false], null], 100.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100 GROUP BY T2.bname ORDER BY sum(T1.amount) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100", "GROUP", "BY", "T2.bname", "ORDER", "BY", "sum", "(", "T1.amount", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value", "group", "by", "t2", ".", "bname", "order", "by", "sum", "(", "t1", ".", "amount", ")", "desc", "limit", "value"],
        "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "bank", "branch", "that", "has", "lended", "the", "largest", "total", "amount", "in", "loans", ",", "specifically", "to", "customers", "with", "credit", "scores", "below", "100", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 18, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 11, false], null], 100.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "query_toks": ["SELECT", "DISTINCT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id"],
        "question": "Find the name of bank branches that provided some loans.",
        "question_toks": ["Find", "the", "name", "of", "bank", "branches", "that", "provided", "some", "loans", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "query_toks": ["SELECT", "DISTINCT", "T1.bname", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "bname", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id"],
        "question": "What are the names of the different banks that have provided loans?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "different", "banks", "that", "have", "provided", "loans", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "query_toks": ["SELECT", "DISTINCT", "T1.cust_name", ",", "T1.credit_score", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "cust_name", ",", "t1", ".", "credit_score", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id"],
        "question": "Find the name and credit score of the customers who have some loans.",
        "question_toks": ["Find", "the", "name", "and", "credit", "score", "of", "the", "customers", "who", "have", "some", "loans", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 7, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "query_toks": ["SELECT", "DISTINCT", "T1.cust_name", ",", "T1.credit_score", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "cust_name", ",", "t1", ".", "credit_score", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id"],
        "question": "What are the different names and credit scores of customers who have taken a loan?",
        "question_toks": ["What", "are", "the", "different", "names", "and", "credit", "scores", "of", "customers", "who", "have", "taken", "a", "loan", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 7, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "amount", ">", "3000"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "amount", ">", "value"],
        "question": "Find the the name of the customers who have a loan with amount more than 3000.",
        "question_toks": ["Find", "the", "the", "name", "of", "the", "customers", "who", "have", "a", "loan", "with", "amount", "more", "than", "3000", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 18, false], null], 3000.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE amount  >  3000",
        "query_toks": ["SELECT", "T1.cust_name", "FROM", "customer", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.cust_id", "=", "T2.cust_id", "WHERE", "amount", ">", "3000"],
        "query_toks_no_value": ["select", "t1", ".", "cust_name", "from", "customer", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "cust_id", "=", "t2", ".", "cust_id", "where", "amount", ">", "value"],
        "question": "What are the names of customers who have a loan of more than 3000 in amount?",
        "question_toks": ["What", "are", "the", "names", "of", "customers", "who", "have", "a", "loan", "of", "more", "than", "3000", "in", "amount", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 18, false], null], 3000.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "query_toks": ["SELECT", "T1.bname", ",", "T1.city", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T2.loan_type", "=", "'Business", "'"],
        "query_toks_no_value": ["select", "t1", ".", "bname", ",", "t1", ".", "city", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t2", ".", "loan_type", "=", "value"],
        "question": "Find the city and name of bank branches that provide business loans.",
        "question_toks": ["Find", "the", "city", "and", "name", "of", "bank", "branches", "that", "provide", "business", "loans", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 15, false], null], "\"Business\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "query_toks": ["SELECT", "T1.bname", ",", "T1.city", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T2.loan_type", "=", "'Business", "'"],
        "query_toks_no_value": ["select", "t1", ".", "bname", ",", "t1", ".", "city", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t2", ".", "loan_type", "=", "value"],
        "question": "What are the names and cities of bank branches that offer loans for business?",
        "question_toks": ["What", "are", "the", "names", "and", "cities", "of", "bank", "branches", "that", "offer", "loans", "for", "business", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 15, false], null], "\"Business\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100"],
        "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value"],
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "question_toks": ["Find", "the", "names", "of", "bank", "branches", "that", "have", "provided", "a", "loan", "to", "any", "customer", "whose", "credit", "score", "is", "below", "100", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 11, false], null], 100.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "query_toks": ["SELECT", "T2.bname", "FROM", "loan", "AS", "T1", "JOIN", "bank", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "JOIN", "customer", "AS", "T3", "ON", "T1.cust_id", "=", "T3.cust_id", "WHERE", "T3.credit_score", "<", "100"],
        "query_toks_no_value": ["select", "t2", ".", "bname", "from", "loan", "as", "t1", "join", "bank", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "join", "customer", "as", "t3", "on", "t1", ".", "cust_id", "=", "t3", ".", "cust_id", "where", "t3", ".", "credit_score", "<", "value"],
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "question_toks": ["What", "are", "the", "names", "of", "banks", "that", "have", "loaned", "money", "to", "customers", "with", "credit", "scores", "below", "100", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 11, false], null], 100.0, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "query_toks": ["SELECT", "sum", "(", "T2.amount", ")", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.state", "=", "'New", "York", "'"],
        "query_toks_no_value": ["select", "sum", "(", "t2", ".", "amount", ")", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "state", "=", "value"],
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "question_toks": ["Find", "the", "total", "amount", "of", "loans", "provided", "by", "bank", "branches", "in", "the", "state", "of", "New", "York", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 18, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"New York\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "query_toks": ["SELECT", "sum", "(", "T2.amount", ")", "FROM", "bank", "AS", "T1", "JOIN", "loan", "AS", "T2", "ON", "T1.branch_id", "=", "T2.branch_id", "WHERE", "T1.state", "=", "'New", "York", "'"],
        "query_toks_no_value": ["select", "sum", "(", "t2", ".", "amount", ")", "from", "bank", "as", "t1", "join", "loan", "as", "t2", "on", "t1", ".", "branch_id", "=", "t2", ".", "branch_id", "where", "t1", ".", "state", "=", "value"],
        "question": "What is the total amount of money loaned by banks in New York state?",
        "question_toks": ["What", "is", "the", "total", "amount", "of", "money", "loaned", "by", "banks", "in", "New", "York", "state", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 18, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"New York\"", null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"],
        "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "in", "(", "select", "cust_id", "from", "loan", ")"],
        "question": "Find the average credit score of the customers who have some loan.",
        "question_toks": ["Find", "the", "average", "credit", "score", "of", "the", "customers", "who", "have", "some", "loan", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 8, [0, [0, 6, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 16, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"],
        "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "in", "(", "select", "cust_id", "from", "loan", ")"],
        "question": "What is the average credit score for customers who have taken a loan?",
        "question_toks": ["What", "is", "the", "average", "credit", "score", "for", "customers", "who", "have", "taken", "a", "loan", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 8, [0, [0, 6, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 16, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "NOT", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"],
        "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "not", "in", "(", "select", "cust_id", "from", "loan", ")"],
        "question": "Find the average credit score of the customers who do not have any loan.",
        "question_toks": ["Find", "the", "average", "credit", "score", "of", "the", "customers", "who", "do", "not", "have", "any", "loan", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 6, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 16, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "loan_1",
        "query": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "query_toks": ["SELECT", "avg", "(", "credit_score", ")", "FROM", "customer", "WHERE", "cust_id", "NOT", "IN", "(", "SELECT", "cust_id", "FROM", "loan", ")"],
        "query_toks_no_value": ["select", "avg", "(", "credit_score", ")", "from", "customer", "where", "cust_id", "not", "in", "(", "select", "cust_id", "from", "loan", ")"],
        "question": "What is the average credit score for customers who have never taken a loan?",
        "question_toks": ["What", "is", "the", "average", "credit", "score", "for", "customers", "who", "have", "never", "taken", "a", "loan", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 6, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 16, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "DEPT_NAME", "=", "``", "Accounting", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"],
        "question": "Find the number of professors in accounting department.",
        "question_toks": ["Find", "the", "number", "of", "professors", "in", "accounting", "department", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE DEPT_NAME  =  \"Accounting\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "DEPT_NAME", "=", "``", "Accounting", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"],
        "question": "How many professors are in the accounting dept?",
        "question_toks": ["How", "many", "professors", "are", "in", "the", "accounting", "dept", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "PROF_NUM", ")", "FROM", "CLASS", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "prof_num", ")", "from", "class", "where", "crs_code", "=", "value"],
        "question": "How many professors are teaching class with code ACCT-211?",
        "question_toks": ["How", "many", "professors", "are", "teaching", "class", "with", "code", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 6, true], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT PROF_NUM) FROM CLASS WHERE CRS_CODE  =  \"ACCT-211\"",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "PROF_NUM", ")", "FROM", "CLASS", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "prof_num", ")", "from", "class", "where", "crs_code", "=", "value"],
        "question": "How many professors teach a class with the code ACCT-211?",
        "question_toks": ["How", "many", "professors", "teach", "a", "class", "with", "the", "code", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 6, true], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"",
        "query_toks": ["SELECT", "T3.EMP_FNAME", ",", "T3.EMP_LNAME", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "JOIN", "employee", "AS", "T3", "ON", "T1.EMP_NUM", "=", "T3.EMP_NUM", "WHERE", "DEPT_NAME", "=", "``", "Biology", "''"],
        "query_toks_no_value": ["select", "t3", ".", "emp_fname", ",", "t3", ".", "emp_lname", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "join", "employee", "as", "t3", "on", "t1", ".", "emp_num", "=", "t3", ".", "emp_num", "where", "dept_name", "=", "value"],
        "question": "What is the first and last name of the professor in biology department?",
        "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "professor", "in", "biology", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Biology\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.EMP_FNAME ,  T3.EMP_LNAME FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code JOIN employee AS T3 ON T1.EMP_NUM  =  T3.EMP_NUM WHERE DEPT_NAME  =  \"Biology\"",
        "query_toks": ["SELECT", "T3.EMP_FNAME", ",", "T3.EMP_LNAME", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "JOIN", "employee", "AS", "T3", "ON", "T1.EMP_NUM", "=", "T3.EMP_NUM", "WHERE", "DEPT_NAME", "=", "``", "Biology", "''"],
        "query_toks_no_value": ["select", "t3", ".", "emp_fname", ",", "t3", ".", "emp_lname", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "join", "employee", "as", "t3", "on", "t1", ".", "emp_num", "=", "t3", ".", "emp_num", "where", "dept_name", "=", "value"],
        "question": "What are the first and last name of all biology professors?",
        "question_toks": ["What", "are", "the", "first", "and", "last", "name", "of", "all", "biology", "professors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Biology\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.EMP_FNAME", ",", "T1.EMP_DOB", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "emp_fname", ",", "t1", ".", "emp_dob", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"],
        "question": "What are the first names and date of birth of professors teaching course ACCT-211?",
        "question_toks": ["What", "are", "the", "first", "names", "and", "date", "of", "birth", "of", "professors", "teaching", "course", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 19, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT DISTINCT T1.EMP_FNAME ,  T1.EMP_DOB FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE CRS_CODE  =  \"ACCT-211\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.EMP_FNAME", ",", "T1.EMP_DOB", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "CRS_CODE", "=", "``", "ACCT-211", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "emp_fname", ",", "t1", ".", "emp_dob", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"],
        "question": "What are the first names and birthdates of the professors in charge of ACCT-211?",
        "question_toks": ["What", "are", "the", "first", "names", "and", "birthdates", "of", "the", "professors", "in", "charge", "of", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 19, false], null]], [0, [0, [0, 23, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "T1.EMP_LNAME", "=", "'Graztevski", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "t1", ".", "emp_lname", "=", "value"],
        "question": "How many classes are professor whose last name is Graztevski has?",
        "question_toks": ["How", "many", "classes", "are", "professor", "whose", "last", "name", "is", "Graztevski", "has", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Graztevski\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM employee AS T1 JOIN CLASS AS T2 ON T1.EMP_NUM  =  T2.PROF_NUM WHERE T1.EMP_LNAME  =  'Graztevski'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.EMP_NUM", "=", "T2.PROF_NUM", "WHERE", "T1.EMP_LNAME", "=", "'Graztevski", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "t1", ".", "emp_lname", "=", "value"],
        "question": "How many classes does the professor whose last name is Graztevski teach?",
        "question_toks": ["How", "many", "classes", "does", "the", "professor", "whose", "last", "name", "is", "Graztevski", "teach", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Graztevski\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"",
        "query_toks": ["SELECT", "school_code", "FROM", "department", "WHERE", "dept_name", "=", "``", "Accounting", "''"],
        "query_toks_no_value": ["select", "school_code", "from", "department", "where", "dept_name", "=", "value"],
        "question": "What is the code of the school where the accounting department belongs to?",
        "question_toks": ["What", "is", "the", "code", "of", "the", "school", "where", "the", "accounting", "department", "belongs", "to", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT school_code FROM department WHERE dept_name  =  \"Accounting\"",
        "query_toks": ["SELECT", "school_code", "FROM", "department", "WHERE", "dept_name", "=", "``", "Accounting", "''"],
        "query_toks_no_value": ["select", "school_code", "from", "department", "where", "dept_name", "=", "value"],
        "question": "What is the school code of the accounting department?",
        "question_toks": ["What", "is", "the", "school", "code", "of", "the", "accounting", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'",
        "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'CIS-220", "'"],
        "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"],
        "question": "How many credits does course CIS-220 have, and what its description?",
        "question_toks": ["How", "many", "credits", "does", "course", "CIS-220", "have", ",", "and", "what", "its", "description", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 7, false], null], "\"CIS-220\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'CIS-220'",
        "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'CIS-220", "'"],
        "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"],
        "question": "What is the description for the CIS-220 and how many credits does it have?",
        "question_toks": ["What", "is", "the", "description", "for", "the", "CIS-220", "and", "how", "many", "credits", "does", "it", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 7, false], null], "\"CIS-220\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'",
        "query_toks": ["SELECT", "dept_address", "FROM", "department", "WHERE", "dept_name", "=", "'History", "'"],
        "query_toks_no_value": ["select", "dept_address", "from", "department", "where", "dept_name", "=", "value"],
        "question": "what is the address of history department?",
        "question_toks": ["what", "is", "the", "address", "of", "history", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT dept_address FROM department WHERE dept_name  =  'History'",
        "query_toks": ["SELECT", "dept_address", "FROM", "department", "WHERE", "dept_name", "=", "'History", "'"],
        "query_toks_no_value": ["select", "dept_address", "from", "department", "where", "dept_name", "=", "value"],
        "question": "Where is the history department?",
        "question_toks": ["Where", "is", "the", "history", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", "FROM", "department", "WHERE", "school_code", "=", "'BUS", "'"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", "from", "department", "where", "school_code", "=", "value"],
        "question": "How many different locations does the school with code BUS has?",
        "question_toks": ["How", "many", "different", "locations", "does", "the", "school", "with", "code", "BUS", "has", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 15, true], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 13, false], null], "\"BUS\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_address) FROM department WHERE school_code  =  'BUS'",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", "FROM", "department", "WHERE", "school_code", "=", "'BUS", "'"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", "from", "department", "where", "school_code", "=", "value"],
        "question": "What are the different locations of the school with the code BUS?",
        "question_toks": ["What", "are", "the", "different", "locations", "of", "the", "school", "with", "the", "code", "BUS", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 15, true], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 13, false], null], "\"BUS\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", ",", "school_code", "from", "department", "group", "by", "school_code"],
        "question": "How many different locations does each school have?",
        "question_toks": ["How", "many", "different", "locations", "does", "each", "school", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 15, true], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_address) ,  school_code FROM department GROUP BY school_code",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_address", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_address", ")", ",", "school_code", "from", "department", "group", "by", "school_code"],
        "question": "Count different addresses of each school.",
        "question_toks": ["Count", "different", "addresses", "of", "each", "school", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 15, true], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",
        "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'QM-261", "'"],
        "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"],
        "question": "Find the description and credit for the course QM-261?",
        "question_toks": ["Find", "the", "description", "and", "credit", "for", "the", "course", "QM-261", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 7, false], null], "\"QM-261\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT crs_credit ,  crs_description FROM course WHERE crs_code  =  'QM-261'",
        "query_toks": ["SELECT", "crs_credit", ",", "crs_description", "FROM", "course", "WHERE", "crs_code", "=", "'QM-261", "'"],
        "query_toks_no_value": ["select", "crs_credit", ",", "crs_description", "from", "course", "where", "crs_code", "=", "value"],
        "question": "What is the course description and number of credits for QM-261?",
        "question_toks": ["What", "is", "the", "course", "description", "and", "number", "of", "credits", "for", "QM-261", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 7, false], null], "\"QM-261\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code"],
        "question": "Find the number of departments in each school.",
        "question_toks": ["Find", "the", "number", "of", "departments", "in", "each", "school", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 12, true], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code"],
        "question": "How many departments are in each school?",
        "question_toks": ["How", "many", "departments", "are", "in", "each", "school", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 12, true], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code", "HAVING", "count", "(", "DISTINCT", "dept_name", ")", "<", "5"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code", "having", "count", "(", "distinct", "dept_name", ")", "<", "value"],
        "question": "Find the number of different departments in each school whose number of different departments is less than 5.",
        "question_toks": ["Find", "the", "number", "of", "different", "departments", "in", "each", "school", "whose", "number", "of", "different", "departments", "is", "less", "than", "5", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 13, false]],
            "having": [[false, 4, [0, [3, 12, true], null], 5.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 12, true], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_name) ,  school_code FROM department GROUP BY school_code HAVING count(DISTINCT dept_name)  <  5",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", ",", "school_code", "FROM", "department", "GROUP", "BY", "school_code", "HAVING", "count", "(", "DISTINCT", "dept_name", ")", "<", "5"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", ",", "school_code", "from", "department", "group", "by", "school_code", "having", "count", "(", "distinct", "dept_name", ")", "<", "value"],
        "question": "How many different departments are there in each school that has less than 5 apartments?",
        "question_toks": ["How", "many", "different", "departments", "are", "there", "in", "each", "school", "that", "has", "less", "than", "5", "apartments", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 13, false]],
            "having": [[false, 4, [0, [3, 12, true], null], 5.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 12, true], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "crs_code", "FROM", "CLASS", "GROUP", "BY", "crs_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "crs_code", "from", "class", "group", "by", "crs_code"],
        "question": "How many sections does each course has?",
        "question_toks": ["How", "many", "sections", "does", "each", "course", "has", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  crs_code FROM CLASS GROUP BY crs_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "crs_code", "FROM", "CLASS", "GROUP", "BY", "crs_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "crs_code", "from", "class", "group", "by", "crs_code"],
        "question": "How many sections does each course have?",
        "question_toks": ["How", "many", "sections", "does", "each", "course", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 2, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "query_toks": ["SELECT", "sum", "(", "crs_credit", ")", ",", "dept_code", "FROM", "course", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "sum", "(", "crs_credit", ")", ",", "dept_code", "from", "course", "group", "by", "dept_code"],
        "question": "What is the total credit does each department offer?",
        "question_toks": ["What", "is", "the", "total", "credit", "does", "each", "department", "offer", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT sum(crs_credit) ,  dept_code FROM course GROUP BY dept_code",
        "query_toks": ["SELECT", "sum", "(", "crs_credit", ")", ",", "dept_code", "FROM", "course", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "sum", "(", "crs_credit", ")", ",", "dept_code", "from", "course", "group", "by", "dept_code"],
        "question": "How many credits does the department offer?",
        "question_toks": ["How", "many", "credits", "does", "the", "department", "offer", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "class_room", "FROM", "CLASS", "GROUP", "BY", "class_room", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "class_room", "from", "class", "group", "by", "class_room", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "question_toks": ["Find", "the", "number", "of", "classes", "offered", "for", "all", "class", "rooms", "that", "held", "at", "least", "2", "classes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  class_room FROM CLASS GROUP BY class_room HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "class_room", "FROM", "CLASS", "GROUP", "BY", "class_room", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "class_room", "from", "class", "group", "by", "class_room", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "For each classroom with at least 2 classes, how many classes are offered?",
        "question_toks": ["For", "each", "classroom", "with", "at", "least", "2", "classes", ",", "how", "many", "classes", "are", "offered", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 5, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "dept_code"],
        "question": "Find the number of classes in each department.",
        "question_toks": ["Find", "the", "number", "of", "classes", "in", "each", "department", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 7, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  dept_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY dept_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "dept_code"],
        "question": "How many classes are held in each department?",
        "question_toks": ["How", "many", "classes", "are", "held", "in", "each", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 7, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.school_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T3.school_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "school_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t3", ".", "school_code"],
        "question": "Find the number of classes in each school.",
        "question_toks": ["Find", "the", "number", "of", "classes", "in", "each", "school", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 7, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  T3.school_code FROM CLASS AS T1 JOIN course AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T2.dept_code  =  T3.dept_code GROUP BY T3.school_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.school_code", "FROM", "CLASS", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T3.school_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "school_code", "from", "class", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t3", ".", "school_code"],
        "question": "How many classes exist for each school?",
        "question_toks": ["How", "many", "classes", "exist", "for", "each", "school", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 2, false], null], [0, 7, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code"],
        "question": "What is the number of professors for different school?",
        "question_toks": ["What", "is", "the", "number", "of", "professors", "for", "different", "school", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 28, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 5]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code"],
        "question": "How many different professors are there for the different schools?",
        "question_toks": ["How", "many", "different", "professors", "are", "there", "for", "the", "different", "schools", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 28, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 5]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "emp_jobcode", ",", "count", "(", "*", ")", "FROM", "employee", "GROUP", "BY", "emp_jobcode", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "emp_jobcode", ",", "count", "(", "*", ")", "from", "employee", "group", "by", "emp_jobcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the count and code of the job has most employees.",
        "question_toks": ["Find", "the", "count", "and", "code", "of", "the", "job", "has", "most", "employees", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [[0, 21, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 21, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT emp_jobcode ,  count(*) FROM employee GROUP BY emp_jobcode ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "emp_jobcode", ",", "count", "(", "*", ")", "FROM", "employee", "GROUP", "BY", "emp_jobcode", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "emp_jobcode", ",", "count", "(", "*", ")", "from", "employee", "group", "by", "emp_jobcode", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the count and code of the job with the most employee?",
        "question_toks": ["What", "is", "the", "count", "and", "code", "of", "the", "job", "with", "the", "most", "employee", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [[0, 21, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 21, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
        "query_toks": ["SELECT", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code", "order", "by", "count", "(", "*", ")", "limit", "value"],
        "question": "Which school has the smallest amount of professors?",
        "question_toks": ["Which", "school", "has", "the", "smallest", "amount", "of", "professors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 28, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 5]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.school_code FROM department AS T1 JOIN professor AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.school_code ORDER BY count(*) LIMIT 1",
        "query_toks": ["SELECT", "T1.school_code", "FROM", "department", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.school_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "school_code", "from", "department", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "school_code", "order", "by", "count", "(", "*", ")", "limit", "value"],
        "question": "Which school has the fewest professors?",
        "question_toks": ["Which", "school", "has", "the", "fewest", "professors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 28, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 5]]
            },
            "groupBy": [[0, 13, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "professor", "where", "prof_high_degree", "=", "value", "group", "by", "dept_code"],
        "question": "Find the number of professors with a Ph.D. degree in each department.",
        "question_toks": ["Find", "the", "number", "of", "professors", "with", "a", "Ph.D.", "degree", "in", "each", "department", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [[0, 28, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 28, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  dept_code FROM professor WHERE prof_high_degree  =  'Ph.D.' GROUP BY dept_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "professor", "where", "prof_high_degree", "=", "value", "group", "by", "dept_code"],
        "question": "How many professors have a Ph.D. in each department?",
        "question_toks": ["How", "many", "professors", "have", "a", "Ph.D.", "in", "each", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [[0, 28, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 28, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"],
        "question": "Find the number of students for each department.",
        "question_toks": ["Find", "the", "number", "of", "students", "for", "each", "department", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 41, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) ,  dept_code FROM student GROUP BY dept_code",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"],
        "question": "How many students are in each department?",
        "question_toks": ["How", "many", "students", "are", "in", "each", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 41, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",
        "query_toks": ["SELECT", "sum", "(", "stu_hrs", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "sum", "(", "stu_hrs", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"],
        "question": "Find the total number of hours have done for all students in each department.",
        "question_toks": ["Find", "the", "total", "number", "of", "hours", "have", "done", "for", "all", "students", "in", "each", "department", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 37, false], null]], [0, [0, [0, 41, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT sum(stu_hrs) ,  dept_code FROM student GROUP BY dept_code",
        "query_toks": ["SELECT", "sum", "(", "stu_hrs", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "sum", "(", "stu_hrs", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"],
        "question": "How many hours do the students spend studying in each department?",
        "question_toks": ["How", "many", "hours", "do", "the", "students", "spend", "studying", "in", "each", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 37, false], null]], [0, [0, [0, 41, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
        "query_toks": ["SELECT", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"],
        "question": "Find the max, average, and minimum gpa of all students in each department.",
        "question_toks": ["Find", "the", "max", ",", "average", ",", "and", "minimum", "gpa", "of", "all", "students", "in", "each", "department", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 39, false], null]], [5, [0, [0, 39, false], null]], [2, [0, [0, 39, false], null]], [0, [0, [0, 41, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT max(stu_gpa) ,  avg(stu_gpa) ,  min(stu_gpa) ,  dept_code FROM student GROUP BY dept_code",
        "query_toks": ["SELECT", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "FROM", "student", "GROUP", "BY", "dept_code"],
        "query_toks_no_value": ["select", "max", "(", "stu_gpa", ")", ",", "avg", "(", "stu_gpa", ")", ",", "min", "(", "stu_gpa", ")", ",", "dept_code", "from", "student", "group", "by", "dept_code"],
        "question": "What is the highest, lowest, and average student GPA for every department?",
        "question_toks": ["What", "is", "the", "highest", ",", "lowest", ",", "and", "average", "student", "GPA", "for", "every", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 39, false], null]], [5, [0, [0, 39, false], null]], [2, [0, [0, 39, false], null]], [0, [0, [0, 41, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", ",", "avg", "(", "T1.stu_gpa", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "avg", "(", "T1.stu_gpa", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "avg", "(", "t1", ".", "stu_gpa", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "avg", "(", "t1", ".", "stu_gpa", ")", "desc", "limit", "value"],
        "question": "What is the name and the average gpa of department whose students have the highest average gpa?",
        "question_toks": ["What", "is", "the", "name", "and", "the", "average", "gpa", "of", "department", "whose", "students", "have", "the", "highest", "average", "gpa", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 41, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 2]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [5, 39, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]], [5, [0, [0, 39, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name ,  avg(T1.stu_gpa) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY avg(T1.stu_gpa) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", ",", "avg", "(", "T1.stu_gpa", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "avg", "(", "T1.stu_gpa", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "avg", "(", "t1", ".", "stu_gpa", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "avg", "(", "t1", ".", "stu_gpa", ")", "desc", "limit", "value"],
        "question": "Which department has the highest average student GPA, and what is the average gpa?",
        "question_toks": ["Which", "department", "has", "the", "highest", "average", "student", "GPA", ",", "and", "what", "is", "the", "average", "gpa", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 41, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 2]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [5, 39, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]], [5, [0, [0, 39, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT school_code) FROM department",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_code", ")", "FROM", "department"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "school_code", ")", "from", "department"],
        "question": "how many schools exist in total?",
        "question_toks": ["how", "many", "schools", "exist", "in", "total", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 13, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT school_code) FROM department",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "school_code", ")", "FROM", "department"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "school_code", ")", "from", "department"],
        "question": "How many schools are there in the department?",
        "question_toks": ["How", "many", "schools", "are", "there", "in", "the", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 13, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT class_code) FROM CLASS",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_code", ")", "FROM", "CLASS"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "class_code", ")", "from", "class"],
        "question": "How many different classes are there?",
        "question_toks": ["How", "many", "different", "classes", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 1, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT class_code) FROM CLASS",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_code", ")", "FROM", "CLASS"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "class_code", ")", "from", "class"],
        "question": "How many unique classes are offered?",
        "question_toks": ["How", "many", "unique", "classes", "are", "offered", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 1, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "crs_code", ")", "FROM", "CLASS"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "crs_code", ")", "from", "class"],
        "question": "How many courses are offered?",
        "question_toks": ["How", "many", "courses", "are", "offered", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 2, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT crs_code) FROM CLASS",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "crs_code", ")", "FROM", "CLASS"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "crs_code", ")", "from", "class"],
        "question": "What are the number of different course codes?",
        "question_toks": ["What", "are", "the", "number", "of", "different", "course", "codes", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 2, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_name) FROM department",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "department"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "department"],
        "question": "How many departments does the college has?",
        "question_toks": ["How", "many", "departments", "does", "the", "college", "has", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 12, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT dept_name) FROM department",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "dept_name", ")", "FROM", "department"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "dept_name", ")", "from", "department"],
        "question": "How many different departments are there?",
        "question_toks": ["How", "many", "different", "departments", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 12, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "department", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "dept_name", "=", "``", "Computer", "Info", ".", "Systems", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"],
        "question": "How many courses are offered by the Computer Info. Systems department?",
        "question_toks": ["How", "many", "courses", "are", "offered", "by", "the", "Computer", "Info", ".", "Systems", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Computer Info. Systems\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM department AS T1 JOIN course AS T2 ON T1.dept_code  =  T2.dept_code WHERE dept_name  =  \"Computer Info. Systems\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "department", "AS", "T1", "JOIN", "course", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "dept_name", "=", "``", "Computer", "Info", ".", "Systems", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "department", "as", "t1", "join", "course", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "dept_name", "=", "value"],
        "question": "How many courses does the department of Computer Information Systmes offer?",
        "question_toks": ["How", "many", "courses", "does", "the", "department", "of", "Computer", "Information", "Systmes", "offer", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 11, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Computer Info. Systems\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_section", ")", "FROM", "CLASS", "WHERE", "crs_code", "=", "'ACCT-211", "'"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "class_section", ")", "from", "class", "where", "crs_code", "=", "value"],
        "question": "How many sections does course ACCT-211 has?",
        "question_toks": ["How", "many", "sections", "does", "course", "ACCT-211", "has", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 3, true], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(DISTINCT class_section) FROM CLASS WHERE crs_code  =  'ACCT-211'",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "class_section", ")", "FROM", "CLASS", "WHERE", "crs_code", "=", "'ACCT-211", "'"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "class_section", ")", "from", "class", "where", "crs_code", "=", "value"],
        "question": "What is the number of different class sections offered in the course ACCT-211?",
        "question_toks": ["What", "is", "the", "number", "of", "different", "class", "sections", "offered", "in", "the", "course", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 3, true], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code",
        "query_toks": ["SELECT", "sum", "(", "T1.crs_credit", ")", ",", "T1.dept_code", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "T1.dept_code"],
        "query_toks_no_value": ["select", "sum", "(", "t1", ".", "crs_credit", ")", ",", "t1", ".", "dept_code", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "t1", ".", "dept_code"],
        "question": "Find the total credits of all classes offered by each department.",
        "question_toks": ["Find", "the", "total", "credits", "of", "all", "classes", "offered", "by", "each", "department", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT sum(T1.crs_credit) ,  T1.dept_code FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code GROUP BY T1.dept_code",
        "query_toks": ["SELECT", "sum", "(", "T1.crs_credit", ")", ",", "T1.dept_code", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "GROUP", "BY", "T1.dept_code"],
        "query_toks_no_value": ["select", "sum", "(", "t1", ".", "crs_credit", ")", ",", "t1", ".", "dept_code", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "group", "by", "t1", ".", "dept_code"],
        "question": "What are the total number of credits offered by each department?",
        "question_toks": ["What", "are", "the", "total", "number", "of", "credits", "offered", "by", "each", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 10, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "query_toks": ["SELECT", "T3.dept_name", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "sum", "(", "T1.crs_credit", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t3", ".", "dept_name", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "sum", "(", "t1", ".", "crs_credit", ")", "desc", "limit", "value"],
        "question": "Find the name of the department that offers the largest number of credits of all classes.",
        "question_toks": ["Find", "the", "name", "of", "the", "department", "that", "offers", "the", "largest", "number", "of", "credits", "of", "all", "classes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 10, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.dept_name FROM course AS T1 JOIN CLASS AS T2 ON T1.crs_code  =  T2.crs_code JOIN department AS T3 ON T1.dept_code  =  T3.dept_code GROUP BY T1.dept_code ORDER BY sum(T1.crs_credit) DESC LIMIT 1",
        "query_toks": ["SELECT", "T3.dept_name", "FROM", "course", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.crs_code", "=", "T2.crs_code", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "sum", "(", "T1.crs_credit", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t3", ".", "dept_name", "from", "course", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "crs_code", "=", "t2", ".", "crs_code", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "sum", "(", "t1", ".", "crs_credit", ")", "desc", "limit", "value"],
        "question": "Which department offers the most credits all together?",
        "question_toks": ["Which", "department", "offers", "the", "most", "credits", "all", "together", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 2, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [4, 10, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "where", "t1", ".", "crs_code", "=", "value"],
        "question": "How many students enrolled in class ACCT-211?",
        "question_toks": ["How", "many", "students", "enrolled", "in", "class", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code WHERE T1.crs_code  =  'ACCT-211'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "where", "t1", ".", "crs_code", "=", "value"],
        "question": "What are the total number of students enrolled in ACCT-211?",
        "question_toks": ["What", "are", "the", "total", "number", "of", "students", "enrolled", "in", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'",
        "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"],
        "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value"],
        "question": "What is the first name of each student enrolled in class ACCT-211?",
        "question_toks": ["What", "is", "the", "first", "name", "of", "each", "student", "enrolled", "in", "class", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211'",
        "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'"],
        "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value"],
        "question": "What are the first names of all students in course ACCT-211?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "in", "course", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'",
        "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'", "AND", "T2.enroll_grade", "=", "'C", "'"],
        "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value", "and", "t2", ".", "enroll_grade", "=", "value"],
        "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
        "question_toks": ["What", "is", "the", "first", "name", "of", "students", "enrolled", "in", "class", "ACCT-211", "and", "got", "grade", "C", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null], "and", [false, 2, [0, [0, 26, false], null], "\"C\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.stu_fname FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T2.stu_num  =  T3.stu_num WHERE T1.crs_code  =  'ACCT-211' AND T2.enroll_grade  =  'C'",
        "query_toks": ["SELECT", "T3.stu_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T2.stu_num", "=", "T3.stu_num", "WHERE", "T1.crs_code", "=", "'ACCT-211", "'", "AND", "T2.enroll_grade", "=", "'C", "'"],
        "query_toks_no_value": ["select", "t3", ".", "stu_fname", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t2", ".", "stu_num", "=", "t3", ".", "stu_num", "where", "t1", ".", "crs_code", "=", "value", "and", "t2", ".", "enroll_grade", "=", "value"],
        "question": "What are the first names of all students who took ACCT-211 and received a C?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "who", "took", "ACCT-211", "and", "received", "a", "C", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null], "and", [false, 2, [0, [0, 26, false], null], "\"C\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM employee",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"],
        "question": "Find the total number of employees.",
        "question_toks": ["Find", "the", "total", "number", "of", "employees", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM employee",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "employee"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "employee"],
        "question": "How many employees are there all together?",
        "question_toks": ["How", "many", "employees", "are", "there", "all", "together", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value"],
        "question": "How many professors do have a Ph.D. degree?",
        "question_toks": ["How", "many", "professors", "do", "have", "a", "Ph.D.", "degree", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value"],
        "question": "What is the total number of professors with a Ph.D. ?",
        "question_toks": ["What", "is", "the", "total", "number", "of", "professors", "with", "a", "Ph.D.", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"],
        "question": "How many students are enrolled in the class taught by some professor from the accounting department?",
        "question_toks": ["How", "many", "students", "are", "enrolled", "in", "the", "class", "taught", "by", "some", "professor", "from", "the", "accounting", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code WHERE T4.dept_name  =  'Accounting'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"],
        "question": "How many students are enrolled in some classes that are taught by an accounting professor?",
        "question_toks": ["How", "many", "students", "are", "enrolled", "in", "some", "classes", "that", "are", "taught", "by", "an", "accounting", "professor", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T4.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "GROUP", "BY", "T3.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t4", ".", "dept_name", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "group", "by", "t3", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name of the department that has the largest number of students enrolled?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "department", "that", "has", "the", "largest", "number", "of", "students", "enrolled", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T4.dept_name FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN department AS T4 ON T3.dept_code  =  T4.dept_code GROUP BY T3.dept_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T4.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "department", "AS", "T4", "ON", "T3.dept_code", "=", "T4.dept_code", "GROUP", "BY", "T3.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t4", ".", "dept_name", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "department", "as", "t4", "on", "t3", ".", "dept_code", "=", "t4", ".", "dept_code", "group", "by", "t3", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name of the department with the most students enrolled?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "most", "students", "enrolled", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT dept_name FROM department ORDER BY dept_name",
        "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "dept_name"],
        "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "dept_name"],
        "question": "list names of all departments ordered by their names.",
        "question_toks": ["list", "names", "of", "all", "departments", "ordered", "by", "their", "names", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 12, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT dept_name FROM department ORDER BY dept_name",
        "query_toks": ["SELECT", "dept_name", "FROM", "department", "ORDER", "BY", "dept_name"],
        "query_toks_no_value": ["select", "dept_name", "from", "department", "order", "by", "dept_name"],
        "question": "What are the names of all departments in alphabetical order?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "departments", "in", "alphabetical", "order", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 12, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
        "query_toks": ["SELECT", "class_code", "FROM", "CLASS", "WHERE", "class_room", "=", "'KLR209", "'"],
        "query_toks_no_value": ["select", "class_code", "from", "class", "where", "class_room", "=", "value"],
        "question": "List the codes of all courses that take place in room KLR209.",
        "question_toks": ["List", "the", "codes", "of", "all", "courses", "that", "take", "place", "in", "room", "KLR209", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"KLR209\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT class_code FROM CLASS WHERE class_room  =  'KLR209'",
        "query_toks": ["SELECT", "class_code", "FROM", "CLASS", "WHERE", "class_room", "=", "'KLR209", "'"],
        "query_toks_no_value": ["select", "class_code", "from", "class", "where", "class_room", "=", "value"],
        "question": "What are the codes of all the courses that are located in room KLR209?",
        "question_toks": ["What", "are", "the", "codes", "of", "all", "the", "courses", "that", "are", "located", "in", "room", "KLR209", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"KLR209\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob",
        "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "ORDER", "BY", "emp_dob"],
        "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "order", "by", "emp_dob"],
        "question": "List the first name of all employees with job code PROF ordered by their date of birth.",
        "question_toks": ["List", "the", "first", "name", "of", "all", "employees", "with", "job", "code", "PROF", "ordered", "by", "their", "date", "of", "birth", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 23, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 21, false], null], "\"PROF\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' ORDER BY emp_dob",
        "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "ORDER", "BY", "emp_dob"],
        "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "order", "by", "emp_dob"],
        "question": "What are the first names of all employees that are professors ordered by date of birth?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "employees", "that", "are", "professors", "ordered", "by", "date", "of", "birth", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 23, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 21, false], null], "\"PROF\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "ORDER", "BY", "T2.emp_fname"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "order", "by", "t2", ".", "emp_fname"],
        "question": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
        "question_toks": ["Find", "the", "first", "names", "and", "offices", "of", "all", "professors", "sorted", "by", "alphabetical", "order", "of", "their", "first", "name", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 27, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 19, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num ORDER BY T2.emp_fname",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "ORDER", "BY", "T2.emp_fname"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "order", "by", "t2", ".", "emp_fname"],
        "question": "What are the first names and office locations for all professors sorted alphabetically by first name?",
        "question_toks": ["What", "are", "the", "first", "names", "and", "office", "locations", "for", "all", "professors", "sorted", "alphabetically", "by", "first", "name", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 27, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 19, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "query_toks": ["SELECT", "emp_fname", ",", "emp_lname", "FROM", "employee", "ORDER", "BY", "emp_dob", "LIMIT", "1"],
        "query_toks_no_value": ["select", "emp_fname", ",", "emp_lname", "from", "employee", "order", "by", "emp_dob", "limit", "value"],
        "question": "What is the first and last name of the oldest employee?",
        "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "oldest", "employee", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 23, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT emp_fname ,  emp_lname FROM employee ORDER BY emp_dob LIMIT 1",
        "query_toks": ["SELECT", "emp_fname", ",", "emp_lname", "FROM", "employee", "ORDER", "BY", "emp_dob", "LIMIT", "1"],
        "query_toks_no_value": ["select", "emp_fname", ",", "emp_lname", "from", "employee", "order", "by", "emp_dob", "limit", "value"],
        "question": "What are the first and last names of the employee with the earliest date of birth?",
        "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "the", "employee", "with", "the", "earliest", "date", "of", "birth", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 23, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
        "query_toks": ["SELECT", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", ">", "3", "ORDER", "BY", "stu_dob", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", ">", "value", "order", "by", "stu_dob", "desc", "limit", "value"],
        "question": "What is the first, last name, gpa of the youngest one among students whose GPA is above 3?",
        "question_toks": ["What", "is", "the", "first", ",", "last", "name", ",", "gpa", "of", "the", "youngest", "one", "among", "students", "whose", "GPA", "is", "above", "3", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 36, false], null]]],
            "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 33, false], null]], [0, [0, [0, 39, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 39, false], null], 3.0, null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT stu_fname ,  stu_lname ,  stu_gpa FROM student WHERE stu_gpa  >  3 ORDER BY stu_dob DESC LIMIT 1",
        "query_toks": ["SELECT", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", ">", "3", "ORDER", "BY", "stu_dob", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "stu_fname", ",", "stu_lname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", ">", "value", "order", "by", "stu_dob", "desc", "limit", "value"],
        "question": "What is the first and last name of the youngest student with a GPA above 3, and what is their GPA?",
        "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "youngest", "student", "with", "a", "GPA", "above", "3", ",", "and", "what", "is", "their", "GPA", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 36, false], null]]],
            "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 33, false], null]], [0, [0, [0, 39, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 39, false], null], 3.0, null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'",
        "query_toks": ["SELECT", "DISTINCT", "stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "enroll_grade", "=", "'C", "'"],
        "query_toks_no_value": ["select", "distinct", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "enroll_grade", "=", "value"],
        "question": "What is the first name of students who got grade C in any class?",
        "question_toks": ["What", "is", "the", "first", "name", "of", "students", "who", "got", "grade", "C", "in", "any", "class", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 26, false], null], "\"C\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT DISTINCT stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE enroll_grade  =  'C'",
        "query_toks": ["SELECT", "DISTINCT", "stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "enroll_grade", "=", "'C", "'"],
        "query_toks_no_value": ["select", "distinct", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "enroll_grade", "=", "value"],
        "question": "What are the first names of all students who got a grade C in a class?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "who", "got", "a", "grade", "C", "in", "a", "class", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 26, false], null], "\"C\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "limit", "value"],
        "question": "What is the name of department where has the smallest number of professors?",
        "question_toks": ["What", "is", "the", "name", "of", "department", "where", "has", "the", "smallest", "number", "of", "professors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [[0, 28, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "limit", "value"],
        "question": "What is the name of the department with the fewest professors?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "fewest", "professors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [[0, 28, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", ",", "T1.dept_code", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t1", ".", "dept_code", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "prof_high_degree", "=", "value", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name of department where has the largest number of professors with a Ph.D. degree?",
        "question_toks": ["What", "is", "the", "name", "of", "department", "where", "has", "the", "largest", "number", "of", "professors", "with", "a", "Ph.D.", "degree", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [[0, 28, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 28, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name ,  T1.dept_code FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.prof_high_degree  =  'Ph.D.' GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", ",", "T1.dept_code", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.prof_high_degree", "=", "'Ph.D", ".", "'", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t1", ".", "dept_code", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "prof_high_degree", "=", "value", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which department has the most professors with a Ph.D.?",
        "question_toks": ["Which", "department", "has", "the", "most", "professors", "with", "a", "Ph.D.", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [[0, 28, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 28, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num",
        "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "EXCEPT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num"],
        "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "except", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num"],
        "question": "What are the first names of the professors who do not teach a class.",
        "question_toks": ["What", "are", "the", "first", "names", "of", "the", "professors", "who", "do", "not", "teach", "a", "class", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                    "table_units": [["table_unit", 3], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 19, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 21, false], null], "\"PROF\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT emp_fname FROM employee WHERE emp_jobcode  =  'PROF' EXCEPT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num",
        "query_toks": ["SELECT", "emp_fname", "FROM", "employee", "WHERE", "emp_jobcode", "=", "'PROF", "'", "EXCEPT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num"],
        "query_toks_no_value": ["select", "emp_fname", "from", "employee", "where", "emp_jobcode", "=", "value", "except", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num"],
        "question": "What are the first names of all professors not teaching any classes?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "professors", "not", "teaching", "any", "classes", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                    "table_units": [["table_unit", 3], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 19, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 21, false], null], "\"PROF\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num",
        "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "EXCEPT", "SELECT", "T4.emp_fname", "FROM", "employee", "AS", "T4", "JOIN", "CLASS", "AS", "T5", "ON", "T4.emp_num", "=", "T5.prof_num"],
        "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "except", "select", "t4", ".", "emp_fname", "from", "employee", "as", "t4", "join", "class", "as", "t5", "on", "t4", ".", "emp_num", "=", "t5", ".", "prof_num"],
        "question": "What is the first names of the professors from the history department who do not teach a class.",
        "question_toks": ["What", "is", "the", "first", "names", "of", "the", "professors", "from", "the", "history", "department", "who", "do", "not", "teach", "a", "class", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                    "table_units": [["table_unit", 3], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 19, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' EXCEPT SELECT T4.emp_fname FROM employee AS T4 JOIN CLASS AS T5 ON T4.emp_num  =  T5.prof_num",
        "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "EXCEPT", "SELECT", "T4.emp_fname", "FROM", "employee", "AS", "T4", "JOIN", "CLASS", "AS", "T5", "ON", "T4.emp_num", "=", "T5.prof_num"],
        "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "except", "select", "t4", ".", "emp_fname", "from", "employee", "as", "t4", "join", "class", "as", "t5", "on", "t4", ".", "emp_num", "=", "t5", ".", "prof_num"],
        "question": "What are the first names of all history professors who do not teach?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "history", "professors", "who", "do", "not", "teach", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                    "table_units": [["table_unit", 3], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 19, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'",
        "query_toks": ["SELECT", "T1.emp_lname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'"],
        "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value"],
        "question": "What is the last name and office of the professor from the history department?",
        "question_toks": ["What", "is", "the", "last", "name", "and", "office", "of", "the", "professor", "from", "the", "history", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_lname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History'",
        "query_toks": ["SELECT", "T1.emp_lname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'"],
        "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value"],
        "question": "What are the last name and office of all history professors?",
        "question_toks": ["What", "are", "the", "last", "name", "and", "office", "of", "all", "history", "professors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'",
        "query_toks": ["SELECT", "T3.dept_name", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T1.emp_lname", "=", "'Heffington", "'"],
        "query_toks_no_value": ["select", "t3", ".", "dept_name", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t1", ".", "emp_lname", "=", "value"],
        "question": "What is department name and office for the professor whose last name is Heffington?",
        "question_toks": ["What", "is", "department", "name", "and", "office", "for", "the", "professor", "whose", "last", "name", "is", "Heffington", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Heffington\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T3.dept_name  ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T2.dept_code  =  T3.dept_code WHERE T1.emp_lname  =  'Heffington'",
        "query_toks": ["SELECT", "T3.dept_name", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T2.dept_code", "=", "T3.dept_code", "WHERE", "T1.emp_lname", "=", "'Heffington", "'"],
        "query_toks_no_value": ["select", "t3", ".", "dept_name", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t2", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t1", ".", "emp_lname", "=", "value"],
        "question": "What is the name of the department and office location for the professor with the last name of Heffington?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "department", "and", "office", "location", "for", "the", "professor", "with", "the", "last", "name", "of", "Heffington", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Heffington\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'",
        "query_toks": ["SELECT", "T1.emp_lname", ",", "T1.emp_hiredate", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "WHERE", "T2.prof_office", "=", "'DRE", "102", "'"],
        "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t1", ".", "emp_hiredate", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "where", "t2", ".", "prof_office", "=", "value"],
        "question": "Find the last name and hire date of the professor who is in office DRE 102.",
        "question_toks": ["Find", "the", "last", "name", "and", "hire", "date", "of", "the", "professor", "who", "is", "in", "office", "DRE", "102", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 29, false], null], "\"DRE 102\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_lname ,  T1.emp_hiredate FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num WHERE T2.prof_office  =  'DRE 102'",
        "query_toks": ["SELECT", "T1.emp_lname", ",", "T1.emp_hiredate", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "WHERE", "T2.prof_office", "=", "'DRE", "102", "'"],
        "query_toks_no_value": ["select", "t1", ".", "emp_lname", ",", "t1", ".", "emp_hiredate", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "where", "t2", ".", "prof_office", "=", "value"],
        "question": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?",
        "question_toks": ["What", "is", "the", "last", "name", "of", "the", "professor", "whose", "office", "is", "located", "in", "DRE", "102", ",", "and", "when", "were", "they", "hired", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 29, false], null], "\"DRE 102\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'",
        "query_toks": ["SELECT", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"],
        "query_toks_no_value": ["select", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t3", ".", "stu_lname", "=", "value"],
        "question": "What is the code of the course which the student whose last name is Smithson took?",
        "question_toks": ["What", "is", "the", "code", "of", "the", "course", "which", "the", "student", "whose", "last", "name", "is", "Smithson", "took", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 33, false], null], "\"Smithson\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.crs_code FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num WHERE T3.stu_lname  =  'Smithson'",
        "query_toks": ["SELECT", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"],
        "query_toks_no_value": ["select", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t3", ".", "stu_lname", "=", "value"],
        "question": "What are the course codes for every class that the student with the last name Smithson took?",
        "question_toks": ["What", "are", "the", "course", "codes", "for", "every", "class", "that", "the", "student", "with", "the", "last", "name", "Smithson", "took", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 33, false], null], "\"Smithson\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'",
        "query_toks": ["SELECT", "T4.crs_description", ",", "T4.crs_credit", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "JOIN", "course", "AS", "T4", "ON", "T4.crs_code", "=", "T1.crs_code", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"],
        "query_toks_no_value": ["select", "t4", ".", "crs_description", ",", "t4", ".", "crs_credit", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "course", "as", "t4", "on", "t4", ".", "crs_code", "=", "t1", ".", "crs_code", "where", "t3", ".", "stu_lname", "=", "value"],
        "question": "What are the description and credit of the course which the student whose last name is Smithson took?",
        "question_toks": ["What", "are", "the", "description", "and", "credit", "of", "the", "course", "which", "the", "student", "whose", "last", "name", "is", "Smithson", "took", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 33, false], null], "\"Smithson\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T4.crs_description ,  T4.crs_credit FROM CLASS AS T1 JOIN enroll AS T2 ON T1.class_code  =  T2.class_code JOIN student AS T3 ON T3.stu_num  =  T2.stu_num JOIN course AS T4 ON T4.crs_code  =  T1.crs_code WHERE T3.stu_lname  =  'Smithson'",
        "query_toks": ["SELECT", "T4.crs_description", ",", "T4.crs_credit", "FROM", "CLASS", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.class_code", "=", "T2.class_code", "JOIN", "student", "AS", "T3", "ON", "T3.stu_num", "=", "T2.stu_num", "JOIN", "course", "AS", "T4", "ON", "T4.crs_code", "=", "T1.crs_code", "WHERE", "T3.stu_lname", "=", "'Smithson", "'"],
        "query_toks_no_value": ["select", "t4", ".", "crs_description", ",", "t4", ".", "crs_credit", "from", "class", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "class_code", "=", "t2", ".", "class_code", "join", "student", "as", "t3", "on", "t3", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "course", "as", "t4", "on", "t4", ".", "crs_code", "=", "t1", ".", "crs_code", "where", "t3", ".", "stu_lname", "=", "value"],
        "question": "How many credits is the course that the student with the last name Smithson took, and what is its description?",
        "question_toks": ["How", "many", "credits", "is", "the", "course", "that", "the", "student", "with", "the", "last", "name", "Smithson", "took", ",", "and", "what", "is", "its", "description", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 33, false], null], "\"Smithson\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "OR", "prof_high_degree", "=", "'MA", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value", "or", "prof_high_degree", "=", "value"],
        "question": "How many professors who has a either Ph.D. or MA degree?",
        "question_toks": ["How", "many", "professors", "who", "has", "a", "either", "Ph.D.", "or", "MA", "degree", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null], "or", [false, 2, [0, [0, 31, false], null], "\"MA\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM professor WHERE prof_high_degree  =  'Ph.D.' OR prof_high_degree  =  'MA'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "WHERE", "prof_high_degree", "=", "'Ph.D", ".", "'", "OR", "prof_high_degree", "=", "'MA", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "where", "prof_high_degree", "=", "value", "or", "prof_high_degree", "=", "value"],
        "question": "How many professors attained either Ph.D. or Masters degrees?",
        "question_toks": ["How", "many", "professors", "attained", "either", "Ph.D.", "or", "Masters", "degrees", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null], "or", [false, 2, [0, [0, 31, false], null], "\"MA\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T2.dept_name", "=", "'Accounting", "'", "OR", "T2.dept_name", "=", "'Biology", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t2", ".", "dept_name", "=", "value", "or", "t2", ".", "dept_name", "=", "value"],
        "question": "How many professors who are from either Accounting or Biology department?",
        "question_toks": ["How", "many", "professors", "who", "are", "from", "either", "Accounting", "or", "Biology", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"Biology\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT count(*) FROM professor AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T2.dept_name  =  'Accounting' OR T2.dept_name  =  'Biology'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "professor", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T2.dept_name", "=", "'Accounting", "'", "OR", "T2.dept_name", "=", "'Biology", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "professor", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t2", ".", "dept_name", "=", "value", "or", "t2", ".", "dept_name", "=", "value"],
        "question": "What is the number of professors who are in the Accounting or Biology departments?",
        "question_toks": ["What", "is", "the", "number", "of", "professors", "who", "are", "in", "the", "Accounting", "or", "Biology", "departments", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 28, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null], "or", [false, 2, [0, [0, 12, false], null], "\"Biology\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'",
        "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'CIS-220", "'", "INTERSECT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'QM-261", "'"],
        "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value", "intersect", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"],
        "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
        "question_toks": ["Find", "the", "first", "name", "of", "the", "professor", "who", "is", "teaching", "two", "courses", "with", "code", "CIS-220", "and", "QM-261", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                    "table_units": [["table_unit", 3], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 19, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 2, false], null], "\"QM-261\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"CIS-220\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'CIS-220' INTERSECT SELECT T1.emp_fname FROM employee AS T1 JOIN CLASS AS T2 ON T1.emp_num  =  T2.prof_num WHERE crs_code  =  'QM-261'",
        "query_toks": ["SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'CIS-220", "'", "INTERSECT", "SELECT", "T1.emp_fname", "FROM", "employee", "AS", "T1", "JOIN", "CLASS", "AS", "T2", "ON", "T1.emp_num", "=", "T2.prof_num", "WHERE", "crs_code", "=", "'QM-261", "'"],
        "query_toks_no_value": ["select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value", "intersect", "select", "t1", ".", "emp_fname", "from", "employee", "as", "t1", "join", "class", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "prof_num", "where", "crs_code", "=", "value"],
        "question": "What is the first name of the professor who is teaching CIS-220 and QM-261?",
        "question_toks": ["What", "is", "the", "first", "name", "of", "the", "professor", "who", "is", "teaching", "CIS-220", "and", "QM-261", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 17, false], null], [0, 6, false], null]],
                    "table_units": [["table_unit", 3], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 19, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 2, false], null], "\"QM-261\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"CIS-220\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
        "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Accounting", "'", "INTERSECT", "SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value", "intersect", "select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value"],
        "question": "Find the first name of student who is taking classes from accounting and Computer Info. Systems departments",
        "question_toks": ["Find", "the", "first", "name", "of", "student", "who", "is", "taking", "classes", "from", "accounting", "and", "Computer", "Info", ".", "Systems", "departments"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                    "table_units": [["table_unit", 6], ["table_unit", 4]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 34, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 12, false], null], "\"Computer Info. Systems\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Accounting' INTERSECT SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code JOIN department AS T5 ON T5.dept_code  =  T4.dept_code WHERE T5.dept_name  =  'Computer Info. Systems'",
        "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Accounting", "'", "INTERSECT", "SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code", "JOIN", "department", "AS", "T5", "ON", "T5.dept_code", "=", "T4.dept_code", "WHERE", "T5.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value", "intersect", "select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code", "join", "department", "as", "t5", "on", "t5", ".", "dept_code", "=", "t4", ".", "dept_code", "where", "t5", ".", "dept_name", "=", "value"],
        "question": "What are the first names of all students taking accoutning and Computer Information Systems classes?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "students", "taking", "accoutning", "and", "Computer", "Information", "Systems", "classes", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                    "table_units": [["table_unit", 6], ["table_unit", 4]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 34, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 12, false], null], "\"Computer Info. Systems\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'",
        "query_toks": ["SELECT", "avg", "(", "T2.stu_gpa", ")", "FROM", "enroll", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T1.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'"],
        "query_toks_no_value": ["select", "avg", "(", "t2", ".", "stu_gpa", ")", "from", "enroll", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t1", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value"],
        "question": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
        "question_toks": ["What", "is", "the", "average", "gpa", "of", "the", "students", "enrolled", "in", "the", "course", "with", "code", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 25, false], null], [0, 32, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 39, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT avg(T2.stu_gpa) FROM enroll AS T1 JOIN student AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T1.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211'",
        "query_toks": ["SELECT", "avg", "(", "T2.stu_gpa", ")", "FROM", "enroll", "AS", "T1", "JOIN", "student", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T1.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'"],
        "query_toks_no_value": ["select", "avg", "(", "t2", ".", "stu_gpa", ")", "from", "enroll", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t1", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value"],
        "question": "What is the average GPA of students taking ACCT-211?",
        "question_toks": ["What", "is", "the", "average", "GPA", "of", "students", "taking", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 25, false], null], [0, 32, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 39, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "query_toks": ["SELECT", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "FROM", "student", "ORDER", "BY", "stu_gpa", "DESC", "LIMIT", "5"],
        "query_toks_no_value": ["select", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "from", "student", "order", "by", "stu_gpa", "desc", "limit", "value"],
        "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?",
        "question_toks": ["What", "is", "the", "first", "name", ",", "gpa", "and", "phone", "number", "of", "the", "top", "5", "students", "with", "highest", "gpa", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 5,
            "orderBy": ["desc", [[0, [0, 39, false], null]]],
            "select": [false, [[0, [0, [0, 39, false], null]], [0, [0, [0, 42, false], null]], [0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT stu_gpa ,  stu_phone ,  stu_fname FROM student ORDER BY stu_gpa DESC LIMIT 5",
        "query_toks": ["SELECT", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "FROM", "student", "ORDER", "BY", "stu_gpa", "DESC", "LIMIT", "5"],
        "query_toks_no_value": ["select", "stu_gpa", ",", "stu_phone", ",", "stu_fname", "from", "student", "order", "by", "stu_gpa", "desc", "limit", "value"],
        "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
        "question_toks": ["What", "is", "the", "first", "name", ",", "GPA", ",", "and", "phone", "number", "of", "the", "students", "with", "the", "top", "5", "GPAs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 5,
            "orderBy": ["desc", [[0, [0, 39, false], null]]],
            "select": [false, [[0, [0, [0, 39, false], null]], [0, [0, [0, 42, false], null]], [0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "ORDER", "BY", "stu_gpa", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "order", "by", "stu_gpa", "limit", "value"],
        "question": "What is the department name of the students with lowest gpa belongs to?",
        "question_toks": ["What", "is", "the", "department", "name", "of", "the", "students", "with", "lowest", "gpa", "belongs", "to", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 41, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 39, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code ORDER BY stu_gpa LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "ORDER", "BY", "stu_gpa", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "order", "by", "stu_gpa", "limit", "value"],
        "question": "What is the name of the department with the student that has the lowest GPA?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "department", "with", "the", "student", "that", "has", "the", "lowest", "GPA", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 41, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 39, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
        "query_toks": ["SELECT", "stu_fname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", "<", "(", "SELECT", "avg", "(", "stu_gpa", ")", "FROM", "student", ")"],
        "query_toks_no_value": ["select", "stu_fname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", "<", "(", "select", "avg", "(", "stu_gpa", ")", "from", "student", ")"],
        "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.",
        "question_toks": ["Find", "the", "first", "name", "and", "gpa", "of", "the", "students", "whose", "gpa", "is", "lower", "than", "the", "average", "gpa", "of", "all", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 39, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 39, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 6]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 39, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT stu_fname ,  stu_gpa FROM student WHERE stu_gpa  <  (SELECT avg(stu_gpa) FROM student)",
        "query_toks": ["SELECT", "stu_fname", ",", "stu_gpa", "FROM", "student", "WHERE", "stu_gpa", "<", "(", "SELECT", "avg", "(", "stu_gpa", ")", "FROM", "student", ")"],
        "query_toks_no_value": ["select", "stu_fname", ",", "stu_gpa", "from", "student", "where", "stu_gpa", "<", "(", "select", "avg", "(", "stu_gpa", ")", "from", "student", ")"],
        "question": "What is the first name and GPA of every student that has a GPA lower than average?",
        "question_toks": ["What", "is", "the", "first", "name", "and", "GPA", "of", "every", "student", "that", "has", "a", "GPA", "lower", "than", "average", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 6]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 39, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 39, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 6]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 39, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the name and address of the department that has the highest number of students.",
        "question_toks": ["Find", "the", "name", "and", "address", "of", "the", "department", "that", "has", "the", "highest", "number", "of", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 41, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 2]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name ,  T2.dept_address FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name and address of the department with the most students?",
        "question_toks": ["What", "is", "the", "name", "and", "address", "of", "the", "department", "with", "the", "most", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 41, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 2]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", ",", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", ",", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
        "question_toks": ["Find", "the", "name", ",", "address", ",", "number", "of", "students", "in", "the", "departments", "that", "have", "the", "top", "3", "highest", "number", "of", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 41, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 2]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 15, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name ,  T2.dept_address ,  count(*) FROM student AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code GROUP BY T1.dept_code ORDER BY count(*) DESC LIMIT 3",
        "query_toks": ["SELECT", "T2.dept_name", ",", "T2.dept_address", ",", "count", "(", "*", ")", "FROM", "student", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "GROUP", "BY", "T1.dept_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", ",", "t2", ".", "dept_address", ",", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "group", "by", "t1", ".", "dept_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name, address, and number of students in the departments that have the 3 most students?",
        "question_toks": ["What", "is", "the", "name", ",", "address", ",", "and", "number", "of", "students", "in", "the", "departments", "that", "have", "the", "3", "most", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 41, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 2]]
            },
            "groupBy": [[0, 41, false]],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 15, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'",
        "query_toks": ["SELECT", "T1.emp_fname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T3.dept_code", "=", "T2.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T2.prof_high_degree", "=", "'Ph.D", ".", "'"],
        "query_toks_no_value": ["select", "t1", ".", "emp_fname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t3", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t2", ".", "prof_high_degree", "=", "value"],
        "question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.",
        "question_toks": ["Find", "the", "first", "name", "and", "office", "of", "the", "professor", "who", "is", "in", "the", "history", "department", "and", "has", "a", "Ph.D.", "degree", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null], "and", [false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.emp_fname ,  T2.prof_office FROM employee AS T1 JOIN professor AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T3.dept_code  =  T2.dept_code WHERE T3.dept_name  =  'History' AND T2.prof_high_degree  =  'Ph.D.'",
        "query_toks": ["SELECT", "T1.emp_fname", ",", "T2.prof_office", "FROM", "employee", "AS", "T1", "JOIN", "professor", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T3.dept_code", "=", "T2.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T2.prof_high_degree", "=", "'Ph.D", ".", "'"],
        "query_toks_no_value": ["select", "t1", ".", "emp_fname", ",", "t2", ".", "prof_office", "from", "employee", "as", "t1", "join", "professor", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t3", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t2", ".", "prof_high_degree", "=", "value"],
        "question": "What are the first names and office of the professors who are in the history department and have a Ph.D?",
        "question_toks": ["What", "are", "the", "first", "names", "and", "office", "of", "the", "professors", "who", "are", "in", "the", "history", "department", "and", "have", "a", "Ph.D", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 17, false], null], [0, 27, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null], "and", [false, 2, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num"],
        "question": "Find the first names of all instructors who have taught some course and the course code.",
        "question_toks": ["Find", "the", "first", "names", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course", "code", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T1.crs_code FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.crs_code", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "crs_code", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num"],
        "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "teachers", "who", "have", "taught", "a", "course", "and", "the", "corresponding", "course", "codes", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code"],
        "question": "Find the first names of all instructors who have taught some course and the course description.",
        "question_toks": ["Find", "the", "first", "names", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course", "description", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code"],
        "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "teachers", "who", "have", "taught", "a", "course", "and", "the", "corresponding", "descriptions", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num"],
        "question": "Find the first names and offices of all instructors who have taught some course and also find the course description.",
        "question_toks": ["Find", "the", "first", "names", "and", "offices", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "also", "find", "the", "course", "description", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num"],
        "question": "What are the first names, office locations of all lecturers who have taught some course?",
        "question_toks": ["What", "are", "the", "first", "names", ",", "office", "locations", "of", "all", "lecturers", "who", "have", "taught", "some", "course", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", ",", "T5.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num", "JOIN", "department", "AS", "T5", "ON", "T4.dept_code", "=", "T5.dept_code"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", ",", "t5", ".", "dept_name", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num", "join", "department", "as", "t5", "on", "t4", ".", "dept_code", "=", "t5", ".", "dept_code"],
        "question": "Find the first names and offices of all instructors who have taught some course and the course description and the department name.",
        "question_toks": ["Find", "the", "first", "names", "and", "offices", "of", "all", "instructors", "who", "have", "taught", "some", "course", "and", "the", "course", "description", "and", "the", "department", "name", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]], [0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T4.prof_office ,  T3.crs_description ,  T5.dept_name FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN course AS T3 ON T1.crs_code  =  T3.crs_code JOIN professor AS T4 ON T2.emp_num  =  T4.emp_num JOIN department AS T5 ON T4.dept_code  =  T5.dept_code",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T4.prof_office", ",", "T3.crs_description", ",", "T5.dept_name", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "course", "AS", "T3", "ON", "T1.crs_code", "=", "T3.crs_code", "JOIN", "professor", "AS", "T4", "ON", "T2.emp_num", "=", "T4.emp_num", "JOIN", "department", "AS", "T5", "ON", "T4.dept_code", "=", "T5.dept_code"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t4", ".", "prof_office", ",", "t3", ".", "crs_description", ",", "t5", ".", "dept_name", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "course", "as", "t3", "on", "t1", ".", "crs_code", "=", "t3", ".", "crs_code", "join", "professor", "as", "t4", "on", "t2", ".", "emp_num", "=", "t4", ".", "emp_num", "join", "department", "as", "t5", "on", "t4", ".", "dept_code", "=", "t5", ".", "dept_code"],
        "question": "What are the first names, office locations, and departments of all instructors, and also what are the descriptions of the courses they teach?",
        "question_toks": ["What", "are", "the", "first", "names", ",", "office", "locations", ",", "and", "departments", "of", "all", "instructors", ",", "and", "also", "what", "are", "the", "descriptions", "of", "the", "courses", "they", "teach", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]], [0, [0, [0, 9, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",
        "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", ",", "T4.crs_description", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", ",", "t4", ".", "crs_description", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code"],
        "question": "Find names of all students who took some course and the course description.",
        "question_toks": ["Find", "names", "of", "all", "students", "who", "took", "some", "course", "and", "the", "course", "description", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 33, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname ,  T1.stu_lname ,  T4.crs_description FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code JOIN course AS T4 ON T3.crs_code  =  T4.crs_code",
        "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", ",", "T4.crs_description", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "JOIN", "course", "AS", "T4", "ON", "T3.crs_code", "=", "T4.crs_code"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", ",", "t4", ".", "crs_description", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "join", "course", "as", "t4", "on", "t3", ".", "crs_code", "=", "t4", ".", "crs_code"],
        "question": "What are the names of all students who took a class and the corresponding course descriptions?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "students", "who", "took", "a", "class", "and", "the", "corresponding", "course", "descriptions", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 33, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
        "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'C", "'", "OR", "T2.enroll_grade", "=", "'A", "'"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "or", "t2", ".", "enroll_grade", "=", "value"],
        "question": "Find names of all students who took some course and got A or C.",
        "question_toks": ["Find", "names", "of", "all", "students", "who", "took", "some", "course", "and", "got", "A", "or", "C", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 26, false], null], "\"C\"", null], "or", [false, 2, [0, [0, 26, false], null], "\"A\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname ,  T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'C' OR T2.enroll_grade  =  'A'",
        "query_toks": ["SELECT", "T1.stu_fname", ",", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'C", "'", "OR", "T2.enroll_grade", "=", "'A", "'"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", ",", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "or", "t2", ".", "enroll_grade", "=", "value"],
        "question": "What are the names of all students taking a course who received an A or C?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "students", "taking", "a", "course", "who", "received", "an", "A", "or", "C", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]], [0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 26, false], null], "\"C\"", null], "or", [false, 2, [0, [0, 26, false], null], "\"A\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.class_room", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "class_room", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"],
        "question": "Find the first names of all professors in the Accounting department who is teaching some course and the class room.",
        "question_toks": ["Find", "the", "first", "names", "of", "all", "professors", "in", "the", "Accounting", "department", "who", "is", "teaching", "some", "course", "and", "the", "class", "room", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T1.class_room FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Accounting'",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.class_room", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Accounting", "'"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "class_room", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"],
        "question": "What are the first names of all Accounting professors who teach and what are the classrooms of the courses they teach?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "Accounting", "professors", "who", "teach", "and", "what", "are", "the", "classrooms", "of", "the", "courses", "they", "teach", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Accounting\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",
        "query_toks": ["SELECT", "DISTINCT", "T2.emp_fname", ",", "T3.prof_high_degree", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"],
        "query_toks_no_value": ["select", "distinct", "t2", ".", "emp_fname", ",", "t3", ".", "prof_high_degree", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"],
        "question": "Find the first names and degree of all professors who are teaching some class in Computer Info. Systems department.",
        "question_toks": ["Find", "the", "first", "names", "and", "degree", "of", "all", "professors", "who", "are", "teaching", "some", "class", "in", "Computer", "Info", ".", "Systems", "department", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 19, false], null]], [0, [0, [0, 31, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Computer Info. Systems\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT DISTINCT T2.emp_fname ,  T3.prof_high_degree FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num JOIN professor AS T3 ON T2.emp_num  =  T3.emp_num JOIN department AS T4 ON T4.dept_code  =  T3.dept_code WHERE T4.dept_name  =  'Computer Info. Systems'",
        "query_toks": ["SELECT", "DISTINCT", "T2.emp_fname", ",", "T3.prof_high_degree", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "JOIN", "professor", "AS", "T3", "ON", "T2.emp_num", "=", "T3.emp_num", "JOIN", "department", "AS", "T4", "ON", "T4.dept_code", "=", "T3.dept_code", "WHERE", "T4.dept_name", "=", "'Computer", "Info", ".", "Systems", "'"],
        "query_toks_no_value": ["select", "distinct", "t2", ".", "emp_fname", ",", "t3", ".", "prof_high_degree", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "join", "professor", "as", "t3", "on", "t2", ".", "emp_num", "=", "t3", ".", "emp_num", "join", "department", "as", "t4", "on", "t4", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t4", ".", "dept_name", "=", "value"],
        "question": "What are the different first names and highest degree attained for professors teaching in the Computer Information Systems department?",
        "question_toks": ["What", "are", "the", "different", "first", "names", "and", "highest", "degree", "attained", "for", "professors", "teaching", "in", "the", "Computer", "Information", "Systems", "department", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 19, false], null]], [0, [0, [0, 31, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"Computer Info. Systems\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018",
        "query_toks": ["SELECT", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'A", "'", "AND", "T2.class_code", "=", "10018"],
        "query_toks_no_value": ["select", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "and", "t2", ".", "class_code", "=", "value"],
        "question": "What is the last name of the student who got a grade A in the class with code 10018.",
        "question_toks": ["What", "is", "the", "last", "name", "of", "the", "student", "who", "got", "a", "grade", "A", "in", "the", "class", "with", "code", "10018", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 26, false], null], "\"A\"", null], "and", [false, 2, [0, [0, 24, false], null], 10018.0, null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_lname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num WHERE T2.enroll_grade  =  'A' AND T2.class_code  =  10018",
        "query_toks": ["SELECT", "T1.stu_lname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "WHERE", "T2.enroll_grade", "=", "'A", "'", "AND", "T2.class_code", "=", "10018"],
        "query_toks_no_value": ["select", "t1", ".", "stu_lname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "where", "t2", ".", "enroll_grade", "=", "value", "and", "t2", ".", "class_code", "=", "value"],
        "question": "What is the last name of the student who received an A in the class with the code 10018?",
        "question_toks": ["What", "is", "the", "last", "name", "of", "the", "student", "who", "received", "an", "A", "in", "the", "class", "with", "the", "code", "10018", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 33, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 26, false], null], "\"A\"", null], "and", [false, 2, [0, [0, 24, false], null], 10018.0, null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T1.prof_high_degree", "!", "=", "'Ph.D", ".", "'"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t1", ".", "prof_high_degree", "!", "=", "value"],
        "question": "Find the first name and office of history professor who did not get a Ph.D. degree.",
        "question_toks": ["Find", "the", "first", "name", "and", "office", "of", "history", "professor", "who", "did", "not", "get", "a", "Ph.D.", "degree", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 27, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null], "and", [false, 7, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname ,  T1.prof_office FROM professor AS T1 JOIN employee AS T2 ON T1.emp_num  =  T2.emp_num JOIN department AS T3 ON T1.dept_code  =  T3.dept_code WHERE T3.dept_name  =  'History' AND T1.prof_high_degree != 'Ph.D.'",
        "query_toks": ["SELECT", "T2.emp_fname", ",", "T1.prof_office", "FROM", "professor", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.emp_num", "=", "T2.emp_num", "JOIN", "department", "AS", "T3", "ON", "T1.dept_code", "=", "T3.dept_code", "WHERE", "T3.dept_name", "=", "'History", "'", "AND", "T1.prof_high_degree", "!", "=", "'Ph.D", ".", "'"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", ",", "t1", ".", "prof_office", "from", "professor", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "emp_num", "=", "t2", ".", "emp_num", "join", "department", "as", "t3", "on", "t1", ".", "dept_code", "=", "t3", ".", "dept_code", "where", "t3", ".", "dept_name", "=", "value", "and", "t1", ".", "prof_high_degree", "!", "=", "value"],
        "question": "What are the first names and offices of history professors who don't have Ph.D.s?",
        "question_toks": ["What", "are", "the", "first", "names", "and", "offices", "of", "history", "professors", "who", "do", "n't", "have", "Ph.D.s", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 27, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 5], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [0, [0, [0, 29, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"History\"", null], "and", [false, 7, [0, [0, 31, false], null], "\"Ph.D.\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
        "query_toks": ["SELECT", "T2.emp_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "GROUP", "BY", "T1.prof_num", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "group", "by", "t1", ".", "prof_num", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Find the first names of professors who are teaching more than one class.",
        "question_toks": ["Find", "the", "first", "names", "of", "professors", "who", "are", "teaching", "more", "than", "one", "class", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [[0, 6, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.emp_fname FROM CLASS AS T1 JOIN employee AS T2 ON T1.prof_num  =  T2.emp_num GROUP BY T1.prof_num HAVING count(*)  >  1",
        "query_toks": ["SELECT", "T2.emp_fname", "FROM", "CLASS", "AS", "T1", "JOIN", "employee", "AS", "T2", "ON", "T1.prof_num", "=", "T2.emp_num", "GROUP", "BY", "T1.prof_num", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "t2", ".", "emp_fname", "from", "class", "as", "t1", "join", "employee", "as", "t2", "on", "t1", ".", "prof_num", "=", "t2", ".", "emp_num", "group", "by", "t1", ".", "prof_num", "having", "count", "(", "*", ")", ">", "value"],
        "question": "What are the first names of all professors who teach more than one class?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "professors", "who", "teach", "more", "than", "one", "class", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [[0, 6, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1",
        "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "GROUP", "BY", "T2.stu_num", "HAVING", "count", "(", "*", ")", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "group", "by", "t2", ".", "stu_num", "having", "count", "(", "*", ")", "=", "value"],
        "question": "Find the first names of students who took exactly one class.",
        "question_toks": ["Find", "the", "first", "names", "of", "students", "who", "took", "exactly", "one", "class", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [[0, 25, false]],
            "having": [[false, 2, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num GROUP BY T2.stu_num HAVING count(*)  =  1",
        "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "GROUP", "BY", "T2.stu_num", "HAVING", "count", "(", "*", ")", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "group", "by", "t2", ".", "stu_num", "having", "count", "(", "*", ")", "=", "value"],
        "question": "What are the first names of student who only took one course?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "student", "who", "only", "took", "one", "course", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [[0, 25, false]],
            "having": [[false, 2, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
        "query_toks": ["SELECT", "T2.dept_name", "FROM", "course", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.crs_description", "LIKE", "'", "%", "Statistics", "%", "'"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "crs_description", "like", "value"],
        "question": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "question_toks": ["Find", "the", "name", "of", "department", "that", "offers", "the", "class", "whose", "description", "has", "the", "word", "``", "Statistics", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 9, false], null], "\"%Statistics%\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T2.dept_name FROM course AS T1 JOIN department AS T2 ON T1.dept_code  =  T2.dept_code WHERE T1.crs_description LIKE '%Statistics%'",
        "query_toks": ["SELECT", "T2.dept_name", "FROM", "course", "AS", "T1", "JOIN", "department", "AS", "T2", "ON", "T1.dept_code", "=", "T2.dept_code", "WHERE", "T1.crs_description", "LIKE", "'", "%", "Statistics", "%", "'"],
        "query_toks_no_value": ["select", "t2", ".", "dept_name", "from", "course", "as", "t1", "join", "department", "as", "t2", "on", "t1", ".", "dept_code", "=", "t2", ".", "dept_code", "where", "t1", ".", "crs_description", "like", "value"],
        "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "department", "that", "offers", "a", "course", "that", "has", "a", "description", "including", "the", "word", "``", "Statistics", "''", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 9, false], null], "\"%Statistics%\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'",
        "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'", "AND", "T1.stu_lname", "LIKE", "'S", "%", "'"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value", "and", "t1", ".", "stu_lname", "like", "value"],
        "question": "What is the first name of the student whose last name starting with the letter S and is taking ACCT-211 class?",
        "question_toks": ["What", "is", "the", "first", "name", "of", "the", "student", "whose", "last", "name", "starting", "with", "the", "letter", "S", "and", "is", "taking", "ACCT-211", "class", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null], "and", [false, 9, [0, [0, 33, false], null], "\"S%\"", null]]
        }
    }, {
        "db_id": "college_1",
        "query": "SELECT T1.stu_fname FROM student AS T1 JOIN enroll AS T2 ON T1.stu_num  =  T2.stu_num JOIN CLASS AS T3 ON T2.class_code  =  T3.class_code WHERE T3.crs_code  =  'ACCT-211' AND T1.stu_lname LIKE 'S%'",
        "query_toks": ["SELECT", "T1.stu_fname", "FROM", "student", "AS", "T1", "JOIN", "enroll", "AS", "T2", "ON", "T1.stu_num", "=", "T2.stu_num", "JOIN", "CLASS", "AS", "T3", "ON", "T2.class_code", "=", "T3.class_code", "WHERE", "T3.crs_code", "=", "'ACCT-211", "'", "AND", "T1.stu_lname", "LIKE", "'S", "%", "'"],
        "query_toks_no_value": ["select", "t1", ".", "stu_fname", "from", "student", "as", "t1", "join", "enroll", "as", "t2", "on", "t1", ".", "stu_num", "=", "t2", ".", "stu_num", "join", "class", "as", "t3", "on", "t2", ".", "class_code", "=", "t3", ".", "class_code", "where", "t3", ".", "crs_code", "=", "value", "and", "t1", ".", "stu_lname", "like", "value"],
        "question": "What is the first name of the student whose last name starts with the letter S and is taking ACCT-211?",
        "question_toks": ["What", "is", "the", "first", "name", "of", "the", "student", "whose", "last", "name", "starts", "with", "the", "letter", "S", "and", "is", "taking", "ACCT-211", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 32, false], null], [0, 25, false], null]],
                "table_units": [["table_unit", 6], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 34, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"ACCT-211\"", null], "and", [false, 9, [0, [0, 33, false], null], "\"S%\"", null]]
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT sum(num_of_component) FROM furniture",
        "query_toks": ["SELECT", "sum", "(", "num_of_component", ")", "FROM", "furniture"],
        "query_toks_no_value": ["select", "sum", "(", "num_of_component", ")", "from", "furniture"],
        "question": "How many furniture components are there in total?",
        "question_toks": ["How", "many", "furniture", "components", "are", "there", "in", "total", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT name ,  furniture_id FROM furniture ORDER BY market_rate DESC LIMIT 1",
        "query_toks": ["SELECT", "name", ",", "furniture_id", "FROM", "furniture", "ORDER", "BY", "market_rate", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", ",", "furniture_id", "from", "furniture", "order", "by", "market_rate", "desc", "limit", "value"],
        "question": "Return the name and id of the furniture with the highest market rate.",
        "question_toks": ["Return", "the", "name", "and", "id", "of", "the", "furniture", "with", "the", "highest", "market", "rate", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT sum(market_rate) FROM furniture ORDER BY market_rate DESC LIMIT 2",
        "query_toks": ["SELECT", "sum", "(", "market_rate", ")", "FROM", "furniture", "ORDER", "BY", "market_rate", "DESC", "LIMIT", "2"],
        "query_toks_no_value": ["select", "sum", "(", "market_rate", ")", "from", "furniture", "order", "by", "market_rate", "desc", "limit", "value"],
        "question": "find the total market rate of the furnitures that have the top 2 market shares.",
        "question_toks": ["find", "the", "total", "market", "rate", "of", "the", "furnitures", "that", "have", "the", "top", "2", "market", "shares", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 2,
            "orderBy": ["desc", [[0, [0, 9, false], null]]],
            "select": [false, [[4, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT Num_of_Component ,  name FROM furniture WHERE Num_of_Component  >  10",
        "query_toks": ["SELECT", "Num_of_Component", ",", "name", "FROM", "furniture", "WHERE", "Num_of_Component", ">", "10"],
        "query_toks_no_value": ["select", "num_of_component", ",", "name", "from", "furniture", "where", "num_of_component", ">", "value"],
        "question": "Find the component amounts and names of all furnitures that have more than 10 components.",
        "question_toks": ["Find", "the", "component", "amounts", "and", "names", "of", "all", "furnitures", "that", "have", "more", "than", "10", "components", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 8, false], null], 10.0, null]]
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT name ,  Num_of_Component FROM furniture ORDER BY market_rate LIMIT 1",
        "query_toks": ["SELECT", "name", ",", "Num_of_Component", "FROM", "furniture", "ORDER", "BY", "market_rate", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", ",", "num_of_component", "from", "furniture", "order", "by", "market_rate", "limit", "value"],
        "question": "Find the name and component amount of the least popular furniture.",
        "question_toks": ["Find", "the", "name", "and", "component", "amount", "of", "the", "least", "popular", "furniture", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 9, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT t1.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID WHERE t2.Price_in_Dollar  <  (SELECT max(Price_in_Dollar) FROM furniture_manufacte)",
        "query_toks": ["SELECT", "t1.name", "FROM", "furniture", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.Furniture_ID", "=", "t2.Furniture_ID", "WHERE", "t2.Price_in_Dollar", "<", "(", "SELECT", "max", "(", "Price_in_Dollar", ")", "FROM", "furniture_manufacte", ")"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "furniture", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "furniture_id", "=", "t2", ".", "furniture_id", "where", "t2", ".", "price_in_dollar", "<", "(", "select", "max", "(", "price_in_dollar", ")", "from", "furniture_manufacte", ")"],
        "question": "Find the names of furnitures whose prices are lower than the highest price.",
        "question_toks": ["Find", "the", "names", "of", "furnitures", "whose", "prices", "are", "lower", "than", "the", "highest", "price", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 12, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 12, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT open_year ,  name FROM manufacturer ORDER BY num_of_shops DESC LIMIT 1",
        "query_toks": ["SELECT", "open_year", ",", "name", "FROM", "manufacturer", "ORDER", "BY", "num_of_shops", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "open_year", ",", "name", "from", "manufacturer", "order", "by", "num_of_shops", "desc", "limit", "value"],
        "question": "Which manufacturer has the most number of shops? List its name and year of opening.",
        "question_toks": ["Which", "manufacturer", "has", "the", "most", "number", "of", "shops", "?", "List", "its", "name", "and", "year", "of", "opening", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 5, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT avg(Num_of_Factories) FROM manufacturer WHERE num_of_shops  >  20",
        "query_toks": ["SELECT", "avg", "(", "Num_of_Factories", ")", "FROM", "manufacturer", "WHERE", "num_of_shops", ">", "20"],
        "query_toks_no_value": ["select", "avg", "(", "num_of_factories", ")", "from", "manufacturer", "where", "num_of_shops", ">", "value"],
        "question": "Find the average number of factories for the manufacturers that have more than 20 shops.",
        "question_toks": ["Find", "the", "average", "number", "of", "factories", "for", "the", "manufacturers", "that", "have", "more", "than", "20", "shops", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 5, false], null], 20.0, null]]
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT name ,  manufacturer_id FROM manufacturer ORDER BY open_year",
        "query_toks": ["SELECT", "name", ",", "manufacturer_id", "FROM", "manufacturer", "ORDER", "BY", "open_year"],
        "query_toks_no_value": ["select", "name", ",", "manufacturer_id", "from", "manufacturer", "order", "by", "open_year"],
        "question": "List all manufacturer names and ids ordered by their opening year.",
        "question_toks": ["List", "all", "manufacturer", "names", "and", "ids", "ordered", "by", "their", "opening", "year", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 2, false], null]]],
            "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT name ,  open_year FROM manufacturer WHERE num_of_shops  >  10 OR Num_of_Factories  <  10",
        "query_toks": ["SELECT", "name", ",", "open_year", "FROM", "manufacturer", "WHERE", "num_of_shops", ">", "10", "OR", "Num_of_Factories", "<", "10"],
        "query_toks_no_value": ["select", "name", ",", "open_year", "from", "manufacturer", "where", "num_of_shops", ">", "value", "or", "num_of_factories", "<", "value"],
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
        "question_toks": ["Give", "me", "the", "name", "and", "year", "of", "opening", "of", "the", "manufacturers", "that", "have", "either", "less", "than", "10", "factories", "or", "more", "than", "10", "shops", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 5, false], null], 10.0, null], "or", [false, 4, [0, [0, 4, false], null], 10.0, null]]
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT max(num_of_shops) ,  avg(Num_of_Factories) FROM manufacturer WHERE open_year  <  1990",
        "query_toks": ["SELECT", "max", "(", "num_of_shops", ")", ",", "avg", "(", "Num_of_Factories", ")", "FROM", "manufacturer", "WHERE", "open_year", "<", "1990"],
        "query_toks_no_value": ["select", "max", "(", "num_of_shops", ")", ",", "avg", "(", "num_of_factories", ")", "from", "manufacturer", "where", "open_year", "<", "value"],
        "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
        "question_toks": ["what", "is", "the", "average", "number", "of", "factories", "and", "maximum", "number", "of", "shops", "for", "manufacturers", "that", "opened", "before", "1990", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 5, false], null]], [5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 2, false], null], 1990.0, null]]
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT t1.manufacturer_id ,  t1.num_of_shops FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id ORDER BY t2.Price_in_Dollar DESC LIMIT 1",
        "query_toks": ["SELECT", "t1.manufacturer_id", ",", "t1.num_of_shops", "FROM", "manufacturer", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.manufacturer_id", "=", "t2.manufacturer_id", "ORDER", "BY", "t2.Price_in_Dollar", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "manufacturer_id", ",", "t1", ".", "num_of_shops", "from", "manufacturer", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "manufacturer_id", "=", "t2", ".", "manufacturer_id", "order", "by", "t2", ".", "price_in_dollar", "desc", "limit", "value"],
        "question": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "question_toks": ["Find", "the", "id", "and", "number", "of", "shops", "for", "the", "company", "that", "produces", "the", "most", "expensive", "furniture", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 12, false], null]]],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT count(*) ,  t1.name FROM manufacturer AS t1 JOIN furniture_manufacte AS t2 ON t1.manufacturer_id  =  t2.manufacturer_id GROUP BY t1.manufacturer_id",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "t1.name", "FROM", "manufacturer", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.manufacturer_id", "=", "t2.manufacturer_id", "GROUP", "BY", "t1.manufacturer_id"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t1", ".", "name", "from", "manufacturer", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "manufacturer_id", "=", "t2", ".", "manufacturer_id", "group", "by", "t1", ".", "manufacturer_id"],
        "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
        "question_toks": ["Find", "the", "number", "of", "funiture", "types", "produced", "by", "each", "manufacturer", "as", "well", "as", "the", "company", "names", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 10, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT t1.name ,  t2.price_in_dollar FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID",
        "query_toks": ["SELECT", "t1.name", ",", "t2.price_in_dollar", "FROM", "furniture", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.Furniture_ID", "=", "t2.Furniture_ID"],
        "query_toks_no_value": ["select", "t1", ".", "name", ",", "t2", ".", "price_in_dollar", "from", "furniture", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "furniture_id", "=", "t2", ".", "furniture_id"],
        "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
        "question_toks": ["Give", "me", "the", "names", "and", "prices", "of", "furnitures", "which", "some", "companies", "are", "manufacturing", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT Market_Rate ,  name FROM furniture WHERE Furniture_ID NOT IN (SELECT Furniture_ID FROM furniture_manufacte)",
        "query_toks": ["SELECT", "Market_Rate", ",", "name", "FROM", "furniture", "WHERE", "Furniture_ID", "NOT", "IN", "(", "SELECT", "Furniture_ID", "FROM", "furniture_manufacte", ")"],
        "query_toks_no_value": ["select", "market_rate", ",", "name", "from", "furniture", "where", "furniture_id", "not", "in", "(", "select", "furniture_id", "from", "furniture_manufacte", ")"],
        "question": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "question_toks": ["Find", "the", "market", "shares", "and", "names", "of", "furnitures", "which", "no", "any", "company", "is", "producing", "in", "our", "records", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 6, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 11, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "manufacturer",
        "query": "SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  <  6 INTERSECT SELECT t3.name FROM furniture AS t1 JOIN furniture_manufacte AS t2 ON t1.Furniture_ID  =  t2.Furniture_ID JOIN manufacturer AS t3 ON t2.manufacturer_id  =  t3.manufacturer_id WHERE t1.num_of_component  >  10",
        "query_toks": ["SELECT", "t3.name", "FROM", "furniture", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.Furniture_ID", "=", "t2.Furniture_ID", "JOIN", "manufacturer", "AS", "t3", "ON", "t2.manufacturer_id", "=", "t3.manufacturer_id", "WHERE", "t1.num_of_component", "<", "6", "INTERSECT", "SELECT", "t3.name", "FROM", "furniture", "AS", "t1", "JOIN", "furniture_manufacte", "AS", "t2", "ON", "t1.Furniture_ID", "=", "t2.Furniture_ID", "JOIN", "manufacturer", "AS", "t3", "ON", "t2.manufacturer_id", "=", "t3.manufacturer_id", "WHERE", "t1.num_of_component", ">", "10"],
        "query_toks_no_value": ["select", "t3", ".", "name", "from", "furniture", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "furniture_id", "=", "t2", ".", "furniture_id", "join", "manufacturer", "as", "t3", "on", "t2", ".", "manufacturer_id", "=", "t3", ".", "manufacturer_id", "where", "t1", ".", "num_of_component", "<", "value", "intersect", "select", "t3", ".", "name", "from", "furniture", "as", "t1", "join", "furniture_manufacte", "as", "t2", "on", "t1", ".", "furniture_id", "=", "t2", ".", "furniture_id", "join", "manufacturer", "as", "t3", "on", "t2", ".", "manufacturer_id", "=", "t3", ".", "manufacturer_id", "where", "t1", ".", "num_of_component", ">", "value"],
        "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
        "question_toks": ["Find", "the", "name", "of", "the", "company", "that", "produces", "both", "furnitures", "with", "less", "than", "6", "components", "and", "furnitures", "with", "more", "than", "10", "components", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 6, false], null], [0, 11, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 3, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 8, false], null], 10.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 8, false], null], 6.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "query_toks": ["SELECT", "song_name", ",", "releasedate", "FROM", "song", "ORDER", "BY", "releasedate", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "song_name", ",", "releasedate", "from", "song", "order", "by", "releasedate", "desc", "limit", "value"],
        "question": "What is the name of the song that was released in the most recent year?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "song", "that", "was", "released", "in", "the", "most", "recent", "year", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 20, false], null]]],
            "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 20, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "query_toks": ["SELECT", "song_name", ",", "releasedate", "FROM", "song", "ORDER", "BY", "releasedate", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "song_name", ",", "releasedate", "from", "song", "order", "by", "releasedate", "desc", "limit", "value"],
        "question": "What is the name of the song that was released most recently?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "song", "that", "was", "released", "most", "recently", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 20, false], null]]],
            "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 20, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "query_toks": ["SELECT", "f_id", "FROM", "files", "ORDER", "BY", "duration", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "f_id", "from", "files", "order", "by", "duration", "desc", "limit", "value"],
        "question": "What is the id of the longest song?",
        "question_toks": ["What", "is", "the", "id", "of", "the", "longest", "song", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "query_toks": ["SELECT", "f_id", "FROM", "files", "ORDER", "BY", "duration", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "f_id", "from", "files", "order", "by", "duration", "desc", "limit", "value"],
        "question": "Find the id of the song that lasts the longest.",
        "question_toks": ["Find", "the", "id", "of", "the", "song", "that", "lasts", "the", "longest", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "where", "languages", "=", "value"],
        "question": "Find the names of all English songs.",
        "question_toks": ["Find", "the", "names", "of", "all", "English", "songs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "where", "languages", "=", "value"],
        "question": "What are the names of all songs in English?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "in", "English", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp3", "''"],
        "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value"],
        "question": "What are the id of songs whose format is mp3.",
        "question_toks": ["What", "are", "the", "id", "of", "songs", "whose", "format", "is", "mp3", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp3\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp3", "''"],
        "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value"],
        "question": "What are the id of all the files in mp3 format?",
        "question_toks": ["What", "are", "the", "id", "of", "all", "the", "files", "in", "mp3", "format", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp3\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "query_toks": ["SELECT", "DISTINCT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.rating", ">", "9"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "rating", ">", "value"],
        "question": "List the name and country of origin for all singers who have produced songs with rating above 9.",
        "question_toks": ["List", "the", "name", "and", "country", "of", "origin", "for", "all", "singers", "who", "have", "produced", "songs", "with", "rating", "above", "9", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 18, false], null], 9.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.rating  >  9",
        "query_toks": ["SELECT", "DISTINCT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.rating", ">", "9"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "rating", ">", "value"],
        "question": "What are the different names and countries of origins for all artists whose song ratings are above 9?",
        "question_toks": ["What", "are", "the", "different", "names", "and", "countries", "of", "origins", "for", "all", "artists", "whose", "song", "ratings", "are", "above", "9", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 18, false], null], 9.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "query_toks": ["SELECT", "DISTINCT", "T1.file_size", ",", "T1.formats", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T2.resolution", "<", "800"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "file_size", ",", "t1", ".", "formats", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t2", ".", "resolution", "<", "value"],
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "question_toks": ["List", "the", "file", "size", "and", "format", "for", "all", "songs", "that", "have", "resolution", "lower", "than", "800", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 21, false], null], 800.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "query_toks": ["SELECT", "DISTINCT", "T1.file_size", ",", "T1.formats", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T2.resolution", "<", "800"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "file_size", ",", "t1", ".", "formats", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t2", ".", "resolution", "<", "value"],
        "question": "What are the file sizes and formats for all songs with a resolution lower than 800?",
        "question_toks": ["What", "are", "the", "file", "sizes", "and", "formats", "for", "all", "songs", "with", "a", "resolution", "lower", "than", "800", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 21, false], null], 800.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "query_toks": ["SELECT", "T1.artist_name", "FROM", "song", "AS", "T1", "JOIN", "files", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "ORDER", "BY", "T2.duration", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", "from", "song", "as", "t1", "join", "files", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "order", "by", "t2", ".", "duration", "limit", "value"],
        "question": "What is the name of the artist who produced the shortest song?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "artist", "who", "produced", "the", "shortest", "song", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 16, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "query_toks": ["SELECT", "T1.artist_name", "FROM", "song", "AS", "T1", "JOIN", "files", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "ORDER", "BY", "T2.duration", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", "from", "song", "as", "t1", "join", "files", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "order", "by", "t2", ".", "duration", "limit", "value"],
        "question": "What are the names of the artists who sang the shortest song?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "artists", "who", "sang", "the", "shortest", "song", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 16, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "ORDER", "BY", "T2.rating", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "order", "by", "t2", ".", "rating", "desc", "limit", "value"],
        "question": "What are the names and countries of origin for the artists who produced the top three highly rated songs.",
        "question_toks": ["What", "are", "the", "names", "and", "countries", "of", "origin", "for", "the", "artists", "who", "produced", "the", "top", "three", "highly", "rated", "songs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [0, 18, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "ORDER", "BY", "T2.rating", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "order", "by", "t2", ".", "rating", "desc", "limit", "value"],
        "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "singers", "who", "sang", "the", "top", "3", "most", "highly", "rated", "songs", "and", "what", "countries", "do", "they", "hail", "from", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [0, 18, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "files", "WHERE", "duration", "LIKE", "``", "4", ":", "%", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "files", "where", "duration", "like", "value"],
        "question": "How many songs have 4 minute duration?",
        "question_toks": ["How", "many", "songs", "have", "4", "minute", "duration", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 11, false], null], "\"4:%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "files", "WHERE", "duration", "LIKE", "``", "4", ":", "%", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "files", "where", "duration", "like", "value"],
        "question": "What is the count of the songs that last approximately 4 minutes?",
        "question_toks": ["What", "is", "the", "count", "of", "the", "songs", "that", "last", "approximately", "4", "minutes", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 11, false], null], "\"4:%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist", "where", "country", "=", "value"],
        "question": "How many artists are from Bangladesh?",
        "question_toks": ["How", "many", "artists", "are", "from", "Bangladesh", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Bangladesh\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "artist", "where", "country", "=", "value"],
        "question": "How many Bangladeshi artists are listed?",
        "question_toks": ["How", "many", "Bangladeshi", "artists", "are", "listed", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Bangladesh\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "query_toks": ["SELECT", "avg", "(", "T2.rating", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T1.gender", "=", "``", "Female", "''"],
        "query_toks_no_value": ["select", "avg", "(", "t2", ".", "rating", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t1", ".", "gender", "=", "value"],
        "question": "What is the average rating of songs produced by female artists?",
        "question_toks": ["What", "is", "the", "average", "rating", "of", "songs", "produced", "by", "female", "artists", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 18, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"Female\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "query_toks": ["SELECT", "avg", "(", "T2.rating", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T1.gender", "=", "``", "Female", "''"],
        "query_toks_no_value": ["select", "avg", "(", "t2", ".", "rating", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t1", ".", "gender", "=", "value"],
        "question": "How many songs, on average, are sung by a female artist?",
        "question_toks": ["How", "many", "songs", ",", "on", "average", ",", "are", "sung", "by", "a", "female", "artist", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 18, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"Female\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
        "query_toks": ["SELECT", "formats", "FROM", "files", "GROUP", "BY", "formats", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "formats", "from", "files", "group", "by", "formats", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the most popular file format?",
        "question_toks": ["What", "is", "the", "most", "popular", "file", "format", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT formats FROM files GROUP BY formats ORDER BY COUNT (*) DESC LIMIT 1",
        "query_toks": ["SELECT", "formats", "FROM", "files", "GROUP", "BY", "formats", "ORDER", "BY", "COUNT", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "formats", "from", "files", "group", "by", "formats", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the file format that is used by the most files.",
        "question_toks": ["Find", "the", "file", "format", "that", "is", "used", "by", "the", "most", "files", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "INTERSECT", "SELECT", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "intersect", "select", "artist_name", "from", "song", "where", "languages", "=", "value"],
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "question_toks": ["Find", "the", "names", "of", "the", "artists", "who", "are", "from", "UK", "and", "have", "produced", "English", "songs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 14, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"UK\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "INTERSECT", "SELECT", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "intersect", "select", "artist_name", "from", "song", "where", "languages", "=", "value"],
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "artists", "that", "are", "from", "the", "UK", "and", "sang", "songs", "in", "English", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 14, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"UK\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp4", "''", "INTERSECT", "SELECT", "f_id", "FROM", "song", "WHERE", "resolution", "<", "1000"],
        "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value", "intersect", "select", "f_id", "from", "song", "where", "resolution", "<", "value"],
        "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "question_toks": ["Find", "the", "id", "of", "songs", "that", "are", "available", "in", "mp4", "format", "and", "have", "resolution", "lower", "than", "1000", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 4, [0, [0, 21, false], null], 1000.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp4\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp4", "''", "INTERSECT", "SELECT", "f_id", "FROM", "song", "WHERE", "resolution", "<", "1000"],
        "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value", "intersect", "select", "f_id", "from", "song", "where", "resolution", "<", "value"],
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
        "question_toks": ["What", "is", "the", "id", "of", "the", "files", "that", "are", "available", "in", "the", "format", "of", "mp4", "and", "a", "resolution", "smaller", "than", "1000", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 4, [0, [0, 21, false], null], 1000.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp4\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "query_toks": ["SELECT", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T1.gender", "=", "``", "Female", "''", "AND", "T2.languages", "=", "``", "bangla", "''"],
        "query_toks_no_value": ["select", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t1", ".", "gender", "=", "value", "and", "t2", ".", "languages", "=", "value"],
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "question_toks": ["What", "is", "the", "country", "of", "origin", "of", "the", "artist", "who", "is", "female", "and", "produced", "a", "song", "in", "Bangla", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"Female\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"bangla\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "query_toks": ["SELECT", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T1.gender", "=", "``", "Female", "''", "AND", "T2.languages", "=", "``", "bangla", "''"],
        "query_toks_no_value": ["select", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t1", ".", "gender", "=", "value", "and", "t2", ".", "languages", "=", "value"],
        "question": "What countries are the female artists who sung in the language Bangla from?",
        "question_toks": ["What", "countries", "are", "the", "female", "artists", "who", "sung", "in", "the", "language", "Bangla", "from", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"Female\"", null], "and", [false, 2, [0, [0, 19, false], null], "\"bangla\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query_toks": ["SELECT", "avg", "(", "T1.duration", ")", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.formats", "=", "``", "mp3", "''", "AND", "T2.resolution", "<", "800"],
        "query_toks_no_value": ["select", "avg", "(", "t1", ".", "duration", ")", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "formats", "=", "value", "and", "t2", ".", "resolution", "<", "value"],
        "question": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "question_toks": ["What", "is", "the", "average", "duration", "of", "songs", "that", "have", "mp3", "format", "and", "resolution", "below", "800", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp3\"", null], "and", [false, 4, [0, [0, 21, false], null], 800.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "query_toks": ["SELECT", "avg", "(", "T1.duration", ")", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.formats", "=", "``", "mp3", "''", "AND", "T2.resolution", "<", "800"],
        "query_toks_no_value": ["select", "avg", "(", "t1", ".", "duration", ")", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "formats", "=", "value", "and", "t2", ".", "resolution", "<", "value"],
        "question": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?",
        "question_toks": ["What", "is", "the", "average", "song", "duration", "for", "the", "songs", "that", "are", "in", "mp3", "format", "and", "whose", "resolution", "below", "800", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 11, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp3\"", null], "and", [false, 4, [0, [0, 21, false], null], 800.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "gender", "FROM", "artist", "GROUP", "BY", "gender"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "gender", "from", "artist", "group", "by", "gender"],
        "question": "What is the number of artists for each gender?",
        "question_toks": ["What", "is", "the", "number", "of", "artists", "for", "each", "gender", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 6, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "gender", "FROM", "artist", "GROUP", "BY", "gender"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "gender", "from", "artist", "group", "by", "gender"],
        "question": "How many artists are male and how many are female?",
        "question_toks": ["How", "many", "artists", "are", "male", "and", "how", "many", "are", "female", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 6, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "query_toks": ["SELECT", "avg", "(", "rating", ")", ",", "languages", "FROM", "song", "GROUP", "BY", "languages"],
        "query_toks_no_value": ["select", "avg", "(", "rating", ")", ",", "languages", "from", "song", "group", "by", "languages"],
        "question": "What is the average rating of songs for each language?",
        "question_toks": ["What", "is", "the", "average", "rating", "of", "songs", "for", "each", "language", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 18, false], null]], [0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "query_toks": ["SELECT", "avg", "(", "rating", ")", ",", "languages", "FROM", "song", "GROUP", "BY", "languages"],
        "query_toks_no_value": ["select", "avg", "(", "rating", ")", ",", "languages", "from", "song", "group", "by", "languages"],
        "question": "What is the average song rating for each language?",
        "question_toks": ["What", "is", "the", "average", "song", "rating", "for", "each", "language", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 18, false], null]], [0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "query_toks": ["SELECT", "T1.gender", ",", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "ORDER", "BY", "T2.resolution", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "gender", ",", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "order", "by", "t2", ".", "resolution", "limit", "value"],
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "question_toks": ["Return", "the", "gender", "and", "name", "of", "artist", "who", "produced", "the", "song", "with", "the", "lowest", "resolution", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 21, false], null]]],
            "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "query_toks": ["SELECT", "T1.gender", ",", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "ORDER", "BY", "T2.resolution", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "gender", ",", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "order", "by", "t2", ".", "resolution", "limit", "value"],
        "question": "What is the gender and name of the artist who sang the song with the smallest resolution?",
        "question_toks": ["What", "is", "the", "gender", "and", "name", "of", "the", "artist", "who", "sang", "the", "song", "with", "the", "smallest", "resolution", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 21, false], null]]],
            "select": [false, [[0, [0, [0, 6, false], null]], [0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "formats", "FROM", "files", "GROUP", "BY", "formats"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "formats", "from", "files", "group", "by", "formats"],
        "question": "For each file format, return the number of artists who released songs in that format.",
        "question_toks": ["For", "each", "file", "format", ",", "return", "the", "number", "of", "artists", "who", "released", "songs", "in", "that", "format", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "formats", "FROM", "files", "GROUP", "BY", "formats"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "formats", "from", "files", "group", "by", "formats"],
        "question": "How many songs were released for each format?",
        "question_toks": ["How", "many", "songs", "were", "released", "for", "each", "format", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "query_toks": ["SELECT", "DISTINCT", "song_name", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "min", "(", "resolution", ")", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", ")"],
        "query_toks_no_value": ["select", "distinct", "song_name", "from", "song", "where", "resolution", ">", "(", "select", "min", "(", "resolution", ")", "from", "song", "where", "languages", "=", "value", ")"],
        "question": "Find the distinct names of all songs that have a higher resolution than some songs in English.",
        "question_toks": ["Find", "the", "distinct", "names", "of", "all", "songs", "that", "have", "a", "higher", "resolution", "than", "some", "songs", "in", "English", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[2, [0, [0, 21, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "query_toks": ["SELECT", "DISTINCT", "song_name", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "min", "(", "resolution", ")", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", ")"],
        "query_toks_no_value": ["select", "distinct", "song_name", "from", "song", "where", "resolution", ">", "(", "select", "min", "(", "resolution", ")", "from", "song", "where", "languages", "=", "value", ")"],
        "question": "What are the different names for all songs that have a higher resolution than English songs?",
        "question_toks": ["What", "are", "the", "different", "names", "for", "all", "songs", "that", "have", "a", "higher", "resolution", "than", "English", "songs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[2, [0, [0, 21, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "rating", "<", "(", "SELECT", "max", "(", "rating", ")", "FROM", "song", "WHERE", "genre_is", "=", "``", "blues", "''", ")"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "where", "rating", "<", "(", "select", "max", "(", "rating", ")", "from", "song", "where", "genre_is", "=", "value", ")"],
        "question": "What are the names of all songs that have a lower rating than some song of blues genre?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "that", "have", "a", "lower", "rating", "than", "some", "song", "of", "blues", "genre", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 18, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 18, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 17, false], null], "\"blues\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song WHERE rating  <  (SELECT max(rating) FROM song WHERE genre_is  =  \"blues\")",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "rating", "<", "(", "SELECT", "max", "(", "rating", ")", "FROM", "song", "WHERE", "genre_is", "=", "``", "blues", "''", ")"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "where", "rating", "<", "(", "select", "max", "(", "rating", ")", "from", "song", "where", "genre_is", "=", "value", ")"],
        "question": "What are the names of the songs that have a lower rating than at least one blues song?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "that", "have", "a", "lower", "rating", "than", "at", "least", "one", "blues", "song", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 18, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 18, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 17, false], null], "\"blues\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.song_name", "LIKE", "``", "%", "love", "%", "''"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "song_name", "like", "value"],
        "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "question_toks": ["What", "is", "the", "name", "and", "country", "of", "origin", "of", "the", "artist", "who", "released", "a", "song", "that", "has", "``", "love", "''", "in", "its", "title", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 13, false], null], "\"%love%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.song_name", "LIKE", "``", "%", "love", "%", "''"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "song_name", "like", "value"],
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "artists", "who", "released", "a", "song", "that", "has", "the", "word", "love", "in", "its", "title", ",", "and", "where", "are", "the", "artists", "from", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 13, false], null], "\"%love%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "query_toks": ["SELECT", "T1.artist_name", ",", "T1.gender", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.releasedate", "LIKE", "``", "%", "Mar", "%", "''"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "gender", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "releasedate", "like", "value"],
        "question": "List the name and gender for all artists who released songs in March.",
        "question_toks": ["List", "the", "name", "and", "gender", "for", "all", "artists", "who", "released", "songs", "in", "March", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 20, false], null], "\"%Mar%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "query_toks": ["SELECT", "T1.artist_name", ",", "T1.gender", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.releasedate", "LIKE", "``", "%", "Mar", "%", "''"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "gender", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "releasedate", "like", "value"],
        "question": "What are the names and genders of all artists who released songs in the month of March?",
        "question_toks": ["What", "are", "the", "names", "and", "genders", "of", "all", "artists", "who", "released", "songs", "in", "the", "month", "of", "March", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 20, false], null], "\"%Mar%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query_toks": ["SELECT", "g_name", ",", "rating", "FROM", "genre", "ORDER", "BY", "g_name"],
        "query_toks_no_value": ["select", "g_name", ",", "rating", "from", "genre", "order", "by", "g_name"],
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "question_toks": ["List", "the", "names", "of", "all", "genres", "in", "alphabetical", "oder", ",", "together", "with", "its", "ratings", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 1, false], null]]],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "query_toks": ["SELECT", "g_name", ",", "rating", "FROM", "genre", "ORDER", "BY", "g_name"],
        "query_toks_no_value": ["select", "g_name", ",", "rating", "from", "genre", "order", "by", "g_name"],
        "question": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "genres", "in", "alphabetical", "order", ",", "combined", "with", "its", "ratings", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 1, false], null]]],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song ORDER BY resolution",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "ORDER", "BY", "resolution"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "order", "by", "resolution"],
        "question": "Give me a list of the names of all songs ordered by their resolution.",
        "question_toks": ["Give", "me", "a", "list", "of", "the", "names", "of", "all", "songs", "ordered", "by", "their", "resolution", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 21, false], null]]],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song ORDER BY resolution",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "ORDER", "BY", "resolution"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "order", "by", "resolution"],
        "question": "What are the names of all songs that are ordered by their resolution numbers?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "that", "are", "ordered", "by", "their", "resolution", "numbers", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 21, false], null]]],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp4", "''", "UNION", "SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "720"],
        "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value", "union", "select", "f_id", "from", "song", "where", "resolution", ">", "value"],
        "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "question_toks": ["What", "are", "the", "ids", "of", "songs", "that", "are", "available", "in", "either", "mp4", "format", "or", "have", "resolution", "above", "720", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 21, false], null], 720.0, null]]
            },
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp4\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "query_toks": ["SELECT", "f_id", "FROM", "files", "WHERE", "formats", "=", "``", "mp4", "''", "UNION", "SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "720"],
        "query_toks_no_value": ["select", "f_id", "from", "files", "where", "formats", "=", "value", "union", "select", "f_id", "from", "song", "where", "resolution", ">", "value"],
        "question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
        "question_toks": ["What", "are", "the", "ids", "of", "all", "songs", "that", "are", "available", "on", "mp4", "or", "have", "a", "higher", "resolution", "than", "720", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 21, false], null], 720.0, null]]
            },
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp4\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query_toks": ["SELECT", "T2.song_name", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.duration", "LIKE", "``", "4", ":", "%", "''", "UNION", "SELECT", "song_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "t2", ".", "song_name", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "duration", "like", "value", "union", "select", "song_name", "from", "song", "where", "languages", "=", "value"],
        "question": "List the names of all songs that have 4 minute duration or are in English.",
        "question_toks": ["List", "the", "names", "of", "all", "songs", "that", "have", "4", "minute", "duration", "or", "are", "in", "English", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 13, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
            },
            "where": [[false, 9, [0, [0, 11, false], null], "\"4:%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "query_toks": ["SELECT", "T2.song_name", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.duration", "LIKE", "``", "4", ":", "%", "''", "UNION", "SELECT", "song_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "t2", ".", "song_name", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "duration", "like", "value", "union", "select", "song_name", "from", "song", "where", "languages", "=", "value"],
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "that", "are", "approximately", "4", "minutes", "long", "or", "are", "in", "English", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 13, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
            },
            "where": [[false, 9, [0, [0, 11, false], null], "\"4:%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "languages", "FROM", "song", "GROUP", "BY", "languages", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "languages", "from", "song", "group", "by", "languages", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the language used most often in the songs?",
        "question_toks": ["What", "is", "the", "language", "used", "most", "often", "in", "the", "songs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT languages FROM song GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "languages", "FROM", "song", "GROUP", "BY", "languages", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "languages", "from", "song", "group", "by", "languages", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What are the languages that are used most often in songs?",
        "question_toks": ["What", "are", "the", "languages", "that", "are", "used", "most", "often", "in", "songs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "artist_name", "FROM", "song", "WHERE", "resolution", ">", "500", "GROUP", "BY", "languages", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "artist_name", "from", "song", "where", "resolution", ">", "value", "group", "by", "languages", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the language that was used most often in songs with resolution above 500?",
        "question_toks": ["What", "is", "the", "language", "that", "was", "used", "most", "often", "in", "songs", "with", "resolution", "above", "500", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], 500.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "artist_name", "FROM", "song", "WHERE", "resolution", ">", "500", "GROUP", "BY", "languages", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "artist_name", "from", "song", "where", "resolution", ">", "value", "group", "by", "languages", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "artist", ",", "for", "each", "language", ",", "that", "has", "the", "most", "songs", "with", "a", "higher", "resolution", "than", "500", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], 500.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "AND", "gender", "=", "``", "Male", "''"],
        "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "and", "gender", "=", "value"],
        "question": "What are the names of artists who are Male and are from UK?",
        "question_toks": ["What", "are", "the", "names", "of", "artists", "who", "are", "Male", "and", "are", "from", "UK", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"UK\"", null], "and", [false, 2, [0, [0, 6, false], null], "\"Male\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "AND", "gender", "=", "``", "Male", "''"],
        "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "and", "gender", "=", "value"],
        "question": "What are the names of all male British artists?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "male", "British", "artists", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"UK\"", null], "and", [false, 2, [0, [0, 6, false], null], "\"Male\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "genre_is", "=", "``", "modern", "''", "OR", "languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "where", "genre_is", "=", "value", "or", "languages", "=", "value"],
        "question": "Find the names of songs whose genre is modern or language is English.",
        "question_toks": ["Find", "the", "names", "of", "songs", "whose", "genre", "is", "modern", "or", "language", "is", "English", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"modern\"", null], "or", [false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "genre_is", "=", "``", "modern", "''", "OR", "languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "where", "genre_is", "=", "value", "or", "languages", "=", "value"],
        "question": "What are the names of the songs that are modern or sung in English?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "that", "are", "modern", "or", "sung", "in", "English", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"modern\"", null], "or", [false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "query_toks": ["SELECT", "T2.song_name", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.formats", "=", "``", "mp3", "''", "INTERSECT", "SELECT", "song_name", "FROM", "song", "WHERE", "resolution", "<", "1000"],
        "query_toks_no_value": ["select", "t2", ".", "song_name", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "formats", "=", "value", "intersect", "select", "song_name", "from", "song", "where", "resolution", "<", "value"],
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "question_toks": ["Return", "the", "names", "of", "songs", "for", "which", "format", "is", "mp3", "and", "resolution", "is", "below", "1000", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 13, false], null]]]],
                "union": null,
                "where": [[false, 4, [0, [0, 21, false], null], 1000.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp3\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "query_toks": ["SELECT", "T2.song_name", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.formats", "=", "``", "mp3", "''", "INTERSECT", "SELECT", "song_name", "FROM", "song", "WHERE", "resolution", "<", "1000"],
        "query_toks_no_value": ["select", "t2", ".", "song_name", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "formats", "=", "value", "intersect", "select", "song_name", "from", "song", "where", "resolution", "<", "value"],
        "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "songs", "that", "are", "in", "mp3", "format", "and", "have", "a", "resolution", "lower", "than", "1000", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 13, false], null]]]],
                "union": null,
                "where": [[false, 4, [0, [0, 21, false], null], 1000.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 12, false], null], "\"mp3\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "INTERSECT", "SELECT", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "intersect", "select", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value"],
        "question": "Return the names of singers who are from UK and released an English song.",
        "question_toks": ["Return", "the", "names", "of", "singers", "who", "are", "from", "UK", "and", "released", "an", "English", "song", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 4, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"UK\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "query_toks": ["SELECT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "UK", "''", "INTERSECT", "SELECT", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "english", "''"],
        "query_toks_no_value": ["select", "artist_name", "from", "artist", "where", "country", "=", "value", "intersect", "select", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value"],
        "question": "What are the names of all singers that are from the UK and released a song in English?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "singers", "that", "are", "from", "the", "UK", "and", "released", "a", "song", "in", "English", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 4, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"UK\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query_toks": ["SELECT", "avg", "(", "rating", ")", ",", "avg", "(", "resolution", ")", "FROM", "song", "WHERE", "languages", "=", "``", "bangla", "''"],
        "query_toks_no_value": ["select", "avg", "(", "rating", ")", ",", "avg", "(", "resolution", ")", "from", "song", "where", "languages", "=", "value"],
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "question_toks": ["What", "are", "the", "average", "rating", "and", "resolution", "of", "songs", "that", "are", "in", "Bangla", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 18, false], null]], [5, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"bangla\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "query_toks": ["SELECT", "avg", "(", "rating", ")", ",", "avg", "(", "resolution", ")", "FROM", "song", "WHERE", "languages", "=", "``", "bangla", "''"],
        "query_toks_no_value": ["select", "avg", "(", "rating", ")", ",", "avg", "(", "resolution", ")", "from", "song", "where", "languages", "=", "value"],
        "question": "What is the average rating and resolution of all bangla songs?",
        "question_toks": ["What", "is", "the", "average", "rating", "and", "resolution", "of", "all", "bangla", "songs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 18, false], null]], [5, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"bangla\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "query_toks": ["SELECT", "max", "(", "T2.resolution", ")", ",", "min", "(", "T2.resolution", ")", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.duration", "LIKE", "``", "3", ":", "%", "''"],
        "query_toks_no_value": ["select", "max", "(", "t2", ".", "resolution", ")", ",", "min", "(", "t2", ".", "resolution", ")", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "duration", "like", "value"],
        "question": "What are the maximum and minimum resolution of songs whose duration is 3 minutes?",
        "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "resolution", "of", "songs", "whose", "duration", "is", "3", "minutes", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 21, false], null]], [2, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 11, false], null], "\"3:%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT max(T2.resolution) ,  min(T2.resolution) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"3:%\"",
        "query_toks": ["SELECT", "max", "(", "T2.resolution", ")", ",", "min", "(", "T2.resolution", ")", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T1.duration", "LIKE", "``", "3", ":", "%", "''"],
        "query_toks_no_value": ["select", "max", "(", "t2", ".", "resolution", ")", ",", "min", "(", "t2", ".", "resolution", ")", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t1", ".", "duration", "like", "value"],
        "question": "What is the maximum and minimum resolution of all songs that are approximately 3 minutes long?",
        "question_toks": ["What", "is", "the", "maximum", "and", "minimum", "resolution", "of", "all", "songs", "that", "are", "approximately", "3", "minutes", "long", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 21, false], null]], [2, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 11, false], null], "\"3:%\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "query_toks": ["SELECT", "max", "(", "T1.duration", ")", ",", "max", "(", "T2.resolution", ")", ",", "T2.languages", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "GROUP", "BY", "T2.languages", "ORDER", "BY", "T2.languages"],
        "query_toks_no_value": ["select", "max", "(", "t1", ".", "duration", ")", ",", "max", "(", "t2", ".", "resolution", ")", ",", "t2", ".", "languages", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "group", "by", "t2", ".", "languages", "order", "by", "t2", ".", "languages"],
        "question": "What are the maximum duration and resolution of songs grouped and ordered by languages?",
        "question_toks": ["What", "are", "the", "maximum", "duration", "and", "resolution", "of", "songs", "grouped", "and", "ordered", "by", "languages", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 19, false], null]]],
            "select": [false, [[1, [0, [0, 11, false], null]], [1, [0, [0, 21, false], null]], [0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT max(T1.duration) ,  max(T2.resolution) ,  T2.languages FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.languages ORDER BY T2.languages",
        "query_toks": ["SELECT", "max", "(", "T1.duration", ")", ",", "max", "(", "T2.resolution", ")", ",", "T2.languages", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "GROUP", "BY", "T2.languages", "ORDER", "BY", "T2.languages"],
        "query_toks_no_value": ["select", "max", "(", "t1", ".", "duration", ")", ",", "max", "(", "t2", ".", "resolution", ")", ",", "t2", ".", "languages", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "group", "by", "t2", ".", "languages", "order", "by", "t2", ".", "languages"],
        "question": "What are the maximum duration and resolution of all songs, for each language, ordered alphabetically by language?",
        "question_toks": ["What", "are", "the", "maximum", "duration", "and", "resolution", "of", "all", "songs", ",", "for", "each", "language", ",", "ordered", "alphabetically", "by", "language", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 19, false], null]]],
            "select": [false, [[1, [0, [0, 11, false], null]], [1, [0, [0, 21, false], null]], [0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "query_toks": ["SELECT", "min", "(", "T1.duration", ")", ",", "min", "(", "T2.rating", ")", ",", "T2.genre_is", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "GROUP", "BY", "T2.genre_is", "ORDER", "BY", "T2.genre_is"],
        "query_toks_no_value": ["select", "min", "(", "t1", ".", "duration", ")", ",", "min", "(", "t2", ".", "rating", ")", ",", "t2", ".", "genre_is", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "group", "by", "t2", ".", "genre_is", "order", "by", "t2", ".", "genre_is"],
        "question": "What are the shortest duration and lowest rating of songs grouped by genre and ordered by genre?",
        "question_toks": ["What", "are", "the", "shortest", "duration", "and", "lowest", "rating", "of", "songs", "grouped", "by", "genre", "and", "ordered", "by", "genre", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [[0, 17, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 17, false], null]]],
            "select": [false, [[2, [0, [0, 11, false], null]], [2, [0, [0, 18, false], null]], [0, [0, [0, 17, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT min(T1.duration) ,  min(T2.rating) ,  T2.genre_is FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id GROUP BY T2.genre_is ORDER BY T2.genre_is",
        "query_toks": ["SELECT", "min", "(", "T1.duration", ")", ",", "min", "(", "T2.rating", ")", ",", "T2.genre_is", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "GROUP", "BY", "T2.genre_is", "ORDER", "BY", "T2.genre_is"],
        "query_toks_no_value": ["select", "min", "(", "t1", ".", "duration", ")", ",", "min", "(", "t2", ".", "rating", ")", ",", "t2", ".", "genre_is", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "group", "by", "t2", ".", "genre_is", "order", "by", "t2", ".", "genre_is"],
        "question": "What is the shortest and most poorly rated song for each genre, ordered alphabetically by genre?",
        "question_toks": ["What", "is", "the", "shortest", "and", "most", "poorly", "rated", "song", "for", "each", "genre", ",", "ordered", "alphabetically", "by", "genre", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [[0, 17, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 17, false], null]]],
            "select": [false, [[2, [0, [0, 11, false], null]], [2, [0, [0, 18, false], null]], [0, [0, [0, 17, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "query_toks": ["SELECT", "T1.artist_name", ",", "count", "(", "*", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "english", "''", "GROUP", "BY", "T2.artist_name", "HAVING", "count", "(", "*", ")", ">", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "count", "(", "*", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value", "group", "by", "t2", ".", "artist_name", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Find the names and number of works of all artists who have at least one English songs.",
        "question_toks": ["Find", "the", "names", "and", "number", "of", "works", "of", "all", "artists", "who", "have", "at", "least", "one", "English", "songs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\" GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "query_toks": ["SELECT", "T1.artist_name", ",", "count", "(", "*", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "english", "''", "GROUP", "BY", "T2.artist_name", "HAVING", "count", "(", "*", ")", ">", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "count", "(", "*", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value", "group", "by", "t2", ".", "artist_name", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What are the names and number of works for all artists who have sung at least one song in English?",
        "question_toks": ["What", "are", "the", "names", "and", "number", "of", "works", "for", "all", "artists", "who", "have", "sung", "at", "least", "one", "song", "in", "English", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.resolution", ">", "900", "GROUP", "BY", "T2.artist_name", "HAVING", "count", "(", "*", ")", ">", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "resolution", ">", "value", "group", "by", "t2", ".", "artist_name", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "question_toks": ["Find", "the", "name", "and", "country", "of", "origin", "for", "all", "artists", "who", "have", "release", "at", "least", "one", "song", "of", "resolution", "above", "900", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], 900.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "query_toks": ["SELECT", "T1.artist_name", ",", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.resolution", ">", "900", "GROUP", "BY", "T2.artist_name", "HAVING", "count", "(", "*", ")", ">", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "resolution", ">", "value", "group", "by", "t2", ".", "artist_name", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What is the name and country of origin for each artist who has released a song with a resolution higher than 900?",
        "question_toks": ["What", "is", "the", "name", "and", "country", "of", "origin", "for", "each", "artist", "who", "has", "released", "a", "song", "with", "a", "resolution", "higher", "than", "900", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]], [0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], 900.0, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "query_toks": ["SELECT", "T1.artist_name", ",", "count", "(", "*", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "count", "(", "*", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the names and number of works of the three artists who have produced the most songs.",
        "question_toks": ["Find", "the", "names", "and", "number", "of", "works", "of", "the", "three", "artists", "who", "have", "produced", "the", "most", "songs", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "query_toks": ["SELECT", "T1.artist_name", ",", "count", "(", "*", ")", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", ",", "count", "(", "*", ")", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What are the names of the three artists who have produced the most songs, and how many works did they produce?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "three", "artists", "who", "have", "produced", "the", "most", "songs", ",", "and", "how", "many", "works", "did", "they", "produce", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "query_toks": ["SELECT", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "limit", "value"],
        "question": "Find the country of origin for the artist who made the least number of songs?",
        "question_toks": ["Find", "the", "country", "of", "origin", "for", "the", "artist", "who", "made", "the", "least", "number", "of", "songs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "query_toks": ["SELECT", "T1.country", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "country", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "limit", "value"],
        "question": "What country is the artist who made the fewest songs from?",
        "question_toks": ["What", "country", "is", "the", "artist", "who", "made", "the", "fewest", "songs", "from", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "rating", "<", "(", "SELECT", "min", "(", "rating", ")", "FROM", "song", "WHERE", "languages", "=", "'english", "'", ")"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "where", "rating", "<", "(", "select", "min", "(", "rating", ")", "from", "song", "where", "languages", "=", "value", ")"],
        "question": "What are the names of the songs whose rating is below the rating of all songs in English?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "songs", "whose", "rating", "is", "below", "the", "rating", "of", "all", "songs", "in", "English", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 18, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[2, [0, [0, 18, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "query_toks": ["SELECT", "song_name", "FROM", "song", "WHERE", "rating", "<", "(", "SELECT", "min", "(", "rating", ")", "FROM", "song", "WHERE", "languages", "=", "'english", "'", ")"],
        "query_toks_no_value": ["select", "song_name", "from", "song", "where", "rating", "<", "(", "select", "min", "(", "rating", ")", "from", "song", "where", "languages", "=", "value", ")"],
        "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "question_toks": ["What", "are", "the", "song", "names", "for", "every", "song", "whose", "rating", "is", "less", "than", "the", "minimum", "rating", "for", "English", "songs", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 18, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[2, [0, [0, 18, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "query_toks": ["SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "max", "(", "resolution", ")", "FROM", "song", "WHERE", "rating", "<", "8", ")"],
        "query_toks_no_value": ["select", "f_id", "from", "song", "where", "resolution", ">", "(", "select", "max", "(", "resolution", ")", "from", "song", "where", "rating", "<", "value", ")"],
        "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "question_toks": ["What", "is", "ids", "of", "the", "songs", "whose", "resolution", "is", "higher", "than", "the", "resolution", "of", "any", "songs", "with", "rating", "lower", "than", "8", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 21, false], null]]]],
                        "union": null,
                        "where": [[false, 4, [0, [0, 18, false], null], 8.0, null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "query_toks": ["SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "max", "(", "resolution", ")", "FROM", "song", "WHERE", "rating", "<", "8", ")"],
        "query_toks_no_value": ["select", "f_id", "from", "song", "where", "resolution", ">", "(", "select", "max", "(", "resolution", ")", "from", "song", "where", "rating", "<", "value", ")"],
        "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?",
        "question_toks": ["What", "is", "the", "id", "of", "every", "song", "that", "has", "a", "resolution", "higher", "than", "that", "of", "a", "song", "with", "a", "rating", "below", "8", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 21, false], null]]]],
                        "union": null,
                        "where": [[false, 4, [0, [0, 18, false], null], 8.0, null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "query_toks": ["SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "avg", "(", "resolution", ")", "FROM", "song", "WHERE", "genre_is", "=", "``", "modern", "''", ")"],
        "query_toks_no_value": ["select", "f_id", "from", "song", "where", "resolution", ">", "(", "select", "avg", "(", "resolution", ")", "from", "song", "where", "genre_is", "=", "value", ")"],
        "question": "What is ids of the songs whose resolution is higher than the average resolution of songs in modern genre?",
        "question_toks": ["What", "is", "ids", "of", "the", "songs", "whose", "resolution", "is", "higher", "than", "the", "average", "resolution", "of", "songs", "in", "modern", "genre", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 21, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 17, false], null], "\"modern\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "query_toks": ["SELECT", "f_id", "FROM", "song", "WHERE", "resolution", ">", "(", "SELECT", "avg", "(", "resolution", ")", "FROM", "song", "WHERE", "genre_is", "=", "``", "modern", "''", ")"],
        "query_toks_no_value": ["select", "f_id", "from", "song", "where", "resolution", ">", "(", "select", "avg", "(", "resolution", ")", "from", "song", "where", "genre_is", "=", "value", ")"],
        "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
        "question_toks": ["What", "are", "the", "ids", "of", "all", "songs", "that", "have", "higher", "resolution", "of", "the", "average", "resolution", "in", "the", "modern", "genre", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 21, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 21, false], null]]]],
                        "union": null,
                        "where": [[false, 2, [0, [0, 17, false], null], "\"modern\"", null]]
                    }, null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "query_toks": ["SELECT", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "bangla", "''", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
        "question_toks": ["Find", "the", "top", "3", "artists", "who", "have", "the", "largest", "number", "of", "songs", "works", "whose", "language", "is", "Bangla", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"bangla\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "query_toks": ["SELECT", "T1.artist_name", "FROM", "artist", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.artist_name", "=", "T2.artist_name", "WHERE", "T2.languages", "=", "``", "bangla", "''", "GROUP", "BY", "T2.artist_name", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "t1", ".", "artist_name", "from", "artist", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "artist_name", "=", "t2", ".", "artist_name", "where", "t2", ".", "languages", "=", "value", "group", "by", "t2", ".", "artist_name", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What are the top 3 artists with the largest number of songs in the language Bangla?",
        "question_toks": ["What", "are", "the", "top", "3", "artists", "with", "the", "largest", "number", "of", "songs", "in", "the", "language", "Bangla", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 4, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 3]]
            },
            "groupBy": [[0, 14, false]],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"bangla\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "query_toks": ["SELECT", "f_id", ",", "genre_is", ",", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", "ORDER", "BY", "rating"],
        "query_toks_no_value": ["select", "f_id", ",", "genre_is", ",", "artist_name", "from", "song", "where", "languages", "=", "value", "order", "by", "rating"],
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "question_toks": ["List", "the", "id", ",", "genre", "and", "artist", "name", "of", "English", "songs", "ordered", "by", "rating", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 18, false], null]]],
            "select": [false, [[0, [0, [0, 16, false], null]], [0, [0, [0, 17, false], null]], [0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "query_toks": ["SELECT", "f_id", ",", "genre_is", ",", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", "ORDER", "BY", "rating"],
        "query_toks_no_value": ["select", "f_id", ",", "genre_is", ",", "artist_name", "from", "song", "where", "languages", "=", "value", "order", "by", "rating"],
        "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "question_toks": ["What", "is", "the", "id", ",", "genre", ",", "and", "name", "of", "the", "artist", "for", "every", "English", "song", "ordered", "by", "ascending", "rating", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 18, false], null]]],
            "select": [false, [[0, [0, [0, 16, false], null]], [0, [0, [0, 17, false], null]], [0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "query_toks": ["SELECT", "T1.duration", ",", "T1.file_size", ",", "T1.formats", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T2.genre_is", "=", "``", "pop", "''", "ORDER", "BY", "T2.song_name"],
        "query_toks_no_value": ["select", "t1", ".", "duration", ",", "t1", ".", "file_size", ",", "t1", ".", "formats", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t2", ".", "genre_is", "=", "value", "order", "by", "t2", ".", "song_name"],
        "question": "List the duration, file size and format of songs whose genre is pop, ordered by title?",
        "question_toks": ["List", "the", "duration", ",", "file", "size", "and", "format", "of", "songs", "whose", "genre", "is", "pop", ",", "ordered", "by", "title", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 13, false], null]]],
            "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"pop\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "query_toks": ["SELECT", "T1.duration", ",", "T1.file_size", ",", "T1.formats", "FROM", "files", "AS", "T1", "JOIN", "song", "AS", "T2", "ON", "T1.f_id", "=", "T2.f_id", "WHERE", "T2.genre_is", "=", "``", "pop", "''", "ORDER", "BY", "T2.song_name"],
        "query_toks_no_value": ["select", "t1", ".", "duration", ",", "t1", ".", "file_size", ",", "t1", ".", "formats", "from", "files", "as", "t1", "join", "song", "as", "t2", "on", "t1", ".", "f_id", "=", "t2", ".", "f_id", "where", "t2", ".", "genre_is", "=", "value", "order", "by", "t2", ".", "song_name"],
        "question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
        "question_toks": ["What", "is", "the", "duration", ",", "file", "size", ",", "and", "song", "format", "for", "every", "pop", "song", ",", "ordered", "by", "title", "alphabetically", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 13, false], null]]],
            "select": [false, [[0, [0, [0, 11, false], null]], [0, [0, [0, 10, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"pop\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "8"],
        "query_toks_no_value": ["select", "distinct", "artist_name", "from", "song", "where", "languages", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"],
        "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "question_toks": ["Find", "the", "names", "of", "the", "artists", "who", "have", "produced", "English", "songs", "but", "have", "never", "received", "rating", "higher", "than", "8", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 14, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 18, false], null], 8.0, null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "languages", "=", "``", "english", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "8"],
        "query_toks_no_value": ["select", "distinct", "artist_name", "from", "song", "where", "languages", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"],
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "different", "artists", "that", "have", "produced", "a", "song", "in", "English", "but", "have", "never", "receieved", "a", "rating", "higher", "than", "8", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 14, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 18, false], null], 8.0, null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"english\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "7"],
        "query_toks_no_value": ["select", "distinct", "artist_name", "from", "artist", "where", "country", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"],
        "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "question_toks": ["Find", "the", "names", "of", "the", "artists", "who", "are", "from", "Bangladesh", "and", "have", "never", "received", "rating", "higher", "than", "7", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 14, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 18, false], null], 7.0, null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Bangladesh\"", null]]
        }
    }, {
        "db_id": "music_1",
        "query": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "query_toks": ["SELECT", "DISTINCT", "artist_name", "FROM", "artist", "WHERE", "country", "=", "``", "Bangladesh", "''", "EXCEPT", "SELECT", "DISTINCT", "artist_name", "FROM", "song", "WHERE", "rating", ">", "7"],
        "query_toks_no_value": ["select", "distinct", "artist_name", "from", "artist", "where", "country", "=", "value", "except", "select", "distinct", "artist_name", "from", "song", "where", "rating", ">", "value"],
        "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "different", "artists", "from", "Bangladesh", "who", "never", "received", "a", "rating", "higher", "than", "a", "7", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 14, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 18, false], null], 7.0, null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Bangladesh\"", null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "camera_lens", "WHERE", "focal_length_mm", ">", "15"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "camera_lens", "where", "focal_length_mm", ">", "value"],
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "question_toks": ["How", "many", "camera", "lenses", "have", "a", "focal", "length", "longer", "than", "15", "mm", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 10, false], null], 15.0, null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT brand ,  name FROM camera_lens ORDER BY max_aperture DESC",
        "query_toks": ["SELECT", "brand", ",", "name", "FROM", "camera_lens", "ORDER", "BY", "max_aperture", "DESC"],
        "query_toks_no_value": ["select", "brand", ",", "name", "from", "camera_lens", "order", "by", "max_aperture", "desc"],
        "question": "Find the brand and name for each camera lens, and sort in descending order of maximum aperture.",
        "question_toks": ["Find", "the", "brand", "and", "name", "for", "each", "camera", "lens", ",", "and", "sort", "in", "descending", "order", "of", "maximum", "aperture", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 11, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT id ,  color ,  name FROM photos",
        "query_toks": ["SELECT", "id", ",", "color", ",", "name", "FROM", "photos"],
        "query_toks_no_value": ["select", "id", ",", "color", ",", "name", "from", "photos"],
        "question": "List the id, color scheme, and name for all the photos.",
        "question_toks": ["List", "the", "id", ",", "color", "scheme", ",", "and", "name", "for", "all", "the", "photos", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 12, false], null]], [0, [0, [0, 15, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT max(height) ,  avg(height) FROM mountain",
        "query_toks": ["SELECT", "max", "(", "height", ")", ",", "avg", "(", "height", ")", "FROM", "mountain"],
        "query_toks_no_value": ["select", "max", "(", "height", ")", ",", "avg", "(", "height", ")", "from", "mountain"],
        "question": "What are the maximum and average height of the mountains?",
        "question_toks": ["What", "are", "the", "maximum", "and", "average", "height", "of", "the", "mountains", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 3, false], null]], [5, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT avg(prominence) FROM mountain WHERE country  =  'Morocco'",
        "query_toks": ["SELECT", "avg", "(", "prominence", ")", "FROM", "mountain", "WHERE", "country", "=", "'Morocco", "'"],
        "query_toks_no_value": ["select", "avg", "(", "prominence", ")", "from", "mountain", "where", "country", "=", "value"],
        "question": "What are the average prominence of the mountains in country 'Morocco'?",
        "question_toks": ["What", "are", "the", "average", "prominence", "of", "the", "mountains", "in", "country", "'Morocco", "'", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"Morocco\"", null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT name ,  height ,  prominence FROM mountain WHERE range != 'Aberdare Range'",
        "query_toks": ["SELECT", "name", ",", "height", ",", "prominence", "FROM", "mountain", "WHERE", "range", "!", "=", "'Aberdare", "Range", "'"],
        "query_toks_no_value": ["select", "name", ",", "height", ",", "prominence", "from", "mountain", "where", "range", "!", "=", "value"],
        "question": "What are the name, height and prominence of mountains which do not belong to the range 'Aberdare Range'?",
        "question_toks": ["What", "are", "the", "name", ",", "height", "and", "prominence", "of", "mountains", "which", "do", "not", "belong", "to", "the", "range", "'Aberdare", "Range", "'", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]], [0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 7, [0, [0, 5, false], null], "\"Aberdare Range\"", null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000",
        "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "mountain", "AS", "T1", "JOIN", "photos", "AS", "T2", "ON", "T1.id", "=", "T2.mountain_id", "WHERE", "T1.height", ">", "4000"],
        "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "mountain", "as", "t1", "join", "photos", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "mountain_id", "where", "t1", ".", "height", ">", "value"],
        "question": "What are the id and name of the photos for mountains?",
        "question_toks": ["What", "are", "the", "id", "and", "name", "of", "the", "photos", "for", "mountains", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 3, false], null], 4000.0, null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T1.id", ",", "T1.name", "FROM", "mountain", "AS", "T1", "JOIN", "photos", "AS", "T2", "ON", "T1.id", "=", "T2.mountain_id", "GROUP", "BY", "T1.id", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t1", ".", "id", ",", "t1", ".", "name", "from", "mountain", "as", "t1", "join", "photos", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "mountain_id", "group", "by", "t1", ".", "id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "question_toks": ["What", "are", "the", "id", "and", "name", "of", "the", "mountains", "that", "have", "at", "least", "2", "photos", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T2.name", "FROM", "photos", "AS", "T1", "JOIN", "camera_lens", "AS", "T2", "ON", "T1.camera_lens_id", "=", "T2.id", "GROUP", "BY", "T2.id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t2", ".", "name", "from", "photos", "as", "t1", "join", "camera_lens", "as", "t2", "on", "t1", ".", "camera_lens_id", "=", "t2", ".", "id", "group", "by", "t2", ".", "id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What are the names of the cameras that have taken picture of the most mountains?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "cameras", "that", "have", "taken", "picture", "of", "the", "most", "mountains", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 13, false], null], [0, 7, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 1]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT T1.name FROM camera_lens AS T1 JOIN photos AS T2 ON T2.camera_lens_id  =  T1.id WHERE T1.brand  =  'Sigma' OR T1.brand  =  'Olympus'",
        "query_toks": ["SELECT", "T1.name", "FROM", "camera_lens", "AS", "T1", "JOIN", "photos", "AS", "T2", "ON", "T2.camera_lens_id", "=", "T1.id", "WHERE", "T1.brand", "=", "'Sigma", "'", "OR", "T1.brand", "=", "'Olympus", "'"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "camera_lens", "as", "t1", "join", "photos", "as", "t2", "on", "t2", ".", "camera_lens_id", "=", "t1", ".", "id", "where", "t1", ".", "brand", "=", "value", "or", "t1", ".", "brand", "=", "value"],
        "question": "What are the names of photos taken with the lens brand 'Sigma' or 'Olympus'?",
        "question_toks": ["What", "are", "the", "names", "of", "photos", "taken", "with", "the", "lens", "brand", "'Sigma", "'", "or", "'Olympus", "'", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 13, false], null], [0, 7, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"Sigma\"", null], "or", [false, 2, [0, [0, 8, false], null], "\"Olympus\"", null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT count(DISTINCT brand) FROM camera_lens",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "brand", ")", "FROM", "camera_lens"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "brand", ")", "from", "camera_lens"],
        "question": "How many different kinds of lens brands are there?",
        "question_toks": ["How", "many", "different", "kinds", "of", "lens", "brands", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 8, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "camera_lens", "WHERE", "id", "NOT", "IN", "(", "SELECT", "camera_lens_id", "FROM", "photos", ")"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "camera_lens", "where", "id", "not", "in", "(", "select", "camera_lens_id", "from", "photos", ")"],
        "question": "How many camera lenses are not used in taking any photos?",
        "question_toks": ["How", "many", "camera", "lenses", "are", "not", "used", "in", "taking", "any", "photos", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 7, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 13, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "T2.camera_lens_id", ")", "FROM", "mountain", "AS", "T1", "JOIN", "photos", "AS", "T2", "ON", "T1.id", "=", "T2.mountain_id", "WHERE", "T1.country", "=", "'Ethiopia", "'"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "t2", ".", "camera_lens_id", ")", "from", "mountain", "as", "t1", "join", "photos", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "mountain_id", "where", "t1", ".", "country", "=", "value"],
        "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "question_toks": ["How", "many", "distinct", "kinds", "of", "camera", "lenses", "are", "used", "to", "take", "photos", "of", "mountains", "in", "the", "country", "'Ethiopia", "'", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 13, true], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"Ethiopia\"", null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Toubkal Atlas' INTERSECT SELECT T3.brand FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T1.range  =  'Lasta Massif'",
        "query_toks": ["SELECT", "T3.brand", "FROM", "mountain", "AS", "T1", "JOIN", "photos", "AS", "T2", "ON", "T1.id", "=", "T2.mountain_id", "JOIN", "camera_lens", "AS", "T3", "ON", "T2.camera_lens_id", "=", "T3.id", "WHERE", "T1.range", "=", "'Toubkal", "Atlas", "'", "INTERSECT", "SELECT", "T3.brand", "FROM", "mountain", "AS", "T1", "JOIN", "photos", "AS", "T2", "ON", "T1.id", "=", "T2.mountain_id", "JOIN", "camera_lens", "AS", "T3", "ON", "T2.camera_lens_id", "=", "T3.id", "WHERE", "T1.range", "=", "'Lasta", "Massif", "'"],
        "query_toks_no_value": ["select", "t3", ".", "brand", "from", "mountain", "as", "t1", "join", "photos", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "mountain_id", "join", "camera_lens", "as", "t3", "on", "t2", ".", "camera_lens_id", "=", "t3", ".", "id", "where", "t1", ".", "range", "=", "value", "intersect", "select", "t3", ".", "brand", "from", "mountain", "as", "t1", "join", "photos", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "mountain_id", "join", "camera_lens", "as", "t3", "on", "t2", ".", "camera_lens_id", "=", "t3", ".", "id", "where", "t1", ".", "range", "=", "value"],
        "question": "List the brands of lenses that took both a picture of mountains with range 'Toubkal Atlas' and a picture of mountains with range 'Lasta Massif'",
        "question_toks": ["List", "the", "brands", "of", "lenses", "that", "took", "both", "a", "picture", "of", "mountains", "with", "range", "'Toubkal", "Atlas", "'", "and", "a", "picture", "of", "mountains", "with", "range", "'Lasta", "Massif", "'"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                    "table_units": [["table_unit", 0], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 8, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 5, false], null], "\"Lasta Massif\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"Toubkal Atlas\"", null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT name ,  prominence FROM mountain EXCEPT SELECT T1.name ,  T1.prominence FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id JOIN camera_lens AS T3 ON T2.camera_lens_id  =  T3.id WHERE T3.brand  =  'Sigma'",
        "query_toks": ["SELECT", "name", ",", "prominence", "FROM", "mountain", "EXCEPT", "SELECT", "T1.name", ",", "T1.prominence", "FROM", "mountain", "AS", "T1", "JOIN", "photos", "AS", "T2", "ON", "T1.id", "=", "T2.mountain_id", "JOIN", "camera_lens", "AS", "T3", "ON", "T2.camera_lens_id", "=", "T3.id", "WHERE", "T3.brand", "=", "'Sigma", "'"],
        "query_toks_no_value": ["select", "name", ",", "prominence", "from", "mountain", "except", "select", "t1", ".", "name", ",", "t1", ".", "prominence", "from", "mountain", "as", "t1", "join", "photos", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "mountain_id", "join", "camera_lens", "as", "t3", "on", "t2", ".", "camera_lens_id", "=", "t3", ".", "id", "where", "t3", ".", "brand", "=", "value"],
        "question": "Show the name and prominence of the mountains whose picture is not taken by a lens of brand 'Sigma'.",
        "question_toks": ["Show", "the", "name", "and", "prominence", "of", "the", "mountains", "whose", "picture", "is", "not", "taken", "by", "a", "lens", "of", "brand", "'Sigma", "'", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                    "table_units": [["table_unit", 0], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 4, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 8, false], null], "\"Sigma\"", null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
        "query_toks": ["SELECT", "name", "FROM", "camera_lens", "WHERE", "name", "LIKE", "``", "%", "Digital", "%", "''"],
        "query_toks_no_value": ["select", "name", "from", "camera_lens", "where", "name", "like", "value"],
        "question": "List the camera lens names containing substring \"Digital\".",
        "question_toks": ["List", "the", "camera", "lens", "names", "containing", "substring", "``", "Digital", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 9, false], null], "\"%Digital%\"", null]]
        }
    }, {
        "db_id": "mountain_photos",
        "query": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
        "query_toks": ["SELECT", "T1.name", ",", "count", "(", "*", ")", "FROM", "camera_lens", "AS", "T1", "JOIN", "photos", "AS", "T2", "ON", "T1.id", "=", "T2.camera_lens_id", "GROUP", "BY", "T1.id", "ORDER", "BY", "count", "(", "*", ")"],
        "query_toks_no_value": ["select", "t1", ".", "name", ",", "count", "(", "*", ")", "from", "camera_lens", "as", "t1", "join", "photos", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "camera_lens_id", "group", "by", "t1", ".", "id", "order", "by", "count", "(", "*", ")"],
        "question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "question_toks": ["What", "is", "the", "name", "of", "each", "camera", "lens", "and", "the", "number", "of", "photos", "taken", "by", "it", "?", "Order", "the", "result", "by", "the", "count", "of", "photos", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
        "query_toks": ["SELECT", "DISTINCT", "District_name", "FROM", "district", "ORDER", "BY", "city_area", "DESC"],
        "query_toks_no_value": ["select", "distinct", "district_name", "from", "district", "order", "by", "city_area", "desc"],
        "question": "Find all the distinct district names ordered by city area in descending.",
        "question_toks": ["Find", "all", "the", "distinct", "district", "names", "ordered", "by", "city", "area", "in", "descending", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 18, false], null]]],
            "select": [true, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT DISTINCT District_name FROM district ORDER BY city_area DESC",
        "query_toks": ["SELECT", "DISTINCT", "District_name", "FROM", "district", "ORDER", "BY", "city_area", "DESC"],
        "query_toks_no_value": ["select", "distinct", "district_name", "from", "district", "order", "by", "city_area", "desc"],
        "question": "What are the different district names in order of descending city area?",
        "question_toks": ["What", "are", "the", "different", "district", "names", "in", "order", "of", "descending", "city", "area", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 18, false], null]]],
            "select": [true, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
        "query_toks": ["SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "HAVING", "count", "(", "*", ")", ">", "3"],
        "query_toks_no_value": ["select", "max_page_size", "from", "product", "group", "by", "max_page_size", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Find the list of page size which have more than 3 product listed",
        "question_toks": ["Find", "the", "list", "of", "page", "size", "which", "have", "more", "than", "3", "product", "listed"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT max_page_size FROM product GROUP BY max_page_size HAVING count(*)  >  3",
        "query_toks": ["SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "HAVING", "count", "(", "*", ")", ">", "3"],
        "query_toks_no_value": ["select", "max_page_size", "from", "product", "group", "by", "max_page_size", "having", "count", "(", "*", ")", ">", "value"],
        "question": "What is the maximum page size for everything that has more than 3 products listed?",
        "question_toks": ["What", "is", "the", "maximum", "page", "size", "for", "everything", "that", "has", "more", "than", "3", "products", "listed", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 3.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "query_toks": ["SELECT", "District_name", ",", "City_Population", "FROM", "district", "WHERE", "City_Population", "BETWEEN", "200000", "AND", "2000000"],
        "query_toks_no_value": ["select", "district_name", ",", "city_population", "from", "district", "where", "city_population", "between", "value", "and", "value"],
        "question": "Find the name and population of district with population between 200000 and 2000000",
        "question_toks": ["Find", "the", "name", "and", "population", "of", "district", "with", "population", "between", "200000", "and", "2000000"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 17, false], null]]]],
            "union": null,
            "where": [[false, 1, [0, [0, 17, false], null], 200000.0, 2000000.0]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT District_name ,  City_Population FROM district WHERE City_Population BETWEEN 200000 AND 2000000",
        "query_toks": ["SELECT", "District_name", ",", "City_Population", "FROM", "district", "WHERE", "City_Population", "BETWEEN", "200000", "AND", "2000000"],
        "query_toks_no_value": ["select", "district_name", ",", "city_population", "from", "district", "where", "city_population", "between", "value", "and", "value"],
        "question": "What are the district names and city populations for all districts that between 200,000 and 2,000,000 residents?",
        "question_toks": ["What", "are", "the", "district", "names", "and", "city", "populations", "for", "all", "districts", "that", "between", "200,000", "and", "2,000,000", "residents", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]], [0, [0, [0, 17, false], null]]]],
            "union": null,
            "where": [[false, 1, [0, [0, 17, false], null], 200000.0, 2000000.0]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000",
        "query_toks": ["SELECT", "district_name", "FROM", "district", "WHERE", "city_area", ">", "10", "OR", "City_Population", ">", "100000"],
        "query_toks_no_value": ["select", "district_name", "from", "district", "where", "city_area", ">", "value", "or", "city_population", ">", "value"],
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "question_toks": ["Find", "the", "name", "all", "districts", "with", "city", "area", "greater", "than", "10", "or", "population", "larger", "than", "100000"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 18, false], null], 10.0, null], "or", [false, 3, [0, [0, 17, false], null], 100000.0, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT district_name FROM district WHERE city_area  >  10 OR City_Population  >  100000",
        "query_toks": ["SELECT", "district_name", "FROM", "district", "WHERE", "city_area", ">", "10", "OR", "City_Population", ">", "100000"],
        "query_toks_no_value": ["select", "district_name", "from", "district", "where", "city_area", ">", "value", "or", "city_population", ">", "value"],
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "districts", "with", "a", "city", "area", "greater", "than", "10", "or", "have", "more", "than", "100000", "people", "living", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 18, false], null], 10.0, null], "or", [false, 3, [0, [0, 17, false], null], 100000.0, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "query_toks": ["SELECT", "district_name", "FROM", "district", "ORDER", "BY", "city_population", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "district_name", "from", "district", "order", "by", "city_population", "desc", "limit", "value"],
        "question": "Which district has the largest population?",
        "question_toks": ["Which", "district", "has", "the", "largest", "population", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 17, false], null]]],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT district_name FROM district ORDER BY city_population DESC LIMIT 1",
        "query_toks": ["SELECT", "district_name", "FROM", "district", "ORDER", "BY", "city_population", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "district_name", "from", "district", "order", "by", "city_population", "desc", "limit", "value"],
        "question": "What is the name of the district with the most residents?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "district", "with", "the", "most", "residents", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 17, false], null]]],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "query_toks": ["SELECT", "district_name", "FROM", "district", "ORDER", "BY", "city_area", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "district_name", "from", "district", "order", "by", "city_area", "asc", "limit", "value"],
        "question": "Which district has the least area?",
        "question_toks": ["Which", "district", "has", "the", "least", "area", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 18, false], null]]],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT district_name FROM district ORDER BY city_area ASC LIMIT 1",
        "query_toks": ["SELECT", "district_name", "FROM", "district", "ORDER", "BY", "city_area", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "district_name", "from", "district", "order", "by", "city_area", "asc", "limit", "value"],
        "question": "What is the name of the district with the smallest area?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "district", "with", "the", "smallest", "area", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 18, false], null]]],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
        "query_toks": ["SELECT", "sum", "(", "city_population", ")", "FROM", "district", "ORDER", "BY", "city_area", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "sum", "(", "city_population", ")", "from", "district", "order", "by", "city_area", "desc", "limit", "value"],
        "question": "Find the total population of the top 3 districts with the largest area.",
        "question_toks": ["Find", "the", "total", "population", "of", "the", "top", "3", "districts", "with", "the", "largest", "area", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [0, 18, false], null]]],
            "select": [false, [[4, [0, [0, 17, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT sum(city_population) FROM district ORDER BY city_area DESC LIMIT 3",
        "query_toks": ["SELECT", "sum", "(", "city_population", ")", "FROM", "district", "ORDER", "BY", "city_area", "DESC", "LIMIT", "3"],
        "query_toks_no_value": ["select", "sum", "(", "city_population", ")", "from", "district", "order", "by", "city_area", "desc", "limit", "value"],
        "question": "What is the total number of residents for the districts with the 3 largest areas?",
        "question_toks": ["What", "is", "the", "total", "number", "of", "residents", "for", "the", "districts", "with", "the", "3", "largest", "areas", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 3,
            "orderBy": ["desc", [[0, [0, 18, false], null]]],
            "select": [false, [[4, [0, [0, 17, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE",
        "query_toks": ["SELECT", "TYPE", ",", "count", "(", "*", ")", "FROM", "store", "GROUP", "BY", "TYPE"],
        "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "store", "group", "by", "type"],
        "question": "Find all types of store and number of them.",
        "question_toks": ["Find", "all", "types", "of", "store", "and", "number", "of", "them", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 10, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT TYPE ,  count(*) FROM store GROUP BY TYPE",
        "query_toks": ["SELECT", "TYPE", ",", "count", "(", "*", ")", "FROM", "store", "GROUP", "BY", "TYPE"],
        "query_toks_no_value": ["select", "type", ",", "count", "(", "*", ")", "from", "store", "group", "by", "type"],
        "question": "For each type of store, how many of them are there?",
        "question_toks": ["For", "each", "type", "of", "store", ",", "how", "many", "of", "them", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 10, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
        "query_toks": ["SELECT", "t1.store_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t3.district_name", "=", "``", "Khanewal", "District", "''"],
        "query_toks_no_value": ["select", "t1", ".", "store_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t3", ".", "district_name", "=", "value"],
        "question": "Find the names of all stores in Khanewal District.",
        "question_toks": ["Find", "the", "names", "of", "all", "stores", "in", "Khanewal", "District", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 15, false], null], "\"Khanewal District\"", null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t3.district_name  =  \"Khanewal District\"",
        "query_toks": ["SELECT", "t1.store_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t3.district_name", "=", "``", "Khanewal", "District", "''"],
        "query_toks_no_value": ["select", "t1", ".", "store_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t3", ".", "district_name", "=", "value"],
        "question": "What are the names of all the stores located in Khanewal District?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "the", "stores", "located", "in", "Khanewal", "District", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 15, false], null], "\"Khanewal District\"", null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
        "query_toks": ["SELECT", "t1.store_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "WHERE", "district_id", "=", "(", "SELECT", "district_id", "FROM", "district", "ORDER", "BY", "city_population", "DESC", "LIMIT", "1", ")"],
        "query_toks_no_value": ["select", "t1", ".", "store_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "where", "district_id", "=", "(", "select", "district_id", "from", "district", "order", "by", "city_population", "desc", "limit", "value", ")"],
        "question": "Find all the stores in the district with the most population.",
        "question_toks": ["Find", "all", "the", "stores", "in", "the", "district", "with", "the", "most", "population", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": 1,
                        "orderBy": ["desc", [[0, [0, 17, false], null]]],
                        "select": [false, [[0, [0, [0, 14, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t1.store_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id WHERE district_id  =  (SELECT district_id FROM district ORDER BY city_population DESC LIMIT 1)",
        "query_toks": ["SELECT", "t1.store_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "WHERE", "district_id", "=", "(", "SELECT", "district_id", "FROM", "district", "ORDER", "BY", "city_population", "DESC", "LIMIT", "1", ")"],
        "query_toks_no_value": ["select", "t1", ".", "store_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "where", "district_id", "=", "(", "select", "district_id", "from", "district", "order", "by", "city_population", "desc", "limit", "value", ")"],
        "question": "What are the names of all the stores in the largest district by population?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "the", "stores", "in", "the", "largest", "district", "by", "population", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": 1,
                        "orderBy": ["desc", [[0, [0, 17, false], null]]],
                        "select": [false, [[0, [0, [0, 14, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
        "query_toks": ["SELECT", "t3.headquartered_city", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.store_name", "=", "``", "Blackville", "''"],
        "query_toks_no_value": ["select", "t3", ".", "headquartered_city", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "store_name", "=", "value"],
        "question": "Which city is the headquarter of the store named \"Blackville\" in?",
        "question_toks": ["Which", "city", "is", "the", "headquarter", "of", "the", "store", "named", "``", "Blackville", "''", "in", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"Blackville\"", null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.store_name  =  \"Blackville\"",
        "query_toks": ["SELECT", "t3.headquartered_city", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.store_name", "=", "``", "Blackville", "''"],
        "query_toks_no_value": ["select", "t3", ".", "headquartered_city", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "store_name", "=", "value"],
        "question": "What city is the headquarter of the store Blackville?",
        "question_toks": ["What", "city", "is", "the", "headquarter", "of", "the", "store", "Blackville", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"Blackville\"", null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
        "query_toks": ["SELECT", "t3.headquartered_city", ",", "count", "(", "*", ")", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "GROUP", "BY", "t3.headquartered_city"],
        "query_toks_no_value": ["select", "t3", ".", "headquartered_city", ",", "count", "(", "*", ")", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "group", "by", "t3", ".", "headquartered_city"],
        "question": "Find the number of stores in each city.",
        "question_toks": ["Find", "the", "number", "of", "stores", "in", "each", "city", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [[0, 16, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t3.headquartered_city ,  count(*) FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city",
        "query_toks": ["SELECT", "t3.headquartered_city", ",", "count", "(", "*", ")", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "GROUP", "BY", "t3.headquartered_city"],
        "query_toks_no_value": ["select", "t3", ".", "headquartered_city", ",", "count", "(", "*", ")", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "group", "by", "t3", ".", "headquartered_city"],
        "question": "How many stores are headquarted in each city?",
        "question_toks": ["How", "many", "stores", "are", "headquarted", "in", "each", "city", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [[0, 16, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "t3.headquartered_city", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "GROUP", "BY", "t3.headquartered_city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t3", ".", "headquartered_city", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "group", "by", "t3", ".", "headquartered_city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the city with the most number of stores.",
        "question_toks": ["Find", "the", "city", "with", "the", "most", "number", "of", "stores", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [[0, 16, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t3.headquartered_city FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id GROUP BY t3.headquartered_city ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "t3.headquartered_city", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "GROUP", "BY", "t3.headquartered_city", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t3", ".", "headquartered_city", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "group", "by", "t3", ".", "headquartered_city", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the city with the most number of flagship stores?",
        "question_toks": ["What", "is", "the", "city", "with", "the", "most", "number", "of", "flagship", "stores", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [[0, 16, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT avg(pages_per_minute_color) FROM product",
        "query_toks": ["SELECT", "avg", "(", "pages_per_minute_color", ")", "FROM", "product"],
        "query_toks_no_value": ["select", "avg", "(", "pages_per_minute_color", ")", "from", "product"],
        "question": "What is the average pages per minute color?",
        "question_toks": ["What", "is", "the", "average", "pages", "per", "minute", "color", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT avg(pages_per_minute_color) FROM product",
        "query_toks": ["SELECT", "avg", "(", "pages_per_minute_color", ")", "FROM", "product"],
        "query_toks_no_value": ["select", "avg", "(", "pages_per_minute_color", ")", "from", "product"],
        "question": "What is the average number of pages per minute color?",
        "question_toks": ["What", "is", "the", "average", "number", "of", "pages", "per", "minute", "color", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"",
        "query_toks": ["SELECT", "t1.product", "FROM", "product", "AS", "t1", "JOIN", "store_product", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "store", "AS", "t3", "ON", "t2.store_id", "=", "t3.store_id", "WHERE", "t3.store_name", "=", "``", "Miramichi", "''"],
        "query_toks_no_value": ["select", "t1", ".", "product", "from", "product", "as", "t1", "join", "store_product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "store", "as", "t3", "on", "t2", ".", "store_id", "=", "t3", ".", "store_id", "where", "t3", ".", "store_name", "=", "value"],
        "question": "What products are available at store named \"Miramichi\"?",
        "question_toks": ["What", "products", "are", "available", "at", "store", "named", "``", "Miramichi", "''", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 20, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"Miramichi\"", null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t1.product FROM product AS t1 JOIN store_product AS t2 ON t1.product_id  =  t2.product_id JOIN store AS t3 ON t2.store_id  =  t3.store_id WHERE t3.store_name  =  \"Miramichi\"",
        "query_toks": ["SELECT", "t1.product", "FROM", "product", "AS", "t1", "JOIN", "store_product", "AS", "t2", "ON", "t1.product_id", "=", "t2.product_id", "JOIN", "store", "AS", "t3", "ON", "t2.store_id", "=", "t3.store_id", "WHERE", "t3.store_name", "=", "``", "Miramichi", "''"],
        "query_toks_no_value": ["select", "t1", ".", "product", "from", "product", "as", "t1", "join", "store_product", "as", "t2", "on", "t1", ".", "product_id", "=", "t2", ".", "product_id", "join", "store", "as", "t3", "on", "t2", ".", "store_id", "=", "t3", ".", "store_id", "where", "t3", ".", "store_name", "=", "value"],
        "question": "What products are sold at the store named Miramichi?",
        "question_toks": ["What", "products", "are", "sold", "at", "the", "store", "named", "Miramichi", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 20, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"Miramichi\"", null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
        "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "max_page_size", "=", "``", "A4", "''", "AND", "pages_per_minute_color", "<", "5"],
        "query_toks_no_value": ["select", "product", "from", "product", "where", "max_page_size", "=", "value", "and", "pages_per_minute_color", "<", "value"],
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "question_toks": ["Find", "products", "with", "max", "page", "size", "as", "``", "A4", "''", "and", "pages", "per", "minute", "color", "smaller", "than", "5", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"A4\"", null], "and", [false, 4, [0, [0, 5, false], null], 5.0, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" AND pages_per_minute_color  <  5",
        "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "max_page_size", "=", "``", "A4", "''", "AND", "pages_per_minute_color", "<", "5"],
        "query_toks_no_value": ["select", "product", "from", "product", "where", "max_page_size", "=", "value", "and", "pages_per_minute_color", "<", "value"],
        "question": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?",
        "question_toks": ["What", "are", "the", "products", "with", "the", "maximum", "page", "size", "A4", "that", "also", "have", "a", "pages", "per", "minute", "color", "smaller", "than", "5", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"A4\"", null], "and", [false, 4, [0, [0, 5, false], null], 5.0, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "max_page_size", "=", "``", "A4", "''", "OR", "pages_per_minute_color", "<", "5"],
        "query_toks_no_value": ["select", "product", "from", "product", "where", "max_page_size", "=", "value", "or", "pages_per_minute_color", "<", "value"],
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "question_toks": ["Find", "products", "with", "max", "page", "size", "as", "``", "A4", "''", "or", "pages", "per", "minute", "color", "smaller", "than", "5", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"A4\"", null], "or", [false, 4, [0, [0, 5, false], null], 5.0, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT product FROM product WHERE max_page_size  =  \"A4\" OR pages_per_minute_color  <  5",
        "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "max_page_size", "=", "``", "A4", "''", "OR", "pages_per_minute_color", "<", "5"],
        "query_toks_no_value": ["select", "product", "from", "product", "where", "max_page_size", "=", "value", "or", "pages_per_minute_color", "<", "value"],
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "question_toks": ["What", "are", "the", "products", "with", "the", "maximum", "page", "size", "eqal", "to", "A4", "or", "a", "pages", "per", "minute", "color", "less", "than", "5", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], "\"A4\"", null], "or", [false, 4, [0, [0, 5, false], null], 5.0, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
        "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "product", "LIKE", "``", "%", "Scanner", "%", "''"],
        "query_toks_no_value": ["select", "product", "from", "product", "where", "product", "like", "value"],
        "question": "Find all the product whose name contains the word \"Scanner\".",
        "question_toks": ["Find", "all", "the", "product", "whose", "name", "contains", "the", "word", "``", "Scanner", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 2, false], null], "\"%Scanner%\"", null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT product FROM product WHERE product LIKE \"%Scanner%\"",
        "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "product", "LIKE", "``", "%", "Scanner", "%", "''"],
        "query_toks_no_value": ["select", "product", "from", "product", "where", "product", "like", "value"],
        "question": "What are all of the products whose name includes the substring \"Scanner\"?",
        "question_toks": ["What", "are", "all", "of", "the", "products", "whose", "name", "includes", "the", "substring", "``", "Scanner", "''", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 9, [0, [0, 2, false], null], "\"%Scanner%\"", null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "max_page_size", "from", "product", "group", "by", "max_page_size", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the most prominent max page size among all the products.",
        "question_toks": ["Find", "the", "most", "prominent", "max", "page", "size", "among", "all", "the", "products", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "max_page_size", "from", "product", "group", "by", "max_page_size", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the most common maximum page size?",
        "question_toks": ["What", "is", "the", "most", "common", "maximum", "page", "size", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "product", "!", "=", "(", "SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"],
        "query_toks_no_value": ["select", "product", "from", "product", "where", "product", "!", "=", "(", "select", "max_page_size", "from", "product", "group", "by", "max_page_size", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"],
        "question": "Find the name of the products that are not using the most frequently-used max page size.",
        "question_toks": ["Find", "the", "name", "of", "the", "products", "that", "are", "not", "using", "the", "most", "frequently-used", "max", "page", "size", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 7, [0, [0, 2, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 0]]
                        },
                        "groupBy": [[0, 6, false]],
                        "having": [],
                        "intersect": null,
                        "limit": 1,
                        "orderBy": ["desc", [[0, [3, 0, false], null]]],
                        "select": [false, [[0, [0, [0, 6, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT product FROM product WHERE product != (SELECT max_page_size FROM product GROUP BY max_page_size ORDER BY count(*) DESC LIMIT 1)",
        "query_toks": ["SELECT", "product", "FROM", "product", "WHERE", "product", "!", "=", "(", "SELECT", "max_page_size", "FROM", "product", "GROUP", "BY", "max_page_size", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1", ")"],
        "query_toks_no_value": ["select", "product", "from", "product", "where", "product", "!", "=", "(", "select", "max_page_size", "from", "product", "group", "by", "max_page_size", "order", "by", "count", "(", "*", ")", "desc", "limit", "value", ")"],
        "question": "What are the names of all products that are not the most frequently-used maximum page size?",
        "question_toks": ["What", "are", "the", "names", "of", "all", "products", "that", "are", "not", "the", "most", "frequently-used", "maximum", "page", "size", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 7, [0, [0, 2, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 0]]
                        },
                        "groupBy": [[0, 6, false]],
                        "having": [],
                        "intersect": null,
                        "limit": 1,
                        "orderBy": ["desc", [[0, [3, 0, false], null]]],
                        "select": [false, [[0, [0, [0, 6, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
        "query_toks": ["SELECT", "sum", "(", "city_population", ")", "FROM", "district", "WHERE", "city_area", ">", "(", "SELECT", "avg", "(", "city_area", ")", "FROM", "district", ")"],
        "query_toks_no_value": ["select", "sum", "(", "city_population", ")", "from", "district", "where", "city_area", ">", "(", "select", "avg", "(", "city_area", ")", "from", "district", ")"],
        "question": "Find the total population of the districts where the area is bigger than the average city area.",
        "question_toks": ["Find", "the", "total", "population", "of", "the", "districts", "where", "the", "area", "is", "bigger", "than", "the", "average", "city", "area", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 17, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 18, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 18, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT sum(city_population) FROM district WHERE city_area  >  (SELECT avg(city_area) FROM district)",
        "query_toks": ["SELECT", "sum", "(", "city_population", ")", "FROM", "district", "WHERE", "city_area", ">", "(", "SELECT", "avg", "(", "city_area", ")", "FROM", "district", ")"],
        "query_toks_no_value": ["select", "sum", "(", "city_population", ")", "from", "district", "where", "city_area", ">", "(", "select", "avg", "(", "city_area", ")", "from", "district", ")"],
        "question": "What is the total population for all the districts that have an area larger tahn the average city area?",
        "question_toks": ["What", "is", "the", "total", "population", "for", "all", "the", "districts", "that", "have", "an", "area", "larger", "tahn", "the", "average", "city", "area", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[4, [0, [0, 17, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 18, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 18, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
        "query_toks": ["SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "City", "Mall", "''", "INTERSECT", "SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "Village", "Store", "''"],
        "query_toks_no_value": ["select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value", "intersect", "select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value"],
        "question": "Find the names of districts where have both city mall and village store type stores.",
        "question_toks": ["Find", "the", "names", "of", "districts", "where", "have", "both", "city", "mall", "and", "village", "store", "type", "stores", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 4]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 15, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 10, false], null], "\"Village Store\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 10, false], null], "\"City Mall\"", null]]
        }
    }, {
        "db_id": "store_product",
        "query": "SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"City Mall\" INTERSECT SELECT t3.District_name FROM store AS t1 JOIN store_district AS t2 ON t1.store_id  =  t2.store_id JOIN district AS t3 ON t2.district_id  =  t3.district_id WHERE t1.Type  =  \"Village Store\"",
        "query_toks": ["SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "City", "Mall", "''", "INTERSECT", "SELECT", "t3.District_name", "FROM", "store", "AS", "t1", "JOIN", "store_district", "AS", "t2", "ON", "t1.store_id", "=", "t2.store_id", "JOIN", "district", "AS", "t3", "ON", "t2.district_id", "=", "t3.district_id", "WHERE", "t1.Type", "=", "``", "Village", "Store", "''"],
        "query_toks_no_value": ["select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value", "intersect", "select", "t3", ".", "district_name", "from", "store", "as", "t1", "join", "store_district", "as", "t2", "on", "t1", ".", "store_id", "=", "t2", ".", "store_id", "join", "district", "as", "t3", "on", "t2", ".", "district_id", "=", "t3", ".", "district_id", "where", "t1", ".", "type", "=", "value"],
        "question": "What are the names of the districts that have both mall and village store style shops?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "districts", "that", "have", "both", "mall", "and", "village", "store", "style", "shops", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 8, false], null], [0, 21, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 4]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 15, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 10, false], null], "\"Village Store\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 10, false], null], "\"City Mall\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(*) FROM STUDENT",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"],
        "question": "Find the number of students in total.",
        "question_toks": ["Find", "the", "number", "of", "students", "in", "total", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(*) FROM STUDENT",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student"],
        "question": "How many students are there in total?",
        "question_toks": ["How", "many", "students", "are", "there", "in", "total", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(*) FROM VOTING_RECORD",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "VOTING_RECORD"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "voting_record"],
        "question": "Find the number of voting records in total.",
        "question_toks": ["Find", "the", "number", "of", "voting", "records", "in", "total", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(*) FROM VOTING_RECORD",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "VOTING_RECORD"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "voting_record"],
        "question": "How many voting records do we have?",
        "question_toks": ["How", "many", "voting", "records", "do", "we", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "President_Vote", ")", "FROM", "VOTING_RECORD"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "president_vote", ")", "from", "voting_record"],
        "question": "Find the distinct number of president votes.",
        "question_toks": ["Find", "the", "distinct", "number", "of", "president", "votes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 12, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "President_Vote", ")", "FROM", "VOTING_RECORD"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "president_vote", ")", "from", "voting_record"],
        "question": "How many distinct president votes are recorded?",
        "question_toks": ["How", "many", "distinct", "president", "votes", "are", "recorded", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 12, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT max(Age) FROM STUDENT",
        "query_toks": ["SELECT", "max", "(", "Age", ")", "FROM", "STUDENT"],
        "query_toks_no_value": ["select", "max", "(", "age", ")", "from", "student"],
        "question": "Find the maximum age of all the students.",
        "question_toks": ["Find", "the", "maximum", "age", "of", "all", "the", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT max(Age) FROM STUDENT",
        "query_toks": ["SELECT", "max", "(", "Age", ")", "FROM", "STUDENT"],
        "query_toks_no_value": ["select", "max", "(", "age", ")", "from", "student"],
        "question": "What is the oldest age among the students?",
        "question_toks": ["What", "is", "the", "oldest", "age", "among", "the", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 4, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "query_toks": ["SELECT", "LName", "FROM", "STUDENT", "WHERE", "Major", "=", "50"],
        "query_toks_no_value": ["select", "lname", "from", "student", "where", "major", "=", "value"],
        "question": "Find the last names of students with major 50.",
        "question_toks": ["Find", "the", "last", "names", "of", "students", "with", "major", "50", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], 50.0, null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "query_toks": ["SELECT", "LName", "FROM", "STUDENT", "WHERE", "Major", "=", "50"],
        "query_toks_no_value": ["select", "lname", "from", "student", "where", "major", "=", "value"],
        "question": "What are the last names of students studying major 50?",
        "question_toks": ["What", "are", "the", "last", "names", "of", "students", "studying", "major", "50", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], 50.0, null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Fname FROM STUDENT WHERE Age  >  22",
        "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "WHERE", "Age", ">", "22"],
        "query_toks_no_value": ["select", "fname", "from", "student", "where", "age", ">", "value"],
        "question": "Find the first names of students with age above 22.",
        "question_toks": ["Find", "the", "first", "names", "of", "students", "with", "age", "above", "22", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 4, false], null], 22.0, null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Fname FROM STUDENT WHERE Age  >  22",
        "query_toks": ["SELECT", "Fname", "FROM", "STUDENT", "WHERE", "Age", ">", "22"],
        "query_toks_no_value": ["select", "fname", "from", "student", "where", "age", ">", "value"],
        "question": "What are the first names of all the students aged above 22?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "all", "the", "students", "aged", "above", "22", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 4, false], null], 22.0, null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"",
        "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "M", "''"],
        "query_toks_no_value": ["select", "major", "from", "student", "where", "sex", "=", "value"],
        "question": "What are the majors of male (sex is M) students?",
        "question_toks": ["What", "are", "the", "majors", "of", "male", "(", "sex", "is", "M", ")", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"M\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"M\"",
        "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "M", "''"],
        "query_toks_no_value": ["select", "major", "from", "student", "where", "sex", "=", "value"],
        "question": "List the major of each male student.",
        "question_toks": ["List", "the", "major", "of", "each", "male", "student", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"M\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"",
        "query_toks": ["SELECT", "avg", "(", "Age", ")", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''"],
        "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "student", "where", "sex", "=", "value"],
        "question": "What is the average age of female (sex is F) students?",
        "question_toks": ["What", "is", "the", "average", "age", "of", "female", "(", "sex", "is", "F", ")", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT avg(Age) FROM STUDENT WHERE Sex  =  \"F\"",
        "query_toks": ["SELECT", "avg", "(", "Age", ")", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''"],
        "query_toks_no_value": ["select", "avg", "(", "age", ")", "from", "student", "where", "sex", "=", "value"],
        "question": "Find the average age of female students.",
        "question_toks": ["Find", "the", "average", "age", "of", "female", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
        "query_toks": ["SELECT", "max", "(", "Age", ")", ",", "min", "(", "Age", ")", "FROM", "STUDENT", "WHERE", "Major", "=", "600"],
        "query_toks_no_value": ["select", "max", "(", "age", ")", ",", "min", "(", "age", ")", "from", "student", "where", "major", "=", "value"],
        "question": "What are the maximum and minimum age of students with major 600?",
        "question_toks": ["What", "are", "the", "maximum", "and", "minimum", "age", "of", "students", "with", "major", "600", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 4, false], null]], [2, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], 600.0, null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
        "query_toks": ["SELECT", "max", "(", "Age", ")", ",", "min", "(", "Age", ")", "FROM", "STUDENT", "WHERE", "Major", "=", "600"],
        "query_toks_no_value": ["select", "max", "(", "age", ")", ",", "min", "(", "age", ")", "from", "student", "where", "major", "=", "value"],
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "question_toks": ["Tell", "me", "the", "ages", "of", "the", "oldest", "and", "youngest", "students", "studying", "major", "600", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[1, [0, [0, 4, false], null]], [2, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 6, false], null], 600.0, null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"",
        "query_toks": ["SELECT", "Advisor", "FROM", "STUDENT", "WHERE", "city_code", "=", "``", "BAL", "''"],
        "query_toks_no_value": ["select", "advisor", "from", "student", "where", "city_code", "=", "value"],
        "question": "Who are the advisors for students that live in a city with city code \"BAL\"?",
        "question_toks": ["Who", "are", "the", "advisors", "for", "students", "that", "live", "in", "a", "city", "with", "city", "code", "``", "BAL", "''", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"BAL\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Advisor FROM STUDENT WHERE city_code  =  \"BAL\"",
        "query_toks": ["SELECT", "Advisor", "FROM", "STUDENT", "WHERE", "city_code", "=", "``", "BAL", "''"],
        "query_toks_no_value": ["select", "advisor", "from", "student", "where", "city_code", "=", "value"],
        "question": "Show the advisors of the students whose city of residence has city code \"BAL\".",
        "question_toks": ["Show", "the", "advisors", "of", "the", "students", "whose", "city", "of", "residence", "has", "city", "code", "``", "BAL", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"BAL\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query_toks": ["SELECT", "DISTINCT", "Secretary_Vote", "FROM", "VOTING_RECORD", "WHERE", "ELECTION_CYCLE", "=", "``", "Fall", "''"],
        "query_toks_no_value": ["select", "distinct", "secretary_vote", "from", "voting_record", "where", "election_cycle", "=", "value"],
        "question": "What are the distinct secretary votes in the fall election cycle?",
        "question_toks": ["What", "are", "the", "distinct", "secretary", "votes", "in", "the", "fall", "election", "cycle", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], "\"Fall\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "query_toks": ["SELECT", "DISTINCT", "Secretary_Vote", "FROM", "VOTING_RECORD", "WHERE", "ELECTION_CYCLE", "=", "``", "Fall", "''"],
        "query_toks_no_value": ["select", "distinct", "secretary_vote", "from", "voting_record", "where", "election_cycle", "=", "value"],
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "question_toks": ["Return", "all", "the", "distinct", "secretary", "votes", "made", "in", "the", "fall", "election", "cycle", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], "\"Fall\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08\/30\/2015\"",
        "query_toks": ["SELECT", "DISTINCT", "PRESIDENT_Vote", "FROM", "VOTING_RECORD", "WHERE", "Registration_Date", "=", "``", "08\/30\/2015", "''"],
        "query_toks_no_value": ["select", "distinct", "president_vote", "from", "voting_record", "where", "registration_date", "=", "value"],
        "question": "What are the distinct president votes on 08\/30\/2015?",
        "question_toks": ["What", "are", "the", "distinct", "president", "votes", "on", "08\/30\/2015", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 10, false], null], "\"08\/30\/2015\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08\/30\/2015\"",
        "query_toks": ["SELECT", "DISTINCT", "PRESIDENT_Vote", "FROM", "VOTING_RECORD", "WHERE", "Registration_Date", "=", "``", "08\/30\/2015", "''"],
        "query_toks_no_value": ["select", "distinct", "president_vote", "from", "voting_record", "where", "registration_date", "=", "value"],
        "question": "Show all the distinct president votes made on 08\/30\/2015.",
        "question_toks": ["Show", "all", "the", "distinct", "president", "votes", "made", "on", "08\/30\/2015", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 10, false], null], "\"08\/30\/2015\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD",
        "query_toks": ["SELECT", "DISTINCT", "Registration_Date", ",", "Election_Cycle", "FROM", "VOTING_RECORD"],
        "query_toks_no_value": ["select", "distinct", "registration_date", ",", "election_cycle", "from", "voting_record"],
        "question": "Report the distinct registration date and the election cycle.",
        "question_toks": ["Report", "the", "distinct", "registration", "date", "and", "the", "election", "cycle", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 10, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT Registration_Date ,  Election_Cycle FROM VOTING_RECORD",
        "query_toks": ["SELECT", "DISTINCT", "Registration_Date", ",", "Election_Cycle", "FROM", "VOTING_RECORD"],
        "query_toks_no_value": ["select", "distinct", "registration_date", ",", "election_cycle", "from", "voting_record"],
        "question": "What are the distinct registration dates and the election cycles?",
        "question_toks": ["What", "are", "the", "distinct", "registration", "dates", "and", "the", "election", "cycles", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 10, false], null]], [0, [0, [0, 11, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "query_toks": ["SELECT", "DISTINCT", "President_Vote", ",", "VICE_President_Vote", "FROM", "VOTING_RECORD"],
        "query_toks_no_value": ["select", "distinct", "president_vote", ",", "vice_president_vote", "from", "voting_record"],
        "question": "Report the distinct president vote and the vice president vote.",
        "question_toks": ["Report", "the", "distinct", "president", "vote", "and", "the", "vice", "president", "vote", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "query_toks": ["SELECT", "DISTINCT", "President_Vote", ",", "VICE_President_Vote", "FROM", "VOTING_RECORD"],
        "query_toks_no_value": ["select", "distinct", "president_vote", ",", "vice_president_vote", "from", "voting_record"],
        "question": "List all the distinct president votes and the vice president votes.",
        "question_toks": ["List", "all", "the", "distinct", "president", "votes", "and", "the", "vice", "president", "votes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 12, false], null]], [0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.CLASS_President_VOTE"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "class_president_vote"],
        "question": "Find the distinct last names of the students who have class president votes.",
        "question_toks": ["Find", "the", "distinct", "last", "names", "of", "the", "students", "who", "have", "class", "president", "votes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.CLASS_President_VOTE"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "class_president_vote"],
        "question": "What are the distinct last names of the students who have class president votes?",
        "question_toks": ["What", "are", "the", "distinct", "last", "names", "of", "the", "students", "who", "have", "class", "president", "votes", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 16, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "query_toks": ["SELECT", "DISTINCT", "T1.Fname", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.CLASS_Senator_VOTE"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "class_senator_vote"],
        "question": "Find the distinct first names of the students who have class senator votes.",
        "question_toks": ["Find", "the", "distinct", "first", "names", "of", "the", "students", "who", "have", "class", "senator", "votes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "query_toks": ["SELECT", "DISTINCT", "T1.Fname", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.CLASS_Senator_VOTE"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "class_senator_vote"],
        "question": "What are the distinct first names of the students who have class president votes?",
        "question_toks": ["What", "are", "the", "distinct", "first", "names", "of", "the", "students", "who", "have", "class", "president", "votes", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.Age", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Secretary_Vote", "WHERE", "T2.Election_Cycle", "=", "``", "Fall", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "age", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "secretary_vote", "where", "t2", ".", "election_cycle", "=", "value"],
        "question": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
        "question_toks": ["Find", "the", "distinct", "ages", "of", "students", "who", "have", "secretary", "votes", "in", "the", "fall", "election", "cycle", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], "\"Fall\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.Age", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Secretary_Vote", "WHERE", "T2.Election_Cycle", "=", "``", "Fall", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "age", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "secretary_vote", "where", "t2", ".", "election_cycle", "=", "value"],
        "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
        "question_toks": ["What", "are", "the", "distinct", "ages", "of", "students", "who", "have", "secretary", "votes", "in", "the", "fall", "election", "cycle", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], "\"Fall\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.Advisor", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Treasurer_Vote", "WHERE", "T2.Election_Cycle", "=", "``", "Spring", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "advisor", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "treasurer_vote", "where", "t2", ".", "election_cycle", "=", "value"],
        "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
        "question_toks": ["Find", "the", "distinct", "Advisor", "of", "students", "who", "have", "treasurer", "votes", "in", "the", "spring", "election", "cycle", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], "\"Spring\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.Advisor", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Treasurer_Vote", "WHERE", "T2.Election_Cycle", "=", "``", "Spring", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "advisor", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "treasurer_vote", "where", "t2", ".", "election_cycle", "=", "value"],
        "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?",
        "question_toks": ["Who", "served", "as", "an", "advisor", "for", "students", "who", "have", "treasurer", "votes", "in", "the", "spring", "election", "cycle", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 11, false], null], "\"Spring\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "query_toks": ["SELECT", "DISTINCT", "T1.Major", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Treasurer_Vote"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "major", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "treasurer_vote"],
        "question": "Find the distinct majors of students who have treasurer votes.",
        "question_toks": ["Find", "the", "distinct", "majors", "of", "students", "who", "have", "treasurer", "votes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "query_toks": ["SELECT", "DISTINCT", "T1.Major", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.Treasurer_Vote"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "major", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "treasurer_vote"],
        "question": "What are the distinct majors that students with treasurer votes are studying?",
        "question_toks": ["What", "are", "the", "distinct", "majors", "that", "students", "with", "treasurer", "votes", "are", "studying", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 15, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.Fname", ",", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.President_VOTE", "WHERE", "T1.sex", "=", "``", "F", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "president_vote", "where", "t1", ".", "sex", "=", "value"],
        "question": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "question_toks": ["Find", "the", "first", "and", "last", "names", "of", "all", "the", "female", "(", "sex", "is", "F", ")", "students", "who", "have", "president", "votes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.Fname", ",", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.President_VOTE", "WHERE", "T1.sex", "=", "``", "F", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "president_vote", "where", "t1", ".", "sex", "=", "value"],
        "question": "What are the first and last names of all the female students who have president votes?",
        "question_toks": ["What", "are", "the", "first", "and", "last", "names", "of", "all", "the", "female", "students", "who", "have", "president", "votes", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query_toks": ["SELECT", "DISTINCT", "T1.Fname", ",", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.VICE_President_VOTE", "WHERE", "T1.age", "=", "18"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "vice_president_vote", "where", "t1", ".", "age", "=", "value"],
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "all", "the", "students", "of", "age", "18", "who", "have", "vice", "president", "votes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], 18.0, null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "query_toks": ["SELECT", "DISTINCT", "T1.Fname", ",", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.VICE_President_VOTE", "WHERE", "T1.age", "=", "18"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "vice_president_vote", "where", "t1", ".", "age", "=", "value"],
        "question": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
        "question_toks": ["What", "are", "the", "first", "names", "and", "last", "names", "of", "the", "students", "who", "are", "18", "years", "old", "and", "have", "vice", "president", "votes", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]], [0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 4, false], null], 18.0, null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "Class_Senator_Vote", "WHERE", "T1.Sex", "=", "``", "M", "''", "AND", "T2.Election_Cycle", "=", "``", "Fall", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "class_senator_vote", "where", "t1", ".", "sex", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"],
        "question": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "question_toks": ["How", "many", "male", "(", "sex", "is", "M", ")", "students", "have", "class", "senator", "votes", "in", "the", "fall", "election", "cycle", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"M\"", null], "and", [false, 2, [0, [0, 11, false], null], "\"Fall\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "Class_Senator_Vote", "WHERE", "T1.Sex", "=", "``", "M", "''", "AND", "T2.Election_Cycle", "=", "``", "Fall", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "class_senator_vote", "where", "t1", ".", "sex", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"],
        "question": "Count the number of male students who had class senator votes in the fall election cycle.",
        "question_toks": ["Count", "the", "number", "of", "male", "students", "who", "had", "class", "senator", "votes", "in", "the", "fall", "election", "cycle", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"M\"", null], "and", [false, 2, [0, [0, 11, false], null], "\"Fall\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "Class_Senator_Vote", "WHERE", "T1.city_code", "=", "``", "NYC", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "class_senator_vote", "where", "t1", ".", "city_code", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"],
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "question_toks": ["Find", "the", "number", "of", "students", "whose", "city", "code", "is", "NYC", "and", "who", "have", "class", "senator", "votes", "in", "the", "spring", "election", "cycle", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"NYC\"", null], "and", [false, 2, [0, [0, 11, false], null], "\"Spring\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "Class_Senator_Vote", "WHERE", "T1.city_code", "=", "``", "NYC", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "class_senator_vote", "where", "t1", ".", "city_code", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"],
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "question_toks": ["Which", "students", "live", "in", "the", "city", "with", "code", "``", "NYC", "''", "and", "have", "class", "senator", "votes", "in", "the", "spring", "election", "cycle", "?", "Count", "the", "numbers", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"NYC\"", null], "and", [false, 2, [0, [0, 11, false], null], "\"Spring\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query_toks": ["SELECT", "avg", "(", "T1.Age", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "SECRETARY_Vote", "WHERE", "T1.city_code", "=", "``", "NYC", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"],
        "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "secretary_vote", "where", "t1", ".", "city_code", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"],
        "question": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
        "question_toks": ["Find", "the", "average", "age", "of", "students", "who", "live", "in", "the", "city", "with", "code", "``", "NYC", "''", "and", "have", "secretary", "votes", "in", "the", "spring", "election", "cycle", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"NYC\"", null], "and", [false, 2, [0, [0, 11, false], null], "\"Spring\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "query_toks": ["SELECT", "avg", "(", "T1.Age", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "SECRETARY_Vote", "WHERE", "T1.city_code", "=", "``", "NYC", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"],
        "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "secretary_vote", "where", "t1", ".", "city_code", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"],
        "question": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?",
        "question_toks": ["What", "is", "the", "average", "age", "of", "students", "who", "have", "city", "code", "``", "NYC", "''", "and", "have", "secretary", "votes", "for", "the", "spring", "election", "cycle", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 8, false], null], "\"NYC\"", null], "and", [false, 2, [0, [0, 11, false], null], "\"Spring\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "query_toks": ["SELECT", "avg", "(", "T1.Age", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "SECRETARY_Vote", "WHERE", "T1.Sex", "=", "``", "F", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"],
        "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "secretary_vote", "where", "t1", ".", "sex", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"],
        "question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "question_toks": ["Find", "the", "average", "age", "of", "female", "(", "sex", "is", "F", ")", "students", "who", "have", "secretary", "votes", "in", "the", "spring", "election", "cycle", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null], "and", [false, 2, [0, [0, 11, false], null], "\"Spring\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "query_toks": ["SELECT", "avg", "(", "T1.Age", ")", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "SECRETARY_Vote", "WHERE", "T1.Sex", "=", "``", "F", "''", "AND", "T2.Election_Cycle", "=", "``", "Spring", "''"],
        "query_toks_no_value": ["select", "avg", "(", "t1", ".", "age", ")", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "secretary_vote", "where", "t1", ".", "sex", "=", "value", "and", "t2", ".", "election_cycle", "=", "value"],
        "question": "What is the average age of the female students with secretary votes in the spring election cycle?",
        "question_toks": ["What", "is", "the", "average", "age", "of", "the", "female", "students", "with", "secretary", "votes", "in", "the", "spring", "election", "cycle", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 14, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null], "and", [false, 2, [0, [0, 11, false], null], "\"Spring\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.Fname", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.VICE_PRESIDENT_Vote", "EXCEPT", "SELECT", "DISTINCT", "Fname", "FROM", "STUDENT", "WHERE", "city_code", "=", "``", "PIT", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "vice_president_vote", "except", "select", "distinct", "fname", "from", "student", "where", "city_code", "=", "value"],
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "question_toks": ["Find", "the", "distinct", "first", "names", "of", "all", "the", "students", "who", "have", "vice", "president", "votes", "and", "whose", "city", "code", "is", "not", "PIT", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 3, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 8, false], null], "\"PIT\"", null]]
            },
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.Fname", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "T2.VICE_PRESIDENT_Vote", "EXCEPT", "SELECT", "DISTINCT", "Fname", "FROM", "STUDENT", "WHERE", "city_code", "=", "``", "PIT", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "fname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "vice_president_vote", "except", "select", "distinct", "fname", "from", "student", "where", "city_code", "=", "value"],
        "question": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?",
        "question_toks": ["What", "are", "the", "distinct", "first", "names", "of", "the", "students", "who", "have", "vice", "president", "votes", "and", "reside", "in", "a", "city", "whose", "city", "code", "is", "not", "PIT", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 3, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 8, false], null], "\"PIT\"", null]]
            },
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "PRESIDENT_Vote", "EXCEPT", "SELECT", "DISTINCT", "LName", "FROM", "STUDENT", "WHERE", "Advisor", "=", "``", "2192", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "president_vote", "except", "select", "distinct", "lname", "from", "student", "where", "advisor", "=", "value"],
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "question_toks": ["Find", "the", "distinct", "last", "names", "of", "all", "the", "students", "who", "have", "president", "votes", "and", "whose", "advisor", "is", "not", "2192", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 7, false], null], "\"2192\"", null]]
            },
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "PRESIDENT_Vote", "EXCEPT", "SELECT", "DISTINCT", "LName", "FROM", "STUDENT", "WHERE", "Advisor", "=", "``", "2192", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "president_vote", "except", "select", "distinct", "lname", "from", "student", "where", "advisor", "=", "value"],
        "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?",
        "question_toks": ["What", "are", "the", "distinct", "last", "names", "of", "the", "students", "who", "have", "president", "votes", "but", "do", "not", "have", "2192", "as", "the", "advisor", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 7, false], null], "\"2192\"", null]]
            },
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "PRESIDENT_Vote", "INTERSECT", "SELECT", "DISTINCT", "LName", "FROM", "STUDENT", "WHERE", "Advisor", "=", "``", "8741", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "president_vote", "intersect", "select", "distinct", "lname", "from", "student", "where", "advisor", "=", "value"],
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
        "question_toks": ["Find", "the", "distinct", "last", "names", "of", "all", "the", "students", "who", "have", "president", "votes", "and", "whose", "advisor", "is", "8741", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 7, false], null], "\"8741\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.LName", "FROM", "STUDENT", "AS", "T1", "JOIN", "VOTING_RECORD", "AS", "T2", "ON", "T1.StuID", "=", "PRESIDENT_Vote", "INTERSECT", "SELECT", "DISTINCT", "LName", "FROM", "STUDENT", "WHERE", "Advisor", "=", "``", "8741", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "student", "as", "t1", "join", "voting_record", "as", "t2", "on", "t1", ".", "stuid", "=", "president_vote", "intersect", "select", "distinct", "lname", "from", "student", "where", "advisor", "=", "value"],
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
        "question_toks": ["What", "are", "the", "distinct", "last", "names", "of", "the", "students", "who", "have", "president", "votes", "and", "have", "8741", "as", "the", "advisor", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 7, false], null], "\"8741\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor",
        "query_toks": ["SELECT", "Advisor", ",", "count", "(", "*", ")", "FROM", "STUDENT", "GROUP", "BY", "Advisor"],
        "query_toks_no_value": ["select", "advisor", ",", "count", "(", "*", ")", "from", "student", "group", "by", "advisor"],
        "question": "For each advisor, report the total number of students advised by him or her.",
        "question_toks": ["For", "each", "advisor", ",", "report", "the", "total", "number", "of", "students", "advised", "by", "him", "or", "her", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Advisor ,  count(*) FROM STUDENT GROUP BY Advisor",
        "query_toks": ["SELECT", "Advisor", ",", "count", "(", "*", ")", "FROM", "STUDENT", "GROUP", "BY", "Advisor"],
        "query_toks_no_value": ["select", "advisor", ",", "count", "(", "*", ")", "from", "student", "group", "by", "advisor"],
        "question": "How many students does each advisor have?",
        "question_toks": ["How", "many", "students", "does", "each", "advisor", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2",
        "query_toks": ["SELECT", "Advisor", "FROM", "STUDENT", "GROUP", "BY", "Advisor", "HAVING", "COUNT", "(", "*", ")", ">", "2"],
        "query_toks_no_value": ["select", "advisor", "from", "student", "group", "by", "advisor", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Report all advisors that advise more than 2 students.",
        "question_toks": ["Report", "all", "advisors", "that", "advise", "more", "than", "2", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 7, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING COUNT(*)  >  2",
        "query_toks": ["SELECT", "Advisor", "FROM", "STUDENT", "GROUP", "BY", "Advisor", "HAVING", "COUNT", "(", "*", ")", ">", "2"],
        "query_toks_no_value": ["select", "advisor", "from", "student", "group", "by", "advisor", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Which advisors have more than two students?",
        "question_toks": ["Which", "advisors", "have", "more", "than", "two", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 7, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
        "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "GROUP", "BY", "Major", "HAVING", "COUNT", "(", "*", ")", "<", "3"],
        "query_toks_no_value": ["select", "major", "from", "student", "group", "by", "major", "having", "count", "(", "*", ")", "<", "value"],
        "question": "Report all majors that have less than 3 students.",
        "question_toks": ["Report", "all", "majors", "that", "have", "less", "than", "3", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [[false, 4, [0, [3, 0, false], null], 3.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Major FROM STUDENT GROUP BY Major HAVING COUNT(*)  <  3",
        "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "GROUP", "BY", "Major", "HAVING", "COUNT", "(", "*", ")", "<", "3"],
        "query_toks_no_value": ["select", "major", "from", "student", "group", "by", "major", "having", "count", "(", "*", ")", "<", "value"],
        "question": "What are the majors only less than three students are studying?",
        "question_toks": ["What", "are", "the", "majors", "only", "less", "than", "three", "students", "are", "studying", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [[false, 4, [0, [3, 0, false], null], 3.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
        "query_toks": ["SELECT", "Election_Cycle", ",", "count", "(", "*", ")", "FROM", "VOTING_RECORD", "GROUP", "BY", "Election_Cycle"],
        "query_toks_no_value": ["select", "election_cycle", ",", "count", "(", "*", ")", "from", "voting_record", "group", "by", "election_cycle"],
        "question": "For each election cycle, report the number of voting records.",
        "question_toks": ["For", "each", "election", "cycle", ",", "report", "the", "number", "of", "voting", "records", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 11, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 11, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Election_Cycle ,  count(*) FROM VOTING_RECORD GROUP BY Election_Cycle",
        "query_toks": ["SELECT", "Election_Cycle", ",", "count", "(", "*", ")", "FROM", "VOTING_RECORD", "GROUP", "BY", "Election_Cycle"],
        "query_toks_no_value": ["select", "election_cycle", ",", "count", "(", "*", ")", "from", "voting_record", "group", "by", "election_cycle"],
        "question": "Count the number of voting records for each election cycle.",
        "question_toks": ["Count", "the", "number", "of", "voting", "records", "for", "each", "election", "cycle", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 11, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 11, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "major", "from", "student", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which major has the most students?",
        "question_toks": ["Which", "major", "has", "the", "most", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Major FROM STUDENT GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "major", "from", "student", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the major that is studied by the largest number of students.",
        "question_toks": ["Find", "the", "major", "that", "is", "studied", "by", "the", "largest", "number", "of", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "major", "from", "student", "where", "sex", "=", "value", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the most common major among female (sex is F) students?",
        "question_toks": ["What", "is", "the", "most", "common", "major", "among", "female", "(", "sex", "is", "F", ")", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "Major", "FROM", "STUDENT", "WHERE", "Sex", "=", "``", "F", "''", "GROUP", "BY", "major", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "major", "from", "student", "where", "sex", "=", "value", "group", "by", "major", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the major that is studied by the most female students.",
        "question_toks": ["Find", "the", "major", "that", "is", "studied", "by", "the", "most", "female", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 6, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 5, false], null], "\"F\"", null]]
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "city_code", "FROM", "STUDENT", "GROUP", "BY", "city_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "city_code", "from", "student", "group", "by", "city_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the city_code of the city that the most students live in?",
        "question_toks": ["What", "is", "the", "city_code", "of", "the", "city", "that", "the", "most", "students", "live", "in", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT city_code FROM STUDENT GROUP BY city_code ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "city_code", "FROM", "STUDENT", "GROUP", "BY", "city_code", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "city_code", "from", "student", "group", "by", "city_code", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Return the code of the city that has the most students.",
        "question_toks": ["Return", "the", "code", "of", "the", "city", "that", "has", "the", "most", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 8, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2",
        "query_toks": ["SELECT", "Advisor", "FROM", "STUDENT", "GROUP", "BY", "Advisor", "HAVING", "count", "(", "*", ")", ">", "2"],
        "query_toks_no_value": ["select", "advisor", "from", "student", "group", "by", "advisor", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Report the distinct advisors who have more than 2 students.",
        "question_toks": ["Report", "the", "distinct", "advisors", "who", "have", "more", "than", "2", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 7, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "voter_2",
        "query": "SELECT Advisor FROM STUDENT GROUP BY Advisor HAVING count(*)  >  2",
        "query_toks": ["SELECT", "Advisor", "FROM", "STUDENT", "GROUP", "BY", "Advisor", "HAVING", "count", "(", "*", ")", ">", "2"],
        "query_toks_no_value": ["select", "advisor", "from", "student", "group", "by", "advisor", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Which advisors are advising more than 2 students?",
        "question_toks": ["Which", "advisors", "are", "advising", "more", "than", "2", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 7, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT count(*) FROM event",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "event"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "event"],
        "question": "How many events are there?",
        "question_toks": ["How", "many", "events", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT name FROM event ORDER BY YEAR DESC",
        "query_toks": ["SELECT", "name", "FROM", "event", "ORDER", "BY", "YEAR", "DESC"],
        "query_toks_no_value": ["select", "name", "from", "event", "order", "by", "year", "desc"],
        "question": "List all the event names by year from the most recent to the oldest.",
        "question_toks": ["List", "all", "the", "event", "names", "by", "year", "from", "the", "most", "recent", "to", "the", "oldest", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["desc", [[0, [0, 21, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "query_toks": ["SELECT", "name", "FROM", "event", "ORDER", "BY", "YEAR", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", "from", "event", "order", "by", "year", "desc", "limit", "value"],
        "question": "What is the name of the event that happened in the most recent year?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "event", "that", "happened", "in", "the", "most", "recent", "year", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 21, false], null]]],
            "select": [false, [[0, [0, [0, 19, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT count(*) FROM stadium",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "stadium"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "stadium"],
        "question": "How many stadiums are there?",
        "question_toks": ["How", "many", "stadiums", "are", "there", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT name FROM stadium ORDER BY capacity DESC LIMIT 1",
        "query_toks": ["SELECT", "name", "FROM", "stadium", "ORDER", "BY", "capacity", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "name", "from", "stadium", "order", "by", "capacity", "desc", "limit", "value"],
        "question": "Find the name of the stadium that has the maximum capacity.",
        "question_toks": ["Find", "the", "name", "of", "the", "stadium", "that", "has", "the", "maximum", "capacity", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 14, false], null]]],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT name FROM stadium WHERE capacity  <  (SELECT avg(capacity) FROM stadium)",
        "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "capacity", "<", "(", "SELECT", "avg", "(", "capacity", ")", "FROM", "stadium", ")"],
        "query_toks_no_value": ["select", "name", "from", "stadium", "where", "capacity", "<", "(", "select", "avg", "(", "capacity", ")", "from", "stadium", ")"],
        "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "question_toks": ["Find", "the", "names", "of", "stadiums", "whose", "capacity", "is", "smaller", "than", "the", "average", "capacity", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 14, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 1]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[5, [0, [0, 14, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT country FROM stadium GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "country", "FROM", "stadium", "GROUP", "BY", "country", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "country", "from", "stadium", "group", "by", "country", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the country that has the most stadiums.",
        "question_toks": ["Find", "the", "country", "that", "has", "the", "most", "stadiums", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 16, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT country FROM stadium GROUP BY country HAVING count(*)  <=  3",
        "query_toks": ["SELECT", "country", "FROM", "stadium", "GROUP", "BY", "country", "HAVING", "count", "(", "*", ")", "<", "=", "3"],
        "query_toks_no_value": ["select", "country", "from", "stadium", "group", "by", "country", "having", "count", "(", "*", ")", "<", "=", "value"],
        "question": "Which country has at most 3 stadiums listed?",
        "question_toks": ["Which", "country", "has", "at", "most", "3", "stadiums", "listed", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 16, false]],
            "having": [[false, 6, [0, [3, 0, false], null], 3.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT country FROM stadium WHERE capacity  >  60000 INTERSECT SELECT country FROM stadium WHERE capacity  <  50000",
        "query_toks": ["SELECT", "country", "FROM", "stadium", "WHERE", "capacity", ">", "60000", "INTERSECT", "SELECT", "country", "FROM", "stadium", "WHERE", "capacity", "<", "50000"],
        "query_toks_no_value": ["select", "country", "from", "stadium", "where", "capacity", ">", "value", "intersect", "select", "country", "from", "stadium", "where", "capacity", "<", "value"],
        "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
        "question_toks": ["Which", "country", "has", "both", "stadiums", "with", "capacity", "greater", "than", "60000", "and", "stadiums", "with", "capacity", "less", "than", "50000", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 4, [0, [0, 14, false], null], 50000.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 14, false], null], 60000.0, null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT count(DISTINCT city) FROM stadium WHERE opening_year  <  2006",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "city", ")", "FROM", "stadium", "WHERE", "opening_year", "<", "2006"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "city", ")", "from", "stadium", "where", "opening_year", "<", "value"],
        "question": "How many cities have a stadium that was opened before the year of 2006?",
        "question_toks": ["How", "many", "cities", "have", "a", "stadium", "that", "was", "opened", "before", "the", "year", "of", "2006", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 15, true], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 17, false], null], 2006.0, null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT country ,  count(*) FROM stadium GROUP BY country",
        "query_toks": ["SELECT", "country", ",", "count", "(", "*", ")", "FROM", "stadium", "GROUP", "BY", "country"],
        "query_toks_no_value": ["select", "country", ",", "count", "(", "*", ")", "from", "stadium", "group", "by", "country"],
        "question": "How many stadiums does each country have?",
        "question_toks": ["How", "many", "stadiums", "does", "each", "country", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [[0, 16, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006",
        "query_toks": ["SELECT", "country", "FROM", "stadium", "EXCEPT", "SELECT", "country", "FROM", "stadium", "WHERE", "opening_year", ">", "2006"],
        "query_toks_no_value": ["select", "country", "from", "stadium", "except", "select", "country", "from", "stadium", "where", "opening_year", ">", "value"],
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "question_toks": ["Which", "countries", "do", "not", "have", "a", "stadium", "that", "was", "opened", "after", "2006", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 3, [0, [0, 17, false], null], 2006.0, null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT count(*) FROM stadium WHERE country != 'Russia'",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "stadium", "WHERE", "country", "!", "=", "'Russia", "'"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "stadium", "where", "country", "!", "=", "value"],
        "question": "How many stadiums are not in country \"Russia\"?",
        "question_toks": ["How", "many", "stadiums", "are", "not", "in", "country", "``", "Russia", "''", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 7, [0, [0, 16, false], null], "\"Russia\"", null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT name FROM swimmer ORDER BY meter_100",
        "query_toks": ["SELECT", "name", "FROM", "swimmer", "ORDER", "BY", "meter_100"],
        "query_toks_no_value": ["select", "name", "from", "swimmer", "order", "by", "meter_100"],
        "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
        "question_toks": ["Find", "the", "names", "of", "all", "swimmers", ",", "sorted", "by", "their", "100", "meter", "scores", "in", "ascending", "order", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 4, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT count(DISTINCT nationality) FROM swimmer",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "nationality", ")", "FROM", "swimmer"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "nationality", ")", "from", "swimmer"],
        "question": "How many different countries are all the swimmers from?",
        "question_toks": ["How", "many", "different", "countries", "are", "all", "the", "swimmers", "from", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 3, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT nationality ,  count(*) FROM swimmer GROUP BY nationality HAVING count(*)  >  1",
        "query_toks": ["SELECT", "nationality", ",", "count", "(", "*", ")", "FROM", "swimmer", "GROUP", "BY", "nationality", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "nationality", ",", "count", "(", "*", ")", "from", "swimmer", "group", "by", "nationality", "having", "count", "(", "*", ")", ">", "value"],
        "question": "List countries that have more than one swimmer.",
        "question_toks": ["List", "countries", "that", "have", "more", "than", "one", "swimmer", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [[0, 3, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "query_toks": ["SELECT", "meter_200", ",", "meter_300", "FROM", "swimmer", "WHERE", "nationality", "=", "'Australia", "'"],
        "query_toks_no_value": ["select", "meter_200", ",", "meter_300", "from", "swimmer", "where", "nationality", "=", "value"],
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "question_toks": ["Find", "all", "200", "meter", "and", "300", "meter", "results", "of", "swimmers", "with", "nationality", "``", "Australia", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]], [0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 3, false], null], "\"Australia\"", null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win'",
        "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Win", "'"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value"],
        "question": "Find the names of swimmers who has a result of \"win\".",
        "question_toks": ["Find", "the", "names", "of", "swimmers", "who", "has", "a", "result", "of", "``", "win", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 23, false], null], "\"Win\"", null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "t1.name", "FROM", "stadium", "AS", "t1", "JOIN", "event", "AS", "t2", "ON", "t1.id", "=", "t2.stadium_id", "GROUP", "BY", "t2.stadium_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "stadium", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name of the stadium which held the most events?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "stadium", "which", "held", "the", "most", "events", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 12, false], null], [0, 20, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [[0, 20, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT t1.name ,  t1.capacity FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id WHERE t2.name  =  'World Junior'",
        "query_toks": ["SELECT", "t1.name", ",", "t1.capacity", "FROM", "stadium", "AS", "t1", "JOIN", "event", "AS", "t2", "ON", "t1.id", "=", "t2.stadium_id", "WHERE", "t2.name", "=", "'World", "Junior", "'"],
        "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "capacity", "from", "stadium", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "stadium_id", "where", "t2", ".", "name", "=", "value"],
        "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
        "question_toks": ["Find", "the", "name", "and", "capacity", "of", "the", "stadium", "where", "the", "event", "named", "``", "World", "Junior", "''", "happened", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 12, false], null], [0, 20, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]], [0, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"World Junior\"", null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT name FROM stadium WHERE id NOT IN (SELECT stadium_id FROM event)",
        "query_toks": ["SELECT", "name", "FROM", "stadium", "WHERE", "id", "NOT", "IN", "(", "SELECT", "stadium_id", "FROM", "event", ")"],
        "query_toks_no_value": ["select", "name", "from", "stadium", "where", "id", "not", "in", "(", "select", "stadium_id", "from", "event", ")"],
        "question": "Find the names of stadiums which have never had any event.",
        "question_toks": ["Find", "the", "names", "of", "stadiums", "which", "have", "never", "had", "any", "event", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 12, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 2]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 20, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "GROUP", "BY", "t2.swimmer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "group", "by", "t2", ".", "swimmer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the name of the swimmer who has the most records.",
        "question_toks": ["Find", "the", "name", "of", "the", "swimmer", "who", "has", "the", "most", "records", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [[0, 24, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "GROUP", "BY", "t2.swimmer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "group", "by", "t2", ".", "swimmer_id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Find the name of the swimmer who has at least 2 records.",
        "question_toks": ["Find", "the", "name", "of", "the", "swimmer", "who", "has", "at", "least", "2", "records", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [[0, 24, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
        "query_toks": ["SELECT", "t1.name", ",", "t1.nationality", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Win", "'", "GROUP", "BY", "t2.swimmer_id", "HAVING", "count", "(", "*", ")", ">", "1"],
        "query_toks_no_value": ["select", "t1", ".", "name", ",", "t1", ".", "nationality", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value", "group", "by", "t2", ".", "swimmer_id", "having", "count", "(", "*", ")", ">", "value"],
        "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "question_toks": ["Find", "the", "name", "and", "nationality", "of", "the", "swimmer", "who", "has", "won", "(", "i.e.", ",", "has", "a", "result", "of", "``", "win", "''", ")", "more", "than", "1", "time", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [[0, 24, false]],
            "having": [[false, 3, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 23, false], null], "\"Win\"", null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT name FROM swimmer WHERE id NOT IN (SELECT swimmer_id FROM record)",
        "query_toks": ["SELECT", "name", "FROM", "swimmer", "WHERE", "id", "NOT", "IN", "(", "SELECT", "swimmer_id", "FROM", "record", ")"],
        "query_toks_no_value": ["select", "name", "from", "swimmer", "where", "id", "not", "in", "(", "select", "swimmer_id", "from", "record", ")"],
        "question": "Find the names of the swimmers who have no record.",
        "question_toks": ["Find", "the", "names", "of", "the", "swimmers", "who", "have", "no", "record", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[true, 8, [0, [0, 1, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 3]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[0, [0, [0, 24, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' INTERSECT SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Loss'",
        "query_toks": ["SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Win", "'", "INTERSECT", "SELECT", "t1.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "WHERE", "RESULT", "=", "'Loss", "'"],
        "query_toks_no_value": ["select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value", "intersect", "select", "t1", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "where", "result", "=", "value"],
        "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "question_toks": ["Find", "the", "names", "of", "the", "swimmers", "who", "have", "both", "``", "win", "''", "and", "``", "loss", "''", "results", "in", "the", "record", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                    "table_units": [["table_unit", 0], ["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 23, false], null], "\"Loss\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 23, false], null], "\"Win\"", null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'",
        "query_toks": ["SELECT", "t4.name", "FROM", "swimmer", "AS", "t1", "JOIN", "record", "AS", "t2", "ON", "t1.id", "=", "t2.swimmer_id", "JOIN", "event", "AS", "t3", "ON", "t2.event_id", "=", "t3.id", "JOIN", "stadium", "AS", "t4", "ON", "t4.id", "=", "t3.stadium_id", "WHERE", "t1.nationality", "=", "'Australia", "'"],
        "query_toks_no_value": ["select", "t4", ".", "name", "from", "swimmer", "as", "t1", "join", "record", "as", "t2", "on", "t1", ".", "id", "=", "t2", ".", "swimmer_id", "join", "event", "as", "t3", "on", "t2", ".", "event_id", "=", "t3", ".", "id", "join", "stadium", "as", "t4", "on", "t4", ".", "id", "=", "t3", ".", "stadium_id", "where", "t1", ".", "nationality", "=", "value"],
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "question_toks": ["Find", "the", "names", "of", "stadiums", "that", "some", "Australian", "swimmers", "have", "been", "to", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 24, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 3, false], null], "\"Australia\"", null]]
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "t3.name", "FROM", "record", "AS", "t1", "JOIN", "event", "AS", "t2", "ON", "t1.event_id", "=", "t2.id", "JOIN", "stadium", "AS", "t3", "ON", "t3.id", "=", "t2.stadium_id", "GROUP", "BY", "t2.stadium_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t3", ".", "name", "from", "record", "as", "t1", "join", "event", "as", "t2", "on", "t1", ".", "event_id", "=", "t2", ".", "id", "join", "stadium", "as", "t3", "on", "t3", ".", "id", "=", "t2", ".", "stadium_id", "group", "by", "t2", ".", "stadium_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "question_toks": ["Find", "the", "names", "of", "stadiums", "that", "the", "most", "swimmers", "have", "been", "to", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 25, false], null], [0, 18, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 2]]
            },
            "groupBy": [[0, 20, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT * FROM swimmer",
        "query_toks": ["SELECT", "*", "FROM", "swimmer"],
        "query_toks_no_value": ["select", "*", "from", "swimmer"],
        "question": "Find all details for each swimmer.",
        "question_toks": ["Find", "all", "details", "for", "each", "swimmer", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "swimming",
        "query": "SELECT avg(capacity) FROM stadium WHERE opening_year  =  2005",
        "query_toks": ["SELECT", "avg", "(", "capacity", ")", "FROM", "stadium", "WHERE", "opening_year", "=", "2005"],
        "query_toks_no_value": ["select", "avg", "(", "capacity", ")", "from", "stadium", "where", "opening_year", "=", "value"],
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "question_toks": ["What", "is", "the", "average", "capacity", "of", "the", "stadiums", "that", "were", "opened", "in", "year", "2005", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[5, [0, [0, 14, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], 2005.0, null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Faculty",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty"],
        "question": "How many faculty do we have?",
        "question_toks": ["How", "many", "faculty", "do", "we", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Faculty",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty"],
        "question": "What is the total number of faculty members?",
        "question_toks": ["What", "is", "the", "total", "number", "of", "faculty", "members", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT DISTINCT rank FROM Faculty",
        "query_toks": ["SELECT", "DISTINCT", "rank", "FROM", "Faculty"],
        "query_toks_no_value": ["select", "distinct", "rank", "from", "faculty"],
        "question": "What ranks do we have for faculty?",
        "question_toks": ["What", "ranks", "do", "we", "have", "for", "faculty", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT DISTINCT rank FROM Faculty",
        "query_toks": ["SELECT", "DISTINCT", "rank", "FROM", "Faculty"],
        "query_toks_no_value": ["select", "distinct", "rank", "from", "faculty"],
        "question": "Find the list of distinct ranks for faculty.",
        "question_toks": ["Find", "the", "list", "of", "distinct", "ranks", "for", "faculty", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT DISTINCT building FROM Faculty",
        "query_toks": ["SELECT", "DISTINCT", "building", "FROM", "Faculty"],
        "query_toks_no_value": ["select", "distinct", "building", "from", "faculty"],
        "question": "Show all the distinct buildings that have faculty rooms.",
        "question_toks": ["Show", "all", "the", "distinct", "buildings", "that", "have", "faculty", "rooms", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT DISTINCT building FROM Faculty",
        "query_toks": ["SELECT", "DISTINCT", "building", "FROM", "Faculty"],
        "query_toks_no_value": ["select", "distinct", "building", "from", "faculty"],
        "question": "What buildings have faculty offices?",
        "question_toks": ["What", "buildings", "have", "faculty", "offices", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT rank ,  Fname ,  Lname FROM Faculty",
        "query_toks": ["SELECT", "rank", ",", "Fname", ",", "Lname", "FROM", "Faculty"],
        "query_toks_no_value": ["select", "rank", ",", "fname", ",", "lname", "from", "faculty"],
        "question": "Show the rank, first name, and last name for all the faculty.",
        "question_toks": ["Show", "the", "rank", ",", "first", "name", ",", "and", "last", "name", "for", "all", "the", "faculty", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT rank ,  Fname ,  Lname FROM Faculty",
        "query_toks": ["SELECT", "rank", ",", "Fname", ",", "Lname", "FROM", "Faculty"],
        "query_toks_no_value": ["select", "rank", ",", "fname", ",", "lname", "from", "faculty"],
        "question": "What are the rank, first name, and last name of the faculty members?",
        "question_toks": ["What", "are", "the", "rank", ",", "first", "name", ",", "and", "last", "name", "of", "the", "faculty", "members", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'",
        "query_toks": ["SELECT", "Fname", ",", "Lname", ",", "phone", "FROM", "Faculty", "WHERE", "Sex", "=", "'F", "'"],
        "query_toks_no_value": ["select", "fname", ",", "lname", ",", "phone", "from", "faculty", "where", "sex", "=", "value"],
        "question": "Show the first name, last name, and phone number for all female faculty members.",
        "question_toks": ["Show", "the", "first", "name", ",", "last", "name", ",", "and", "phone", "number", "for", "all", "female", "faculty", "members", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]], [0, [0, [0, 20, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"F\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT Fname ,  Lname ,  phone FROM Faculty WHERE Sex  =  'F'",
        "query_toks": ["SELECT", "Fname", ",", "Lname", ",", "phone", "FROM", "Faculty", "WHERE", "Sex", "=", "'F", "'"],
        "query_toks_no_value": ["select", "fname", ",", "lname", ",", "phone", "from", "faculty", "where", "sex", "=", "value"],
        "question": "What are the first name, last name, and phone number of all the female faculty members?",
        "question_toks": ["What", "are", "the", "first", "name", ",", "last", "name", ",", "and", "phone", "number", "of", "all", "the", "female", "faculty", "members", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]], [0, [0, [0, 20, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"F\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT FacID FROM Faculty WHERE Sex  =  'M'",
        "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "WHERE", "Sex", "=", "'M", "'"],
        "query_toks_no_value": ["select", "facid", "from", "faculty", "where", "sex", "=", "value"],
        "question": "Show ids for all the male faculty.",
        "question_toks": ["Show", "ids", "for", "all", "the", "male", "faculty", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"M\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT FacID FROM Faculty WHERE Sex  =  'M'",
        "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "WHERE", "Sex", "=", "'M", "'"],
        "query_toks_no_value": ["select", "facid", "from", "faculty", "where", "sex", "=", "value"],
        "question": "What are the faculty ids of all the male faculty members?",
        "question_toks": ["What", "are", "the", "faculty", "ids", "of", "all", "the", "male", "faculty", "members", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"M\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "Sex", "=", "'F", "'", "AND", "Rank", "=", "``", "Professor", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "where", "sex", "=", "value", "and", "rank", "=", "value"],
        "question": "How many female Professors do we have?",
        "question_toks": ["How", "many", "female", "Professors", "do", "we", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"F\"", null], "and", [false, 2, [0, [0, 18, false], null], "\"Professor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "Sex", "=", "'F", "'", "AND", "Rank", "=", "``", "Professor", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "where", "sex", "=", "value", "and", "rank", "=", "value"],
        "question": "Count the number of female Professors we have.",
        "question_toks": ["Count", "the", "number", "of", "female", "Professors", "we", "have", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 19, false], null], "\"F\"", null], "and", [false, 2, [0, [0, 18, false], null], "\"Professor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"",
        "query_toks": ["SELECT", "phone", ",", "room", ",", "building", "FROM", "Faculty", "WHERE", "Fname", "=", "``", "Jerry", "''", "AND", "Lname", "=", "``", "Prince", "''"],
        "query_toks_no_value": ["select", "phone", ",", "room", ",", "building", "from", "faculty", "where", "fname", "=", "value", "and", "lname", "=", "value"],
        "question": "Show the phone, room, and building for the faculty named Jerry Prince.",
        "question_toks": ["Show", "the", "phone", ",", "room", ",", "and", "building", "for", "the", "faculty", "named", "Jerry", "Prince", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 21, false], null]], [0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Jerry\"", null], "and", [false, 2, [0, [0, 16, false], null], "\"Prince\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT phone ,  room ,  building FROM Faculty WHERE Fname  =  \"Jerry\" AND Lname  =  \"Prince\"",
        "query_toks": ["SELECT", "phone", ",", "room", ",", "building", "FROM", "Faculty", "WHERE", "Fname", "=", "``", "Jerry", "''", "AND", "Lname", "=", "``", "Prince", "''"],
        "query_toks_no_value": ["select", "phone", ",", "room", ",", "building", "from", "faculty", "where", "fname", "=", "value", "and", "lname", "=", "value"],
        "question": "What are the phone, room, and building of the faculty member called Jerry Prince?",
        "question_toks": ["What", "are", "the", "phone", ",", "room", ",", "and", "building", "of", "the", "faculty", "member", "called", "Jerry", "Prince", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 20, false], null]], [0, [0, [0, 21, false], null]], [0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Jerry\"", null], "and", [false, 2, [0, [0, 16, false], null], "\"Prince\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "Rank", "=", "``", "Professor", "''", "AND", "building", "=", "``", "NEB", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "where", "rank", "=", "value", "and", "building", "=", "value"],
        "question": "How many Professors are in building NEB?",
        "question_toks": ["How", "many", "Professors", "are", "in", "building", "NEB", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Professor\"", null], "and", [false, 2, [0, [0, 22, false], null], "\"NEB\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "Rank", "=", "``", "Professor", "''", "AND", "building", "=", "``", "NEB", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "where", "rank", "=", "value", "and", "building", "=", "value"],
        "question": "Count the number of Professors who have office in building NEB.",
        "question_toks": ["Count", "the", "number", "of", "Professors", "who", "have", "office", "in", "building", "NEB", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Professor\"", null], "and", [false, 2, [0, [0, 22, false], null], "\"NEB\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "Faculty", "WHERE", "Rank", "=", "``", "Instructor", "''"],
        "query_toks_no_value": ["select", "fname", ",", "lname", "from", "faculty", "where", "rank", "=", "value"],
        "question": "Show the first name and last name for all the instructors.",
        "question_toks": ["Show", "the", "first", "name", "and", "last", "name", "for", "all", "the", "instructors", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Instructor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "query_toks": ["SELECT", "fname", ",", "lname", "FROM", "Faculty", "WHERE", "Rank", "=", "``", "Instructor", "''"],
        "query_toks_no_value": ["select", "fname", ",", "lname", "from", "faculty", "where", "rank", "=", "value"],
        "question": "What are the first name and last name of all the instructors?",
        "question_toks": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "all", "the", "instructors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Instructor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT building ,  count(*) FROM Faculty GROUP BY building",
        "query_toks": ["SELECT", "building", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "building"],
        "query_toks_no_value": ["select", "building", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "building"],
        "question": "Show all the buildings along with the number of faculty members the buildings have.",
        "question_toks": ["Show", "all", "the", "buildings", "along", "with", "the", "number", "of", "faculty", "members", "the", "buildings", "have", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 22, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT building ,  count(*) FROM Faculty GROUP BY building",
        "query_toks": ["SELECT", "building", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "building"],
        "query_toks_no_value": ["select", "building", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "building"],
        "question": "How many faculty members does each building have? List the result with the name of the building.",
        "question_toks": ["How", "many", "faculty", "members", "does", "each", "building", "have", "?", "List", "the", "result", "with", "the", "name", "of", "the", "building", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 22, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "building", "FROM", "Faculty", "GROUP", "BY", "building", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "building", "from", "faculty", "group", "by", "building", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which building has most faculty members?",
        "question_toks": ["Which", "building", "has", "most", "faculty", "members", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 22, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT building FROM Faculty GROUP BY building ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "building", "FROM", "Faculty", "GROUP", "BY", "building", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "building", "from", "faculty", "group", "by", "building", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the building that has the largest number of faculty members.",
        "question_toks": ["Find", "the", "building", "that", "has", "the", "largest", "number", "of", "faculty", "members", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 22, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
        "query_toks": ["SELECT", "building", "FROM", "Faculty", "WHERE", "rank", "=", "``", "Professor", "''", "GROUP", "BY", "building", "HAVING", "count", "(", "*", ")", ">", "=", "10"],
        "query_toks_no_value": ["select", "building", "from", "faculty", "where", "rank", "=", "value", "group", "by", "building", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Show all the buildings that have at least 10 professors.",
        "question_toks": ["Show", "all", "the", "buildings", "that", "have", "at", "least", "10", "professors", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 22, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 10.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Professor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
        "query_toks": ["SELECT", "building", "FROM", "Faculty", "WHERE", "rank", "=", "``", "Professor", "''", "GROUP", "BY", "building", "HAVING", "count", "(", "*", ")", ">", "=", "10"],
        "query_toks_no_value": ["select", "building", "from", "faculty", "where", "rank", "=", "value", "group", "by", "building", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "In which buildings are there at least ten professors?",
        "question_toks": ["In", "which", "buildings", "are", "there", "at", "least", "ten", "professors", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 22, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 10.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 22, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Professor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank",
        "query_toks": ["SELECT", "rank", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "rank"],
        "query_toks_no_value": ["select", "rank", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "rank"],
        "question": "For each faculty rank, show the number of faculty members who have it.",
        "question_toks": ["For", "each", "faculty", "rank", ",", "show", "the", "number", "of", "faculty", "members", "who", "have", "it", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT rank ,  count(*) FROM Faculty GROUP BY rank",
        "query_toks": ["SELECT", "rank", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "rank"],
        "query_toks_no_value": ["select", "rank", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "rank"],
        "question": "How many faculty members do we have for each faculty rank?",
        "question_toks": ["How", "many", "faculty", "members", "do", "we", "have", "for", "each", "faculty", "rank", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "query_toks": ["SELECT", "rank", ",", "sex", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "rank", ",", "sex"],
        "query_toks_no_value": ["select", "rank", ",", "sex", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "rank", ",", "sex"],
        "question": "Show all the ranks and the number of male and female faculty for each rank.",
        "question_toks": ["Show", "all", "the", "ranks", "and", "the", "number", "of", "male", "and", "female", "faculty", "for", "each", "rank", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 18, false], [0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 19, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "query_toks": ["SELECT", "rank", ",", "sex", ",", "count", "(", "*", ")", "FROM", "Faculty", "GROUP", "BY", "rank", ",", "sex"],
        "query_toks_no_value": ["select", "rank", ",", "sex", ",", "count", "(", "*", ")", "from", "faculty", "group", "by", "rank", ",", "sex"],
        "question": "How many faculty members do we have for each rank and gender?",
        "question_toks": ["How", "many", "faculty", "members", "do", "we", "have", "for", "each", "rank", "and", "gender", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 18, false], [0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [0, [0, [0, 19, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
        "query_toks": ["SELECT", "rank", "FROM", "Faculty", "GROUP", "BY", "rank", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "rank", "from", "faculty", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"],
        "question": "Which rank has the smallest number of faculty members?",
        "question_toks": ["Which", "rank", "has", "the", "smallest", "number", "of", "faculty", "members", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT rank FROM Faculty GROUP BY rank ORDER BY count(*) ASC LIMIT 1",
        "query_toks": ["SELECT", "rank", "FROM", "Faculty", "GROUP", "BY", "rank", "ORDER", "BY", "count", "(", "*", ")", "ASC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "rank", "from", "faculty", "group", "by", "rank", "order", "by", "count", "(", "*", ")", "asc", "limit", "value"],
        "question": "Find the faculty rank that has the least members.",
        "question_toks": ["Find", "the", "faculty", "rank", "that", "has", "the", "least", "members", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 18, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "query_toks": ["SELECT", "sex", ",", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "rank", "=", "``", "AsstProf", "''", "GROUP", "BY", "sex"],
        "query_toks_no_value": ["select", "sex", ",", "count", "(", "*", ")", "from", "faculty", "where", "rank", "=", "value", "group", "by", "sex"],
        "question": "Show the number of male and female assistant professors.",
        "question_toks": ["Show", "the", "number", "of", "male", "and", "female", "assistant", "professors", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"AsstProf\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "query_toks": ["SELECT", "sex", ",", "count", "(", "*", ")", "FROM", "Faculty", "WHERE", "rank", "=", "``", "AsstProf", "''", "GROUP", "BY", "sex"],
        "query_toks_no_value": ["select", "sex", ",", "count", "(", "*", ")", "from", "faculty", "where", "rank", "=", "value", "group", "by", "sex"],
        "question": "How many male and female assistant professors do we have?",
        "question_toks": ["How", "many", "male", "and", "female", "assistant", "professors", "do", "we", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [[0, 19, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 19, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"AsstProf\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T2.fname", "=", "``", "Linda", "''", "AND", "T2.lname", "=", "``", "Smith", "''"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t2", ".", "fname", "=", "value", "and", "t2", ".", "lname", "=", "value"],
        "question": "What are the first name and last name of Linda Smith's advisor?",
        "question_toks": ["What", "are", "the", "first", "name", "and", "last", "name", "of", "Linda", "Smith", "'s", "advisor", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"Linda\"", null], "and", [false, 2, [0, [0, 8, false], null], "\"Smith\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T2.fname", "=", "``", "Linda", "''", "AND", "T2.lname", "=", "``", "Smith", "''"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t2", ".", "fname", "=", "value", "and", "t2", ".", "lname", "=", "value"],
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "question_toks": ["Who", "is", "the", "advisor", "of", "Linda", "Smith", "?", "Give", "me", "the", "first", "name", "and", "last", "name", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"Linda\"", null], "and", [false, 2, [0, [0, 8, false], null], "\"Smith\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
        "query_toks": ["SELECT", "T2.StuID", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T1.rank", "=", "``", "Professor", "''"],
        "query_toks_no_value": ["select", "t2", ".", "stuid", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t1", ".", "rank", "=", "value"],
        "question": "Show the ids of students whose advisors are professors.",
        "question_toks": ["Show", "the", "ids", "of", "students", "whose", "advisors", "are", "professors", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Professor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
        "query_toks": ["SELECT", "T2.StuID", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T1.rank", "=", "``", "Professor", "''"],
        "query_toks_no_value": ["select", "t2", ".", "stuid", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t1", ".", "rank", "=", "value"],
        "question": "Which students have professors as their advisors? Find their student ids.",
        "question_toks": ["Which", "students", "have", "professors", "as", "their", "advisors", "?", "Find", "their", "student", "ids", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Professor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "query_toks": ["SELECT", "T2.fname", ",", "T2.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T1.fname", "=", "``", "Michael", "''", "AND", "T1.lname", "=", "``", "Goodrich", "''"],
        "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"],
        "question": "Show first name and last name for all the students advised by Michael Goodrich.",
        "question_toks": ["Show", "first", "name", "and", "last", "name", "for", "all", "the", "students", "advised", "by", "Michael", "Goodrich", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Michael\"", null], "and", [false, 2, [0, [0, 16, false], null], "\"Goodrich\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "query_toks": ["SELECT", "T2.fname", ",", "T2.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "WHERE", "T1.fname", "=", "``", "Michael", "''", "AND", "T1.lname", "=", "``", "Goodrich", "''"],
        "query_toks_no_value": ["select", "t2", ".", "fname", ",", "t2", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"],
        "question": "Which students are advised by Michael Goodrich? Give me their first and last names.",
        "question_toks": ["Which", "students", "are", "advised", "by", "Michael", "Goodrich", "?", "Give", "me", "their", "first", "and", "last", "names", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Michael\"", null], "and", [false, 2, [0, [0, 16, false], null], "\"Goodrich\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "query_toks": ["SELECT", "T1.FacID", ",", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID"],
        "query_toks_no_value": ["select", "t1", ".", "facid", ",", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid"],
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "question_toks": ["Show", "the", "faculty", "id", "of", "each", "faculty", "member", ",", "along", "with", "the", "number", "of", "students", "he", "or", "she", "advises", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 15, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "query_toks": ["SELECT", "T1.FacID", ",", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID"],
        "query_toks_no_value": ["select", "t1", ".", "facid", ",", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid"],
        "question": "What are the faculty id and the number of students each faculty has?",
        "question_toks": ["What", "are", "the", "faculty", "id", "and", "the", "number", "of", "students", "each", "faculty", "has", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 15, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "query_toks": ["SELECT", "T1.rank", ",", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.rank"],
        "query_toks_no_value": ["select", "t1", ".", "rank", ",", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "rank"],
        "question": "Show all the faculty ranks and the number of students advised by each rank.",
        "question_toks": ["Show", "all", "the", "faculty", "ranks", "and", "the", "number", "of", "students", "advised", "by", "each", "rank", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "query_toks": ["SELECT", "T1.rank", ",", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.rank"],
        "query_toks_no_value": ["select", "t1", ".", "rank", ",", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "rank"],
        "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
        "question_toks": ["How", "many", "students", "are", "advised", "by", "each", "rank", "of", "faculty", "?", "List", "the", "rank", "and", "the", "number", "of", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 18, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 18, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What are the first and last name of the faculty who has the most students?",
        "question_toks": ["What", "are", "the", "first", "and", "last", "name", "of", "the", "faculty", "who", "has", "the", "most", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 15, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Give me the the first and last name of the faculty who advises the most students.",
        "question_toks": ["Give", "me", "the", "the", "first", "and", "last", "name", "of", "the", "faculty", "who", "advises", "the", "most", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 15, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T1.FacID", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t1", ".", "facid", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Show the ids for all the faculty members who have at least 2 students.",
        "question_toks": ["Show", "the", "ids", "for", "all", "the", "faculty", "members", "who", "have", "at", "least", "2", "students", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 15, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.FacID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T1.FacID", "FROM", "Faculty", "AS", "T1", "JOIN", "Student", "AS", "T2", "ON", "T1.FacID", "=", "T2.advisor", "GROUP", "BY", "T1.FacID", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t1", ".", "facid", "from", "faculty", "as", "t1", "join", "student", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "advisor", "group", "by", "t1", ".", "facid", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Which faculty members advise two ore more students? Give me their faculty ids.",
        "question_toks": ["Which", "faculty", "members", "advise", "two", "ore", "more", "students", "?", "Give", "me", "their", "faculty", "ids", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 13, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 15, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "EXCEPT", "SELECT", "advisor", "FROM", "Student"],
        "query_toks_no_value": ["select", "facid", "from", "faculty", "except", "select", "advisor", "from", "student"],
        "question": "Show ids for the faculty members who don't advise any student.",
        "question_toks": ["Show", "ids", "for", "the", "faculty", "members", "who", "do", "n't", "advise", "any", "student", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 13, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "EXCEPT", "SELECT", "advisor", "FROM", "Student"],
        "query_toks_no_value": ["select", "facid", "from", "faculty", "except", "select", "advisor", "from", "student"],
        "question": "What are the ids of the faculty members who do not advise any student.",
        "question_toks": ["What", "are", "the", "ids", "of", "the", "faculty", "members", "who", "do", "not", "advise", "any", "student", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 13, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT activity_name FROM Activity",
        "query_toks": ["SELECT", "activity_name", "FROM", "Activity"],
        "query_toks_no_value": ["select", "activity_name", "from", "activity"],
        "question": "What activities do we have?",
        "question_toks": ["What", "activities", "do", "we", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT activity_name FROM Activity",
        "query_toks": ["SELECT", "activity_name", "FROM", "Activity"],
        "query_toks_no_value": ["select", "activity_name", "from", "activity"],
        "question": "List all the activities we have.",
        "question_toks": ["List", "all", "the", "activities", "we", "have", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Activity",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Activity"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "activity"],
        "question": "How many activities do we have?",
        "question_toks": ["How", "many", "activities", "do", "we", "have", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Activity",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Activity"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "activity"],
        "question": "Find the number of activities available.",
        "question_toks": ["Find", "the", "number", "of", "activities", "available", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "FacID", ")", "FROM", "Faculty_participates_in"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "facid", ")", "from", "faculty_participates_in"],
        "question": "How many faculty members participate in an activity?",
        "question_toks": ["How", "many", "faculty", "members", "participate", "in", "an", "activity", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 5, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "query_toks": ["SELECT", "count", "(", "DISTINCT", "FacID", ")", "FROM", "Faculty_participates_in"],
        "query_toks_no_value": ["select", "count", "(", "distinct", "facid", ")", "from", "faculty_participates_in"],
        "question": "Give me the number of faculty members who participate in an activity",
        "question_toks": ["Give", "me", "the", "number", "of", "faculty", "members", "who", "participate", "in", "an", "activity"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 5, true], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
        "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "EXCEPT", "SELECT", "FacID", "FROM", "Faculty_participates_in"],
        "query_toks_no_value": ["select", "facid", "from", "faculty", "except", "select", "facid", "from", "faculty_participates_in"],
        "question": "Show the ids of the faculty who don't participate in any activity.",
        "question_toks": ["Show", "the", "ids", "of", "the", "faculty", "who", "do", "n't", "participate", "in", "any", "activity", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 5, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT FacID FROM Faculty EXCEPT SELECT FacID FROM Faculty_participates_in",
        "query_toks": ["SELECT", "FacID", "FROM", "Faculty", "EXCEPT", "SELECT", "FacID", "FROM", "Faculty_participates_in"],
        "query_toks_no_value": ["select", "facid", "from", "faculty", "except", "select", "facid", "from", "faculty_participates_in"],
        "question": "Which faculty do not participate in any activity? Find their faculty ids.",
        "question_toks": ["Which", "faculty", "do", "not", "participate", "in", "any", "activity", "?", "Find", "their", "faculty", "ids", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 5, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "query_toks": ["SELECT", "FacID", "FROM", "Faculty_participates_in", "INTERSECT", "SELECT", "advisor", "FROM", "Student"],
        "query_toks_no_value": ["select", "facid", "from", "faculty_participates_in", "intersect", "select", "advisor", "from", "student"],
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "question_toks": ["Show", "the", "ids", "of", "all", "the", "faculty", "members", "who", "participate", "in", "an", "activity", "and", "advise", "a", "student", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 13, false], null]]]],
                "union": null,
                "where": []
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "query_toks": ["SELECT", "FacID", "FROM", "Faculty_participates_in", "INTERSECT", "SELECT", "advisor", "FROM", "Student"],
        "query_toks_no_value": ["select", "facid", "from", "faculty_participates_in", "intersect", "select", "advisor", "from", "student"],
        "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
        "question_toks": ["What", "are", "ids", "of", "the", "faculty", "members", "who", "not", "only", "participate", "in", "an", "activity", "but", "also", "advise", "a", "student", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 13, false], null]]]],
                "union": null,
                "where": []
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 5, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "WHERE", "T1.fname", "=", "``", "Mark", "''", "AND", "T1.lname", "=", "``", "Giuliano", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"],
        "question": "How many activities does Mark Giuliano participate in?",
        "question_toks": ["How", "many", "activities", "does", "Mark", "Giuliano", "participate", "in", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Mark\"", null], "and", [false, 2, [0, [0, 16, false], null], "\"Giuliano\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "query_toks": ["SELECT", "count", "(", "*", ")", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "WHERE", "T1.fname", "=", "``", "Mark", "''", "AND", "T1.lname", "=", "``", "Giuliano", "''"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"],
        "question": "Find the number of activities Mark Giuliano is involved in.",
        "question_toks": ["Find", "the", "number", "of", "activities", "Mark", "Giuliano", "is", "involved", "in", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Mark\"", null], "and", [false, 2, [0, [0, 16, false], null], "\"Giuliano\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "query_toks": ["SELECT", "T3.activity_name", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "Activity", "AS", "T3", "ON", "T3.actid", "=", "T2.actid", "WHERE", "T1.fname", "=", "``", "Mark", "''", "AND", "T1.lname", "=", "``", "Giuliano", "''"],
        "query_toks_no_value": ["select", "t3", ".", "activity_name", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t3", ".", "actid", "=", "t2", ".", "actid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"],
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "question_toks": ["Show", "the", "names", "of", "all", "the", "activities", "Mark", "Giuliano", "participates", "in", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Mark\"", null], "and", [false, 2, [0, [0, 16, false], null], "\"Giuliano\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "query_toks": ["SELECT", "T3.activity_name", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "Activity", "AS", "T3", "ON", "T3.actid", "=", "T2.actid", "WHERE", "T1.fname", "=", "``", "Mark", "''", "AND", "T1.lname", "=", "``", "Giuliano", "''"],
        "query_toks_no_value": ["select", "t3", ".", "activity_name", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t3", ".", "actid", "=", "t2", ".", "actid", "where", "t1", ".", "fname", "=", "value", "and", "t1", ".", "lname", "=", "value"],
        "question": "What are the names of the activities Mark Giuliano is involved in",
        "question_toks": ["What", "are", "the", "names", "of", "the", "activities", "Mark", "Giuliano", "is", "involved", "in"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 17, false], null], "\"Mark\"", null], "and", [false, 2, [0, [0, 16, false], null], "\"Giuliano\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", ",", "count", "(", "*", ")", ",", "T1.FacID", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "GROUP", "BY", "T1.FacID"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", ",", "count", "(", "*", ")", ",", "t1", ".", "facid", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "group", "by", "t1", ".", "facid"],
        "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
        "question_toks": ["Show", "the", "first", "and", "last", "name", "of", "all", "the", "faculty", "members", "who", "participated", "in", "some", "activity", ",", "together", "with", "the", "number", "of", "activities", "they", "participated", "in", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [[0, 15, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]], [3, [0, [0, 0, false], null]], [0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", ",", "count", "(", "*", ")", ",", "T1.FacID", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "GROUP", "BY", "T1.FacID"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", ",", "count", "(", "*", ")", ",", "t1", ".", "facid", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "group", "by", "t1", ".", "facid"],
        "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.",
        "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "faculty", "members", "who", "participated", "in", "at", "least", "one", "activity", "?", "For", "each", "of", "them", ",", "also", "show", "the", "number", "of", "activities", "they", "participated", "in", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [[0, 15, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]], [3, [0, [0, 0, false], null]], [0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "query_toks": ["SELECT", "T1.activity_name", ",", "count", "(", "*", ")", "FROM", "Activity", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID"],
        "query_toks_no_value": ["select", "t1", ".", "activity_name", ",", "count", "(", "*", ")", "from", "activity", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid"],
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "question_toks": ["Show", "all", "the", "activity", "names", "and", "the", "number", "of", "faculty", "involved", "in", "each", "activity", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "query_toks": ["SELECT", "T1.activity_name", ",", "count", "(", "*", ")", "FROM", "Activity", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID"],
        "query_toks_no_value": ["select", "t1", ".", "activity_name", ",", "count", "(", "*", ")", "from", "activity", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid"],
        "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
        "question_toks": ["How", "many", "faculty", "members", "participate", "in", "each", "activity", "?", "Return", "the", "activity", "names", "and", "the", "number", "of", "faculty", "members", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "GROUP", "BY", "T1.FacID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "group", "by", "t1", ".", "facid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the first and last name of the faculty participating in the most activities?",
        "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "faculty", "participating", "in", "the", "most", "activities", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [[0, 15, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT  T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "GROUP", "BY", "T1.FacID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "group", "by", "t1", ".", "facid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the first and last name of the faculty who is involved in the largest number of activities.",
        "question_toks": ["Find", "the", "first", "and", "last", "name", "of", "the", "faculty", "who", "is", "involved", "in", "the", "largest", "number", "of", "activities", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [[0, 15, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 17, false], null]], [0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.activity_name", "FROM", "Activity", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "activity_name", "from", "activity", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name of the activity that has the most faculty members involved in?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "activity", "that", "has", "the", "most", "faculty", "members", "involved", "in", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.activity_name", "FROM", "Activity", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "activity_name", "from", "activity", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which activity has the most faculty members participating in? Find the activity name.",
        "question_toks": ["Which", "activity", "has", "the", "most", "faculty", "members", "participating", "in", "?", "Find", "the", "activity", "name", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 6, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
        "query_toks": ["SELECT", "StuID", "FROM", "Student", "EXCEPT", "SELECT", "StuID", "FROM", "Participates_in"],
        "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "stuid", "from", "participates_in"],
        "question": "Show the ids of the students who don't participate in any activity.",
        "question_toks": ["Show", "the", "ids", "of", "the", "students", "who", "do", "n't", "participate", "in", "any", "activity", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 3, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Participates_in",
        "query_toks": ["SELECT", "StuID", "FROM", "Student", "EXCEPT", "SELECT", "StuID", "FROM", "Participates_in"],
        "query_toks_no_value": ["select", "stuid", "from", "student", "except", "select", "stuid", "from", "participates_in"],
        "question": "What are the ids of the students who are not involved in any activity",
        "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "are", "not", "involved", "in", "any", "activity"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 1]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 3, false], null]]]],
                "union": null,
                "where": []
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "query_toks": ["SELECT", "StuID", "FROM", "Participates_in", "INTERSECT", "SELECT", "StuID", "FROM", "Student", "WHERE", "age", "<", "20"],
        "query_toks_no_value": ["select", "stuid", "from", "participates_in", "intersect", "select", "stuid", "from", "student", "where", "age", "<", "value"],
        "question": "Show the ids for all the students who participate in an activity and are under 20.",
        "question_toks": ["Show", "the", "ids", "for", "all", "the", "students", "who", "participate", "in", "an", "activity", "and", "are", "under", "20", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 4, [0, [0, 10, false], null], 20.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "query_toks": ["SELECT", "StuID", "FROM", "Participates_in", "INTERSECT", "SELECT", "StuID", "FROM", "Student", "WHERE", "age", "<", "20"],
        "query_toks_no_value": ["select", "stuid", "from", "participates_in", "intersect", "select", "stuid", "from", "student", "where", "age", "<", "value"],
        "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
        "question_toks": ["What", "are", "the", "ids", "of", "the", "students", "who", "are", "under", "20", "years", "old", "and", "are", "involved", "in", "at", "least", "one", "activity", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [],
                    "table_units": [["table_unit", 3]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 7, false], null]]]],
                "union": null,
                "where": [[false, 4, [0, [0, 10, false], null], 20.0, null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Student", "AS", "T1", "JOIN", "Participates_in", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "GROUP", "BY", "T1.StuID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "participates_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "group", "by", "t1", ".", "stuid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the first and last name of the student participating in the most activities?",
        "question_toks": ["What", "is", "the", "first", "and", "last", "name", "of", "the", "student", "participating", "in", "the", "most", "activities", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 3, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 1]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.fname ,  T1.lname FROM Student AS T1 JOIN Participates_in AS T2 ON T1.StuID  =  T2.StuID GROUP BY T1.StuID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.fname", ",", "T1.lname", "FROM", "Student", "AS", "T1", "JOIN", "Participates_in", "AS", "T2", "ON", "T1.StuID", "=", "T2.StuID", "GROUP", "BY", "T1.StuID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "fname", ",", "t1", ".", "lname", "from", "student", "as", "t1", "join", "participates_in", "as", "t2", "on", "t1", ".", "stuid", "=", "t2", ".", "stuid", "group", "by", "t1", ".", "stuid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Tell me the first and last name of the student who has the most activities.",
        "question_toks": ["Tell", "me", "the", "first", "and", "last", "name", "of", "the", "student", "who", "has", "the", "most", "activities", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 3, false], null]],
                "table_units": [["table_unit", 3], ["table_unit", 1]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 9, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.activity_name", "FROM", "Activity", "AS", "T1", "JOIN", "Participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "activity_name", "from", "activity", "as", "t1", "join", "participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name of the activity with the most students?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "activity", "with", "the", "most", "students", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 4, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.activity_name", "FROM", "Activity", "AS", "T1", "JOIN", "Participates_in", "AS", "T2", "ON", "T1.actID", "=", "T2.actID", "GROUP", "BY", "T1.actID", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "activity_name", "from", "activity", "as", "t1", "join", "participates_in", "as", "t2", "on", "t1", ".", "actid", "=", "t2", ".", "actid", "group", "by", "t1", ".", "actid", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the name of the activity that has the largest number of student participants.",
        "question_toks": ["Find", "the", "name", "of", "the", "activity", "that", "has", "the", "largest", "number", "of", "student", "participants", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 4, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 1]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query_toks": ["SELECT", "DISTINCT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "OR", "T3.activity_name", "=", "'Kayaking", "'"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "or", "t3", ".", "activity_name", "=", "value"],
        "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "question_toks": ["Find", "the", "first", "names", "of", "the", "faculty", "members", "who", "are", "playing", "Canoeing", "or", "Kayaking", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Canoeing\"", null], "or", [false, 2, [0, [0, 2, false], null], "\"Kayaking\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query_toks": ["SELECT", "DISTINCT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "OR", "T3.activity_name", "=", "'Kayaking", "'"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "or", "t3", ".", "activity_name", "=", "value"],
        "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
        "question_toks": ["Which", "faculty", "members", "are", "playing", "either", "Canoeing", "or", "Kayaking", "?", "Tell", "me", "their", "first", "names", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Canoeing\"", null], "or", [false, 2, [0, [0, 2, false], null], "\"Kayaking\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query_toks": ["SELECT", "lname", "FROM", "faculty", "WHERE", "rank", "=", "'Professor", "'", "EXCEPT", "SELECT", "DISTINCT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "OR", "T3.activity_name", "=", "'Kayaking", "'"],
        "query_toks_no_value": ["select", "lname", "from", "faculty", "where", "rank", "=", "value", "except", "select", "distinct", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "or", "t3", ".", "activity_name", "=", "value"],
        "question": "Find the first names of professors who are not playing Canoeing or Kayaking.",
        "question_toks": ["Find", "the", "first", "names", "of", "professors", "who", "are", "not", "playing", "Canoeing", "or", "Kayaking", "."],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                    "table_units": [["table_unit", 4], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 2, false], null], "\"Canoeing\"", null], "or", [false, 2, [0, [0, 2, false], null], "\"Kayaking\"", null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Professor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "query_toks": ["SELECT", "lname", "FROM", "faculty", "WHERE", "rank", "=", "'Professor", "'", "EXCEPT", "SELECT", "DISTINCT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "OR", "T3.activity_name", "=", "'Kayaking", "'"],
        "query_toks_no_value": ["select", "lname", "from", "faculty", "where", "rank", "=", "value", "except", "select", "distinct", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "or", "t3", ".", "activity_name", "=", "value"],
        "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "the", "professors", "who", "do", "not", "play", "Canoeing", "or", "Kayaking", "as", "activities", "?"],
        "sql": {
            "except": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                    "table_units": [["table_unit", 4], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [true, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 2, false], null], "\"Canoeing\"", null], "or", [false, 2, [0, [0, 2, false], null], "\"Kayaking\"", null]]
            },
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Professor\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
        "query_toks": ["SELECT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "INTERSECT", "SELECT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Kayaking", "'"],
        "query_toks_no_value": ["select", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "intersect", "select", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value"],
        "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
        "question_toks": ["Find", "the", "first", "names", "of", "the", "faculty", "members", "who", "participate", "in", "Canoeing", "and", "Kayaking", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                    "table_units": [["table_unit", 4], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 2, false], null], "\"Kayaking\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Canoeing\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
        "query_toks": ["SELECT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Canoeing", "'", "INTERSECT", "SELECT", "T1.lname", "FROM", "Faculty", "AS", "T1", "JOIN", "Faculty_participates_in", "AS", "T2", "ON", "T1.facID", "=", "T2.facID", "JOIN", "activity", "AS", "T3", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T3.activity_name", "=", "'Kayaking", "'"],
        "query_toks_no_value": ["select", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value", "intersect", "select", "t1", ".", "lname", "from", "faculty", "as", "t1", "join", "faculty_participates_in", "as", "t2", "on", "t1", ".", "facid", "=", "t2", ".", "facid", "join", "activity", "as", "t3", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t3", ".", "activity_name", "=", "value"],
        "question": "What are the first names of the faculty members playing both Canoeing and Kayaking?",
        "question_toks": ["What", "are", "the", "first", "names", "of", "the", "faculty", "members", "playing", "both", "Canoeing", "and", "Kayaking", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                "table_units": [["table_unit", 4], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 15, false], null], [0, 5, false], null]],
                    "table_units": [["table_unit", 4], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 16, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 2, false], null], "\"Kayaking\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Canoeing\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "query_toks": ["SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Canoeing", "'", "INTERSECT", "SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Kayaking", "'"],
        "query_toks_no_value": ["select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value", "intersect", "select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value"],
        "question": "Find the ids of the students who participate in Canoeing and Kayaking.",
        "question_toks": ["Find", "the", "ids", "of", "the", "students", "who", "participate", "in", "Canoeing", "and", "Kayaking", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 1, false], null], [0, 1, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 3, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 2, false], null], "\"Kayaking\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Canoeing\"", null]]
        }
    }, {
        "db_id": "activity_1",
        "query": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "query_toks": ["SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Canoeing", "'", "INTERSECT", "SELECT", "T1.stuid", "FROM", "participates_in", "AS", "T1", "JOIN", "activity", "AS", "T2", "ON", "T2.actid", "=", "T2.actid", "WHERE", "T2.activity_name", "=", "'Kayaking", "'"],
        "query_toks_no_value": ["select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value", "intersect", "select", "t1", ".", "stuid", "from", "participates_in", "as", "t1", "join", "activity", "as", "t2", "on", "t2", ".", "actid", "=", "t2", ".", "actid", "where", "t2", ".", "activity_name", "=", "value"],
        "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.",
        "question_toks": ["Which", "students", "participate", "in", "both", "Canoeing", "and", "Kayaking", "as", "their", "activities", "?", "Tell", "me", "their", "student", "ids", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 1], ["table_unit", 0]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 1, false], null], [0, 1, false], null]],
                    "table_units": [["table_unit", 1], ["table_unit", 0]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 3, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 2, false], null], "\"Kayaking\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Canoeing\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "query_toks": ["SELECT", "order_id", "FROM", "orders", "ORDER", "BY", "date_order_placed", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "order_id", "from", "orders", "order", "by", "date_order_placed", "desc", "limit", "value"],
        "question": "What is the id of the most recent order?",
        "question_toks": ["What", "is", "the", "id", "of", "the", "most", "recent", "order", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 10, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "query_toks": ["SELECT", "order_id", "FROM", "orders", "ORDER", "BY", "date_order_placed", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "order_id", "from", "orders", "order", "by", "date_order_placed", "desc", "limit", "value"],
        "question": "Find the id of the order made most recently.",
        "question_toks": ["Find", "the", "id", "of", "the", "order", "made", "most", "recently", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [0, 10, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "query_toks": ["SELECT", "order_id", ",", "customer_id", "FROM", "orders", "ORDER", "BY", "date_order_placed", "LIMIT", "1"],
        "query_toks_no_value": ["select", "order_id", ",", "customer_id", "from", "orders", "order", "by", "date_order_placed", "limit", "value"],
        "question": "what are the order id and customer id of the oldest order?",
        "question_toks": ["what", "are", "the", "order", "id", "and", "customer", "id", "of", "the", "oldest", "order", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 10, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "query_toks": ["SELECT", "order_id", ",", "customer_id", "FROM", "orders", "ORDER", "BY", "date_order_placed", "LIMIT", "1"],
        "query_toks_no_value": ["select", "order_id", ",", "customer_id", "from", "orders", "order", "by", "date_order_placed", "limit", "value"],
        "question": "Find the order id and customer id associated with the oldest order.",
        "question_toks": ["Find", "the", "order", "id", "and", "customer", "id", "associated", "with", "the", "oldest", "order", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["asc", [[0, [0, 10, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 8, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
        "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_tracking_number", "=", "``", "3452", "''"],
        "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_tracking_number", "=", "value"],
        "question": "Find the id of the order whose shipment tracking number is \"3452\".",
        "question_toks": ["Find", "the", "id", "of", "the", "order", "whose", "shipment", "tracking", "number", "is", "``", "3452", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 23, false], null], "\"3452\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id FROM shipments WHERE shipment_tracking_number = \"3452\"",
        "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_tracking_number", "=", "``", "3452", "''"],
        "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_tracking_number", "=", "value"],
        "question": "Which order's shipment tracking number is \"3452\"? Give me the id of the order.",
        "question_toks": ["Which", "order", "'s", "shipment", "tracking", "number", "is", "``", "3452", "''", "?", "Give", "me", "the", "id", "of", "the", "order", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 23, false], null], "\"3452\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "query_toks": ["SELECT", "order_item_id", "FROM", "order_items", "WHERE", "product_id", "=", "11"],
        "query_toks_no_value": ["select", "order_item_id", "from", "order_items", "where", "product_id", "=", "value"],
        "question": "Find the ids of all the order items whose product id is 11.",
        "question_toks": ["Find", "the", "ids", "of", "all", "the", "order", "items", "whose", "product", "id", "is", "11", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 16, false], null], 11.0, null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "query_toks": ["SELECT", "order_item_id", "FROM", "order_items", "WHERE", "product_id", "=", "11"],
        "query_toks_no_value": ["select", "order_item_id", "from", "order_items", "where", "product_id", "=", "value"],
        "question": "Find all the order items whose product id is 11. What are the order item ids?",
        "question_toks": ["Find", "all", "the", "order", "items", "whose", "product", "id", "is", "11", ".", "What", "are", "the", "order", "item", "ids", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 15, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 16, false], null], 11.0, null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Packing", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"],
        "question": "List the name of all the distinct customers who have orders with status \"Packing\".",
        "question_toks": ["List", "the", "name", "of", "all", "the", "distinct", "customers", "who", "have", "orders", "with", "status", "``", "Packing", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"Packing\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Packing\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Packing", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"],
        "question": "Which customers have orders with status \"Packing\"? Give me the customer names.",
        "question_toks": ["Which", "customers", "have", "orders", "with", "status", "``", "Packing", "''", "?", "Give", "me", "the", "customer", "names", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"Packing\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.customer_details", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_details", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"],
        "question": "Find the details of all the distinct customers who have orders with status \"On Road\".",
        "question_toks": ["Find", "the", "details", "of", "all", "the", "distinct", "customers", "who", "have", "orders", "with", "status", "``", "On", "Road", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"On Road\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT T1.customer_details FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\"",
        "query_toks": ["SELECT", "DISTINCT", "T1.customer_details", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''"],
        "query_toks_no_value": ["select", "distinct", "t1", ".", "customer_details", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"],
        "question": "What are the distinct customers who have orders with status \"On Road\"? Give me the customer details?",
        "question_toks": ["What", "are", "the", "distinct", "customers", "who", "have", "orders", "with", "status", "``", "On", "Road", "''", "?", "Give", "me", "the", "customer", "details", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 3, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"On Road\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name of the customer who has the most orders?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "the", "most", "orders", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which customer made the most orders? Find the customer name.",
        "question_toks": ["Which", "customer", "made", "the", "most", "orders", "?", "Find", "the", "customer", "name", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the customer id of the customer who has the most orders?",
        "question_toks": ["What", "is", "the", "customer", "id", "of", "the", "customer", "who", "has", "the", "most", "orders", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the id of the customer who made the most orders.",
        "question_toks": ["Find", "the", "id", "of", "the", "customer", "who", "made", "the", "most", "orders", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query_toks": ["SELECT", "T2.order_id", ",", "T2.order_status", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.customer_name", "=", "``", "Jeramie", "''"],
        "query_toks_no_value": ["select", "t2", ".", "order_id", ",", "t2", ".", "order_status", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"],
        "question": "Give me a list of id and status of orders which belong to the customer named \"Jeramie\".",
        "question_toks": ["Give", "me", "a", "list", "of", "id", "and", "status", "of", "orders", "which", "belong", "to", "the", "customer", "named", "``", "Jeramie", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Jeramie\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T2.order_id ,  T2.order_status FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query_toks": ["SELECT", "T2.order_id", ",", "T2.order_status", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.customer_name", "=", "``", "Jeramie", "''"],
        "query_toks_no_value": ["select", "t2", ".", "order_id", ",", "t2", ".", "order_status", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"],
        "question": "Which orders are made by the customer named \"Jeramie\"? Give me the order ids and status.",
        "question_toks": ["Which", "orders", "are", "made", "by", "the", "customer", "named", "``", "Jeramie", "''", "?", "Give", "me", "the", "order", "ids", "and", "status", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 7, false], null]], [0, [0, [0, 9, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Jeramie\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query_toks": ["SELECT", "T2.date_order_placed", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.customer_name", "=", "``", "Jeramie", "''"],
        "query_toks_no_value": ["select", "t2", ".", "date_order_placed", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"],
        "question": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "question_toks": ["Find", "the", "dates", "of", "orders", "which", "belong", "to", "the", "customer", "named", "``", "Jeramie", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Jeramie\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "query_toks": ["SELECT", "T2.date_order_placed", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T1.customer_name", "=", "``", "Jeramie", "''"],
        "query_toks_no_value": ["select", "t2", ".", "date_order_placed", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t1", ".", "customer_name", "=", "value"],
        "question": "What are the dates of the orders made by the customer named \"Jeramie\"?",
        "question_toks": ["What", "are", "the", "dates", "of", "the", "orders", "made", "by", "the", "customer", "named", "``", "Jeramie", "''", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 2, false], null], "\"Jeramie\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.date_order_placed", ">", "=", "``", "2009-01-01", "''", "AND", "T2.date_order_placed", "<", "=", "``", "2010-01-01", "''"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "date_order_placed", ">", "=", "value", "and", "t2", ".", "date_order_placed", "<", "=", "value"],
        "question": "Give me the names of customers who have placed orders between 2009-01-01 and 2010-01-01.",
        "question_toks": ["Give", "me", "the", "names", "of", "customers", "who", "have", "placed", "orders", "between", "2009-01-01", "and", "2010-01-01", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 10, false], null], "\"2009-01-01\"", null], "and", [false, 6, [0, [0, 10, false], null], "\"2010-01-01\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.date_order_placed", ">", "=", "``", "2009-01-01", "''", "AND", "T2.date_order_placed", "<", "=", "``", "2010-01-01", "''"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "date_order_placed", ">", "=", "value", "and", "t2", ".", "date_order_placed", "<", "=", "value"],
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "question_toks": ["Which", "customers", "made", "orders", "between", "2009-01-01", "and", "2010-01-01", "?", "Find", "their", "names", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 10, false], null], "\"2009-01-01\"", null], "and", [false, 6, [0, [0, 10, false], null], "\"2010-01-01\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "query_toks": ["SELECT", "DISTINCT", "T2.product_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T1.date_order_placed", ">", "=", "``", "1975-01-01", "''", "AND", "T1.date_order_placed", "<", "=", "``", "1976-01-01", "''"],
        "query_toks_no_value": ["select", "distinct", "t2", ".", "product_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t1", ".", "date_order_placed", ">", "=", "value", "and", "t1", ".", "date_order_placed", "<", "=", "value"],
        "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "question_toks": ["Give", "me", "a", "list", "of", "distinct", "product", "ids", "from", "orders", "placed", "between", "1975-01-01", "and", "1976-01-01", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 10, false], null], "\"1975-01-01\"", null], "and", [false, 6, [0, [0, 10, false], null], "\"1976-01-01\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "query_toks": ["SELECT", "DISTINCT", "T2.product_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T1.date_order_placed", ">", "=", "``", "1975-01-01", "''", "AND", "T1.date_order_placed", "<", "=", "``", "1976-01-01", "''"],
        "query_toks_no_value": ["select", "distinct", "t2", ".", "product_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t1", ".", "date_order_placed", ">", "=", "value", "and", "t1", ".", "date_order_placed", "<", "=", "value"],
        "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "question_toks": ["What", "are", "the", "distinct", "ids", "of", "products", "ordered", "between", "1975-01-01", "and", "1976-01-01", "?", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 4]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 16, false], null]]]],
            "union": null,
            "where": [[false, 5, [0, [0, 10, false], null], "\"1975-01-01\"", null], "and", [false, 6, [0, [0, 10, false], null], "\"1976-01-01\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''", "INTERSECT", "SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Shipped", "''"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"],
        "question": "Find the names of the customers who have order status both \"On Road\" and \"Shipped\".",
        "question_toks": ["Find", "the", "names", "of", "the", "customers", "who", "have", "order", "status", "both", "``", "On", "Road", "''", "and", "``", "Shipped", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                    "table_units": [["table_unit", 0], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 9, false], null], "\"Shipped\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"On Road\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''", "INTERSECT", "SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Shipped", "''"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value", "intersect", "select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"],
        "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer names.",
        "question_toks": ["Which", "customers", "have", "both", "``", "On", "Road", "''", "and", "``", "Shipped", "''", "as", "order", "status", "?", "List", "the", "customer", "names", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                    "table_units": [["table_unit", 0], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 2, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 9, false], null], "\"Shipped\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"On Road\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "query_toks": ["SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''", "INTERSECT", "SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Shipped", "''"],
        "query_toks_no_value": ["select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value", "intersect", "select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"],
        "question": "Find the id of the customers who have order status both \"On Road\" and \"Shipped\".",
        "question_toks": ["Find", "the", "id", "of", "the", "customers", "who", "have", "order", "status", "both", "``", "On", "Road", "''", "and", "``", "Shipped", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                    "table_units": [["table_unit", 0], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 1, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 9, false], null], "\"Shipped\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"On Road\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"On Road\" INTERSECT SELECT T1.customer_id FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = \"Shipped\"",
        "query_toks": ["SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "On", "Road", "''", "INTERSECT", "SELECT", "T1.customer_id", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "WHERE", "T2.order_status", "=", "``", "Shipped", "''"],
        "query_toks_no_value": ["select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value", "intersect", "select", "t1", ".", "customer_id", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "where", "t2", ".", "order_status", "=", "value"],
        "question": "Which customers have both \"On Road\" and \"Shipped\" as order status? List the customer ids.",
        "question_toks": ["Which", "customers", "have", "both", "``", "On", "Road", "''", "and", "``", "Shipped", "''", "as", "order", "status", "?", "List", "the", "customer", "ids", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": {
                "except": null,
                "from": {
                    "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                    "table_units": [["table_unit", 0], ["table_unit", 2]]
                },
                "groupBy": [],
                "having": [],
                "intersect": null,
                "limit": null,
                "orderBy": [],
                "select": [false, [[0, [0, [0, 1, false], null]]]],
                "union": null,
                "where": [[false, 2, [0, [0, 9, false], null], "\"Shipped\"", null]]
            },
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 1, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 9, false], null], "\"On Road\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "query_toks": ["SELECT", "T1.date_order_placed", "FROM", "orders", "AS", "T1", "JOIN", "shipments", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T2.shipment_tracking_number", "=", "3452"],
        "query_toks_no_value": ["select", "t1", ".", "date_order_placed", "from", "orders", "as", "t1", "join", "shipments", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "shipment_tracking_number", "=", "value"],
        "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "question_toks": ["When", "was", "the", "order", "placed", "whose", "shipment", "tracking", "number", "is", "3452", "?", "Give", "me", "the", "date", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 23, false], null], 3452.0, null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "query_toks": ["SELECT", "T1.date_order_placed", "FROM", "orders", "AS", "T1", "JOIN", "shipments", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T2.shipment_tracking_number", "=", "3452"],
        "query_toks_no_value": ["select", "t1", ".", "date_order_placed", "from", "orders", "as", "t1", "join", "shipments", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "shipment_tracking_number", "=", "value"],
        "question": "On which day was the order placed whose shipment tracking number is 3452?",
        "question_toks": ["On", "which", "day", "was", "the", "order", "placed", "whose", "shipment", "tracking", "number", "is", "3452", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 23, false], null], 3452.0, null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "query_toks": ["SELECT", "T1.date_order_placed", "FROM", "orders", "AS", "T1", "JOIN", "shipments", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T2.invoice_number", "=", "10"],
        "query_toks_no_value": ["select", "t1", ".", "date_order_placed", "from", "orders", "as", "t1", "join", "shipments", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "invoice_number", "=", "value"],
        "question": "What is the placement date of the order whose invoice number is 10?",
        "question_toks": ["What", "is", "the", "placement", "date", "of", "the", "order", "whose", "invoice", "number", "is", "10", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 10.0, null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "query_toks": ["SELECT", "T1.date_order_placed", "FROM", "orders", "AS", "T1", "JOIN", "shipments", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "WHERE", "T2.invoice_number", "=", "10"],
        "query_toks_no_value": ["select", "t1", ".", "date_order_placed", "from", "orders", "as", "t1", "join", "shipments", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "where", "t2", ".", "invoice_number", "=", "value"],
        "question": "On what day was the order with invoice number 10 placed?",
        "question_toks": ["On", "what", "day", "was", "the", "order", "with", "invoice", "number", "10", "placed", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 21, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 10, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 22, false], null], 10.0, null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.product_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "JOIN", "products", "AS", "T3", "ON", "T1.order_id", "=", "T2.order_id", "AND", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "product_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "join", "products", "as", "t3", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "and", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id"],
        "question": "List the count and id of each product in all the orders.",
        "question_toks": ["List", "the", "count", "and", "id", "of", "each", "product", "in", "all", "the", "orders", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query_toks": ["SELECT", "count", "(", "*", ")", ",", "T3.product_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "JOIN", "products", "AS", "T3", "ON", "T1.order_id", "=", "T2.order_id", "AND", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id"],
        "query_toks_no_value": ["select", "count", "(", "*", ")", ",", "t3", ".", "product_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "join", "products", "as", "t3", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "and", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id"],
        "question": "For each product, return its id and the number of times it was ordered.",
        "question_toks": ["For", "each", "product", ",", "return", "its", "id", "and", "the", "number", "of", "times", "it", "was", "ordered", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[3, [0, [0, 0, false], null]], [0, [0, [0, 12, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query_toks": ["SELECT", "T3.product_name", ",", "count", "(", "*", ")", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "JOIN", "products", "AS", "T3", "ON", "T1.order_id", "=", "T2.order_id", "AND", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id"],
        "query_toks_no_value": ["select", "t3", ".", "product_name", ",", "count", "(", "*", ")", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "join", "products", "as", "t3", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "and", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id"],
        "question": "List the name and count of each product in all orders.",
        "question_toks": ["List", "the", "name", "and", "count", "of", "each", "product", "in", "all", "orders", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "query_toks": ["SELECT", "T3.product_name", ",", "count", "(", "*", ")", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "JOIN", "products", "AS", "T3", "ON", "T1.order_id", "=", "T2.order_id", "AND", "T2.product_id", "=", "T3.product_id", "GROUP", "BY", "T3.product_id"],
        "query_toks_no_value": ["select", "t3", ".", "product_name", ",", "count", "(", "*", ")", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "join", "products", "as", "t3", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "and", "t2", ".", "product_id", "=", "t3", ".", "product_id", "group", "by", "t3", ".", "product_id"],
        "question": "For each product, show its name and the number of times it was ordered.",
        "question_toks": ["For", "each", "product", ",", "show", "its", "name", "and", "the", "number", "of", "times", "it", "was", "ordered", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 12, false]],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 13, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_date", ">", "``", "2000-01-01", "''"],
        "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_date", ">", "value"],
        "question": "Find the ids of orders which are shipped after 2000-01-01.",
        "question_toks": ["Find", "the", "ids", "of", "orders", "which", "are", "shipped", "after", "2000-01-01", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 24, false], null], "\"2000-01-01\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_date", ">", "``", "2000-01-01", "''"],
        "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_date", ">", "value"],
        "question": "Which orders have shipment after 2000-01-01? Give me the order ids.",
        "question_toks": ["Which", "orders", "have", "shipment", "after", "2000-01-01", "?", "Give", "me", "the", "order", "ids", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 3, [0, [0, 24, false], null], "\"2000-01-01\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)",
        "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_date", "=", "(", "SELECT", "max", "(", "shipment_date", ")", "FROM", "shipments", ")"],
        "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_date", "=", "(", "select", "max", "(", "shipment_date", ")", "from", "shipments", ")"],
        "question": "Find the id of the order which is shipped most recently.",
        "question_toks": ["Find", "the", "id", "of", "the", "order", "which", "is", "shipped", "most", "recently", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 24, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 5]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 24, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT order_id FROM shipments WHERE shipment_date  =  (SELECT max(shipment_date) FROM shipments)",
        "query_toks": ["SELECT", "order_id", "FROM", "shipments", "WHERE", "shipment_date", "=", "(", "SELECT", "max", "(", "shipment_date", ")", "FROM", "shipments", ")"],
        "query_toks_no_value": ["select", "order_id", "from", "shipments", "where", "shipment_date", "=", "(", "select", "max", "(", "shipment_date", ")", "from", "shipments", ")"],
        "question": "Which order has the most recent shipment? Give me the order id.",
        "question_toks": ["Which", "order", "has", "the", "most", "recent", "shipment", "?", "Give", "me", "the", "order", "id", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 5]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 21, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 24, false], null], {
                        "except": null,
                        "from": {
                            "conds": [],
                            "table_units": [["table_unit", 5]]
                        },
                        "groupBy": [],
                        "having": [],
                        "intersect": null,
                        "limit": null,
                        "orderBy": [],
                        "select": [false, [[1, [0, [0, 24, false], null]]]],
                        "union": null,
                        "where": []
                    }, null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "query_toks": ["SELECT", "DISTINCT", "product_name", "FROM", "products", "ORDER", "BY", "product_name"],
        "query_toks_no_value": ["select", "distinct", "product_name", "from", "products", "order", "by", "product_name"],
        "question": "List the names of all distinct products in alphabetical order.",
        "question_toks": ["List", "the", "names", "of", "all", "distinct", "products", "in", "alphabetical", "order", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 13, false], null]]],
            "select": [true, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT product_name FROM products ORDER BY product_name",
        "query_toks": ["SELECT", "DISTINCT", "product_name", "FROM", "products", "ORDER", "BY", "product_name"],
        "query_toks_no_value": ["select", "distinct", "product_name", "from", "products", "order", "by", "product_name"],
        "question": "Sort all the distinct products in alphabetical order.",
        "question_toks": ["Sort", "all", "the", "distinct", "products", "in", "alphabetical", "order", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 3]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 13, false], null]]],
            "select": [true, [[0, [0, [0, 13, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "query_toks": ["SELECT", "DISTINCT", "order_id", "FROM", "orders", "ORDER", "BY", "date_order_placed"],
        "query_toks_no_value": ["select", "distinct", "order_id", "from", "orders", "order", "by", "date_order_placed"],
        "question": "List the ids of all distinct orders ordered by placed date.",
        "question_toks": ["List", "the", "ids", "of", "all", "distinct", "orders", "ordered", "by", "placed", "date", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 10, false], null]]],
            "select": [true, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "query_toks": ["SELECT", "DISTINCT", "order_id", "FROM", "orders", "ORDER", "BY", "date_order_placed"],
        "query_toks_no_value": ["select", "distinct", "order_id", "from", "orders", "order", "by", "date_order_placed"],
        "question": "What are ids of the all distinct orders, sorted by placement date?",
        "question_toks": ["What", "are", "ids", "of", "the", "all", "distinct", "orders", ",", "sorted", "by", "placement", "date", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 2]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": ["asc", [[0, [0, 10, false], null]]],
            "select": [true, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.order_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "GROUP", "BY", "T1.order_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "order_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "group", "by", "t1", ".", "order_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the id of the order which has the most items?",
        "question_toks": ["What", "is", "the", "id", "of", "the", "order", "which", "has", "the", "most", "items", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 4]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.order_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id GROUP BY T1.order_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.order_id", "FROM", "orders", "AS", "T1", "JOIN", "order_items", "AS", "T2", "ON", "T1.order_id", "=", "T2.order_id", "GROUP", "BY", "T1.order_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "order_id", "from", "orders", "as", "t1", "join", "order_items", "as", "t2", "on", "t1", ".", "order_id", "=", "t2", ".", "order_id", "group", "by", "t1", ".", "order_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Which order deals with the most items? Return the order id.",
        "question_toks": ["Which", "order", "deals", "with", "the", "most", "items", "?", "Return", "the", "order", "id", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 7, false], null], [0, 17, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 4]]
            },
            "groupBy": [[0, 7, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 7, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "What is the name of the customer who has the largest number of orders?",
        "question_toks": ["What", "is", "the", "name", "of", "the", "customer", "who", "has", "the", "largest", "number", "of", "orders", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T1.customer_id", "ORDER", "BY", "count", "(", "*", ")", "DESC", "LIMIT", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t1", ".", "customer_id", "order", "by", "count", "(", "*", ")", "desc", "limit", "value"],
        "question": "Find the name of the customer who made the most orders.",
        "question_toks": ["Find", "the", "name", "of", "the", "customer", "who", "made", "the", "most", "orders", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2]]
            },
            "groupBy": [[0, 1, false]],
            "having": [],
            "intersect": null,
            "limit": 1,
            "orderBy": ["desc", [[0, [3, 0, false], null]]],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query_toks": ["SELECT", "invoice_number", "FROM", "invoices", "WHERE", "invoice_date", "<", "``", "1989-09-03", "''", "OR", "invoice_date", ">", "``", "2007-12-25", "''"],
        "query_toks_no_value": ["select", "invoice_number", "from", "invoices", "where", "invoice_date", "<", "value", "or", "invoice_date", ">", "value"],
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "question_toks": ["Find", "the", "invoice", "numbers", "which", "are", "created", "before", "1989-09-03", "or", "after", "2007-12-25", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 5, false], null], "\"1989-09-03\"", null], "or", [false, 3, [0, [0, 5, false], null], "\"2007-12-25\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query_toks": ["SELECT", "invoice_number", "FROM", "invoices", "WHERE", "invoice_date", "<", "``", "1989-09-03", "''", "OR", "invoice_date", ">", "``", "2007-12-25", "''"],
        "query_toks_no_value": ["select", "invoice_number", "from", "invoices", "where", "invoice_date", "<", "value", "or", "invoice_date", ">", "value"],
        "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "question_toks": ["What", "are", "the", "invoice", "numbers", "created", "before", "1989-09-03", "or", "after", "2007-12-25", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 4, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 5, false], null], "\"1989-09-03\"", null], "or", [false, 3, [0, [0, 5, false], null], "\"2007-12-25\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query_toks": ["SELECT", "DISTINCT", "invoice_details", "FROM", "invoices", "WHERE", "invoice_date", "<", "``", "1989-09-03", "''", "OR", "invoice_date", ">", "``", "2007-12-25", "''"],
        "query_toks_no_value": ["select", "distinct", "invoice_details", "from", "invoices", "where", "invoice_date", "<", "value", "or", "invoice_date", ">", "value"],
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "question_toks": ["Find", "the", "distinct", "details", "of", "invoices", "which", "are", "created", "before", "1989-09-03", "or", "after", "2007-12-25", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 5, false], null], "\"1989-09-03\"", null], "or", [false, 3, [0, [0, 5, false], null], "\"2007-12-25\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "query_toks": ["SELECT", "DISTINCT", "invoice_details", "FROM", "invoices", "WHERE", "invoice_date", "<", "``", "1989-09-03", "''", "OR", "invoice_date", ">", "``", "2007-12-25", "''"],
        "query_toks_no_value": ["select", "distinct", "invoice_details", "from", "invoices", "where", "invoice_date", "<", "value", "or", "invoice_date", ">", "value"],
        "question": "What are the distinct details of invoices created before 1989-09-03 or after 2007-12-25?",
        "question_toks": ["What", "are", "the", "distinct", "details", "of", "invoices", "created", "before", "1989-09-03", "or", "after", "2007-12-25", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [],
                "table_units": [["table_unit", 1]]
            },
            "groupBy": [],
            "having": [],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [true, [[0, [0, [0, 6, false], null]]]],
            "union": null,
            "where": [[false, 4, [0, [0, 5, false], null], "\"1989-09-03\"", null], "or", [false, 3, [0, [0, 5, false], null], "\"2007-12-25\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T2.customer_name", ",", "count", "(", "*", ")", "FROM", "orders", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t2", ".", "customer_name", ",", "count", "(", "*", ")", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "For each customer who has at least two orders, find the customer name and number of orders made.",
        "question_toks": ["For", "each", "customer", "who", "has", "at", "least", "two", "orders", ",", "find", "the", "customer", "name", "and", "number", "of", "orders", "made", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T2.customer_name ,  count(*) FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  >=  2",
        "query_toks": ["SELECT", "T2.customer_name", ",", "count", "(", "*", ")", "FROM", "orders", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "2"],
        "query_toks_no_value": ["select", "t2", ".", "customer_name", ",", "count", "(", "*", ")", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Which customers have made at least two orders? Give me each customer name and number of orders made.",
        "question_toks": ["Which", "customers", "have", "made", "at", "least", "two", "orders", "?", "Give", "me", "each", "customer", "name", "and", "number", "of", "orders", "made", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]], [3, [0, [0, 0, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "query_toks": ["SELECT", "T2.customer_name", "FROM", "orders", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "HAVING", "count", "(", "*", ")", "<", "=", "2"],
        "query_toks_no_value": ["select", "t2", ".", "customer_name", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "having", "count", "(", "*", ")", "<", "=", "value"],
        "question": "Find the name of the customers who have at most two orders.",
        "question_toks": ["Find", "the", "name", "of", "the", "customers", "who", "have", "at", "most", "two", "orders", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 6, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "query_toks": ["SELECT", "T2.customer_name", "FROM", "orders", "AS", "T1", "JOIN", "customers", "AS", "T2", "ON", "T1.customer_id", "=", "T2.customer_id", "GROUP", "BY", "T2.customer_id", "HAVING", "count", "(", "*", ")", "<", "=", "2"],
        "query_toks_no_value": ["select", "t2", ".", "customer_name", "from", "orders", "as", "t1", "join", "customers", "as", "t2", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "group", "by", "t2", ".", "customer_id", "having", "count", "(", "*", ")", "<", "=", "value"],
        "question": "What are the names of the customers who have made two or less orders?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "customers", "who", "have", "made", "two", "or", "less", "orders", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 8, false], null], [0, 1, false], null]],
                "table_units": [["table_unit", 2], ["table_unit", 0]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 6, [0, [3, 0, false], null], 2.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": []
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "JOIN", "order_items", "AS", "T3", "JOIN", "products", "AS", "T4", "ON", "T1.customer_id", "=", "T2.customer_id", "AND", "T2.order_id", "=", "T3.order_id", "AND", "T3.product_id", "=", "T4.product_id", "WHERE", "T4.product_name", "=", "``", "food", "''", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "join", "order_items", "as", "t3", "join", "products", "as", "t4", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "and", "t2", ".", "order_id", "=", "t3", ".", "order_id", "and", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_name", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "List the names of the customers who have once bought product \"food\".",
        "question_toks": ["List", "the", "names", "of", "the", "customers", "who", "have", "once", "bought", "product", "``", "food", "''", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2], ["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 13, false], null], "\"food\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "JOIN", "order_items", "AS", "T3", "JOIN", "products", "AS", "T4", "ON", "T1.customer_id", "=", "T2.customer_id", "AND", "T2.order_id", "=", "T3.order_id", "AND", "T3.product_id", "=", "T4.product_id", "WHERE", "T4.product_name", "=", "``", "food", "''", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "join", "order_items", "as", "t3", "join", "products", "as", "t4", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "and", "t2", ".", "order_id", "=", "t3", ".", "order_id", "and", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t4", ".", "product_name", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "What are the names of the customers who bought product \"food\" at least once?",
        "question_toks": ["What", "are", "the", "names", "of", "the", "customers", "who", "bought", "product", "``", "food", "''", "at", "least", "once", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2], ["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 13, false], null], "\"food\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "JOIN", "order_items", "AS", "T3", "JOIN", "products", "AS", "T4", "ON", "T1.customer_id", "=", "T2.customer_id", "AND", "T2.order_id", "=", "T3.order_id", "AND", "T3.product_id", "=", "T4.product_id", "WHERE", "T3.order_item_status", "=", "``", "Cancel", "''", "AND", "T4.product_name", "=", "``", "food", "''", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "join", "order_items", "as", "t3", "join", "products", "as", "t4", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "and", "t2", ".", "order_id", "=", "t3", ".", "order_id", "and", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t3", ".", "order_item_status", "=", "value", "and", "t4", ".", "product_name", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "List the names of customers who have once canceled the purchase of the product \"food\" (the item status is \"Cancel\").",
        "question_toks": ["List", "the", "names", "of", "customers", "who", "have", "once", "canceled", "the", "purchase", "of", "the", "product", "``", "food", "''", "(", "the", "item", "status", "is", "``", "Cancel", "''", ")", "."],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2], ["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Cancel\"", null], "and", [false, 2, [0, [0, 13, false], null], "\"food\"", null]]
        }
    }, {
        "db_id": "tracking_orders",
        "query": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 JOIN order_items AS T3 JOIN products AS T4 ON T1.customer_id = T2.customer_id AND T2.order_id = T3.order_id AND T3.product_id = T4.product_id WHERE T3.order_item_status = \"Cancel\" AND T4.product_name = \"food\" GROUP BY T1.customer_id HAVING count(*)  >=  1",
        "query_toks": ["SELECT", "T1.customer_name", "FROM", "customers", "AS", "T1", "JOIN", "orders", "AS", "T2", "JOIN", "order_items", "AS", "T3", "JOIN", "products", "AS", "T4", "ON", "T1.customer_id", "=", "T2.customer_id", "AND", "T2.order_id", "=", "T3.order_id", "AND", "T3.product_id", "=", "T4.product_id", "WHERE", "T3.order_item_status", "=", "``", "Cancel", "''", "AND", "T4.product_name", "=", "``", "food", "''", "GROUP", "BY", "T1.customer_id", "HAVING", "count", "(", "*", ")", ">", "=", "1"],
        "query_toks_no_value": ["select", "t1", ".", "customer_name", "from", "customers", "as", "t1", "join", "orders", "as", "t2", "join", "order_items", "as", "t3", "join", "products", "as", "t4", "on", "t1", ".", "customer_id", "=", "t2", ".", "customer_id", "and", "t2", ".", "order_id", "=", "t3", ".", "order_id", "and", "t3", ".", "product_id", "=", "t4", ".", "product_id", "where", "t3", ".", "order_item_status", "=", "value", "and", "t4", ".", "product_name", "=", "value", "group", "by", "t1", ".", "customer_id", "having", "count", "(", "*", ")", ">", "=", "value"],
        "question": "Which customers have ever canceled the purchase of the product \"food\" (the item status is \"Cancel\")?",
        "question_toks": ["Which", "customers", "have", "ever", "canceled", "the", "purchase", "of", "the", "product", "``", "food", "''", "(", "the", "item", "status", "is", "``", "Cancel", "''", ")", "?"],
        "sql": {
            "except": null,
            "from": {
                "conds": [[false, 2, [0, [0, 1, false], null], [0, 8, false], null], "and", [false, 2, [0, [0, 7, false], null], [0, 17, false], null], "and", [false, 2, [0, [0, 16, false], null], [0, 12, false], null]],
                "table_units": [["table_unit", 0], ["table_unit", 2], ["table_unit", 4], ["table_unit", 3]]
            },
            "groupBy": [[0, 1, false]],
            "having": [[false, 5, [0, [3, 0, false], null], 1.0, null]],
            "intersect": null,
            "limit": null,
            "orderBy": [],
            "select": [false, [[0, [0, [0, 2, false], null]]]],
            "union": null,
            "where": [[false, 2, [0, [0, 18, false], null], "\"Cancel\"", null], "and", [false, 2, [0, [0, 13, false], null], "\"food\"", null]]
        }
    }
]